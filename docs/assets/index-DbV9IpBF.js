var f1=Object.defineProperty;var x1=(A,t,e)=>t in A?f1(A,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):A[t]=e;var s=(A,t,e)=>x1(A,typeof t!="symbol"?t+"":t,e);import{f as g,N as o2,c as I2,d as z0,i as y2,Y as P,W as s1,a4 as A2,v as b1,_ as c1,I as $0,$ as y1,aR as h1,a5 as Z0,A as t2,bk as C1,X as I1,Z as S1,a1 as p1,aD as k1,a2 as P0,o as t1,aM as N1,e as M1,b as w1,L as Y1,ab as O0,a7 as K0,a0 as v1,n as T1,bi as H1,a3 as u1,bl as a1,a8 as V1,a6 as $1,a9 as L1,aa as F2,bm as g1,bn as q1}from"./index-CnmbM-dR.js";import{I as O1}from"./index-DjZGZQsH.js";import{a as Q0}from"./index-BHzW6WMu.js";class q0{toString(){return this.getName()}equals(t){return t&&t.toString()===this.toString()}indexOf(t,e){let u=t%e;return u<0&&(u+=e),u}static numeric(t,e){const u=typeof t=="number"?t:Number(t);if(isNaN(u))throw new Error(`illegal ${e}: ${t}`);return u}}class I extends q0{}class e2 extends q0{constructor(e,u){super();s(this,"culture");s(this,"dayIndex");this.culture=e,this.dayIndex=u}getDayIndex(){return this.dayIndex}getCulture(){return this.culture}getName(){return this.culture.getName()}toString(){return`${this.culture.toString()}第${this.getDayIndex()+1}天`}}class h extends I{constructor(e,u){super();s(this,"names");s(this,"index");this.names=e,this.index=this.indexOfBy(u)}indexOfBy(e){if(typeof e=="number")return this.indexOf(e,this.getSize());for(let u=0,r=this.getSize();u<r;u++)if(this.names[u]===e)return u;throw new Error(`illegal name ${e}`)}getName(){return this.names[this.index]}getIndex(){return this.index}getSize(){return this.names.length}nextIndex(e){return this.indexOfBy(this.index+e)}stepsTo(e){return this.indexOfBy(e-this.index)}}const Z=class Z extends h{constructor(t){super(Z.NAMES,t)}static fromIndex(t){return new Z(Z.numeric(t,"animal index"))}static fromName(t){return new Z(t)}next(t){return Z.fromIndex(this.nextIndex(t))}getTwentyEightStar(){return j2.fromIndex(this.index)}};s(Z,"NAMES",["蛟","龙","貉","兔","狐","虎","豹","獬","牛","蝠","鼠","燕","猪","獝","狼","狗","彘","鸡","乌","猴","猿","犴","羊","獐","马","鹿","蛇","蚓"]);let S2=Z;const K=class K extends h{constructor(t){super(K.NAMES,t)}static fromIndex(t){return new K(K.numeric(t,"twenty eight star index"))}static fromName(t){return new K(t)}next(t){return K.fromIndex(this.nextIndex(t))}getSevenStar(){return D2.fromIndex(this.index%7+4)}getLand(){return c2.fromIndex([4,4,4,2,2,2,7,7,7,0,0,0,0,5,5,5,6,6,6,1,1,1,8,8,8,3,3,3][this.index])}getZone(){return h2.fromIndex(~~(this.index/7))}getAnimal(){return S2.fromIndex(this.index)}getLuck(){return U0.fromIndex([0,1,1,0,1,0,0,0,1,1,1,1,0,0,1,0,0,1,0,1,0,0,1,1,1,0,1,0][this.index])}};s(K,"NAMES",["角","亢","氐","房","心","尾","箕","斗","牛","女","虚","危","室","壁","奎","娄","胃","昴","毕","觜","参","井","鬼","柳","星","张","翼","轸"]);let j2=K;const Q=class Q extends h{constructor(t){super(Q.NAMES,t)}static fromIndex(t){return new Q(Q.numeric(t,"seven star index"))}static fromName(t){return new Q(t)}next(t){return Q.fromIndex(this.nextIndex(t))}getWeek(){return G0.fromIndex(this.index)}};s(Q,"NAMES",["日","月","火","水","木","金","土"]);let D2=Q;const G=class G extends h{constructor(t){super(G.NAMES,t)}static fromIndex(t){return new G(G.numeric(t,"week index"))}static fromName(t){return new G(t)}next(t){return G.fromIndex(this.nextIndex(t))}getSevenStar(){return D2.fromIndex(this.index)}};s(G,"NAMES",["日","一","二","三","四","五","六"]);let G0=G;const U=class U extends h{constructor(t){super(U.NAMES,t)}static fromIndex(t){return new U(U.numeric(t,"land index"))}static fromName(t){return new U(t)}next(t){return U.fromIndex(this.nextIndex(t))}getDirection(){return S.fromIndex(this.index)}};s(U,"NAMES",["玄天","朱天","苍天","阳天","钧天","幽天","颢天","变天","炎天"]);let c2=U;const X=class X extends h{constructor(t){super(X.NAMES,t)}static fromIndex(t){return new X(X.numeric(t,"direction index"))}static fromName(t){return new X(t)}next(t){return X.fromIndex(this.nextIndex(t))}getLand(){return c2.fromIndex(this.index)}getElement(){return O.fromIndex([4,2,0,0,2,3,3,2,1][this.index])}};s(X,"NAMES",["北","西南","东","东南","中","西北","西","东北","南"]);let S=X;const _=class _ extends h{constructor(t){super(_.NAMES,t)}static fromIndex(t){return new _(_.numeric(t,"zone index"))}static fromName(t){return new _(t)}next(t){return _.fromIndex(this.nextIndex(t))}getDirection(){return S.fromName(this.getName())}getBeast(){return p2.fromIndex(this.getIndex())}};s(_,"NAMES",["东","北","西","南"]);let h2=_;const e0=class e0 extends h{constructor(t){super(e0.NAMES,t)}static fromIndex(t){return new e0(e0.numeric(t,"beast index"))}static fromName(t){return new e0(t)}next(t){return e0.fromIndex(this.nextIndex(t))}getZone(){return h2.fromIndex(this.index)}};s(e0,"NAMES",["青龙","玄武","白虎","朱雀"]);let p2=e0;const t0=class t0 extends h{constructor(t){super(t0.NAMES,t)}static fromIndex(t){return new t0(t0.numeric(t,"luck index"))}static fromName(t){return new t0(t)}next(t){return t0.fromIndex(this.nextIndex(t))}};s(t0,"NAMES",["吉","凶"]);let U0=t0;const u0=class u0 extends h{constructor(t){super(u0.NAMES,t)}static fromIndex(t){return new u0(u0.numeric(t,"constellation index"))}static fromName(t){return new u0(t)}next(t){return u0.fromIndex(this.nextIndex(t))}};s(u0,"NAMES",["白羊","金牛","双子","巨蟹","狮子","处女","天秤","天蝎","射手","摩羯","水瓶","双鱼"]);let k2=u0;const r0=class r0 extends h{constructor(t){super(r0.NAMES,t)}static fromIndex(t){return new r0(r0.numeric(t,"duty index"))}static fromName(t){return new r0(t)}next(t){return r0.fromIndex(this.nextIndex(t))}};s(r0,"NAMES",["建","除","满","平","定","执","破","危","成","收","开","闭"]);let g2=r0;const n0=class n0 extends h{constructor(t){super(n0.NAMES,t)}static fromIndex(t){return new n0(n0.numeric(t,"element index"))}static fromName(t){return new n0(t)}next(t){return n0.fromIndex(this.nextIndex(t))}getReinforce(){return this.next(1)}getRestrain(){return this.next(2)}getReinforced(){return this.next(-1)}getRestrained(){return this.next(-2)}getDirection(){return S.fromIndex([2,8,4,6,0][this.index])}};s(n0,"NAMES",["木","火","土","金","水"]);let O=n0;const V=class V extends h{constructor(t){super(V.NAMES,t)}static fromIndex(t){return new V(V.numeric(t,"god index"))}static fromName(t){return new V(t)}next(t){return V.fromIndex(this.nextIndex(t))}getLuck(){return U0.fromIndex(this.index<60?0:1)}static getDayGods(t,e){const u=[];let r=e.getIndex().toString(16).toUpperCase();r.length<2&&(r="0"+r);const n=new RegExp(`;${r}(.[^;]*)`,"g").exec(V.dayGods[t.getEarthBranch().next(-2).getIndex()]);if(n){const F=n[1];for(let i=0,a=F.length;i<a;i+=2)u.push(V.fromIndex(parseInt(F.substring(i,i+2),16)))}return u}};s(V,"NAMES",["天恩","鸣吠","母仓","不将","四相","鸣吠对","五合","三合","除神","月德","月空","月德合","月恩","时阴","五富","生气","金匮","相日","阴德","六合","益后","青龙","续世","明堂","王日","要安","官日","吉期","福德","六仪","金堂","宝光","民日","临日","天马","敬安","普护","驿马","天后","阳德","天喜","天医","司命","圣心","玉宇","守日","时德","解神","时阳","天仓","天巫","玉堂","福生","天德","天德合","天愿","天赦","天符","阴神","解除","五虚","五离","重日","复日","血支","天贼","土符","游祸","白虎","小耗","致死","河魁","劫煞","月煞","月建","往亡","大时","大败","咸池","厌对","招摇","九坎","九焦","天罡","死神","月害","死气","月破","大耗","天牢","元武","月厌","月虚","归忌","小时","天刑","朱雀","九空","天吏","地火","四击","大煞","勾陈","八专","灾煞","天火","血忌","土府","月刑","触水龙","地囊","八风","四废","四忌","四穷","五墓","阴错","四耗","阳错","孤辰","小会","大会","八龙","七鸟","九虎","六蛇","天狗","行狠","了戾","岁薄","逐阵","三丧","三阴","阴道冲阳","阴位","阴阳交破","阴阳俱错","阴阳击冲","鬼哭","单阴","绝阴","纯阳","阳错阴冲","七符","成日","孤阳","绝阳","纯阴","大退","四离","阳破阴冲"]),s(V,"dayGodslet N2=V;const F0=class F0 extends h{constructor(t){super(F0.NAMES,t)}static fromIndex(t){return new F0(F0.numeric(t,"phase index"))}static fromName(t){return new F0(t)}next(t){return F0.fromIndex(this.nextIndex(t))}};s(F0,"NAMES",["朔月","既朔月","蛾眉新月","蛾眉新月","蛾眉月","夕月","上弦月","上弦月","九夜月","宵月","宵月","宵月","渐盈凸月","小望月","望月","既望月","立待月","居待月","寝待月","更待月","渐亏凸月","下弦月","下弦月","有明月","有明月","蛾眉残月","蛾眉残月","残月","晓月","晦月"]);let M2=F0;const i0=class i0 extends h{constructor(t){super(i0.NAMES,t)}static fromIndex(t){return new i0(i0.numeric(t,"sixty index"))}static fromName(t){return new i0(t)}next(t){return i0.fromIndex(this.nextIndex(t))}};s(i0,"NAMES",["上元","中元","下元"]);let w2=i0;const s0=class s0 extends h{constructor(t){super(s0.NAMES,t)}static fromIndex(t){return new s0(s0.numeric(t,"sound index"))}static fromName(t){return new s0(t)}next(t){return s0.fromIndex(this.nextIndex(t))}};s(s0,"NAMES",["海中金","炉中火","大林木","路旁土","剑锋金","山头火","涧下水","城头土","白蜡金","杨柳木","泉中水","屋上土","霹雳火","松柏木","长流水","沙中金","山下火","平地木","壁上土","金箔金","覆灯火","天河水","大驿土","钗钏金","桑柘木","大溪水","沙中土","天上火","石榴木","大海水"]);let Y2=s0;const f=class f extends h{constructor(t){super(f.NAMES,t)}static fromIndex(t){return new f(f.numeric(t,"taboo index"))}static fromName(t){return new f(t)}next(t){return f.fromIndex(this.nextIndex(t))}static _getTaboos(t,e,u,r){const n=[],F=t[e].split(";",-1)[u].split(",",-1)[r];for(let i=0,a=F.length;i<a;i+=2)n.push(f.fromIndex(parseInt(F.substring(i,i+2),16)));return n}static getDayRecommends(t,e){return f._getTaboos(f.dayTaboo,t.getEarthBranch().getIndex(),e.getIndex(),0)}static getDayAvoids(t,e){return f._getTaboos(f.dayTaboo,t.getEarthBranch().getIndex(),e.getIndex(),1)}static getHourRecommends(t,e){return f._getTaboos(f.hourTaboo,e.getEarthBranch().getIndex(),t.getIndex(),0)}static getHourAvoids(t,e){return f._getTaboos(f.hourTaboo,e.getEarthBranch().getIndex(),t.getIndex(),1)}};s(f,"NAMES",["祭祀","祈福","求嗣","开光","塑绘","齐醮","斋醮","沐浴","酬神","造庙","祀灶","焚香","谢土","出火","雕刻","嫁娶","订婚","纳采","问名","纳婿","归宁","安床","合帐","冠笄","订盟","进人口","裁衣","挽面","开容","修坟","启钻","破土","安葬","立碑","成服","除服","开生坟","合寿木","入殓","移柩","普渡","入宅","安香","安门","修造","起基","动土","上梁","竖柱","开井开池","作陂放水","拆卸","破屋","坏垣","补垣","伐木做梁","作灶","解除","开柱眼","穿屏扇架","盖屋合脊","开厕","造仓","塞穴","平治道涂","造桥","作厕","筑堤","开池","伐木","开渠","掘井","扫舍","放水","造屋","合脊","造畜稠","修门","定磉","作梁","修饰垣墙","架马","开市","挂匾","纳财","求财","开仓","买车","置产","雇佣","出货财","安机械","造车器","经络","酝酿","作染","鼓铸","造船","割蜜","栽种","取渔","结网","牧养","安碓磑","习艺","入学","理发","探病","见贵","乘船","渡水","针灸","出行","移徙","分居","剃头","整手足甲","纳畜","捕捉","畋猎","教牛马","会亲友","赴任","求医","治病","词讼","起基动土","破屋坏垣","盖屋","造仓库","立券交易","交易","立券","安机","会友","求医疗病","诸事不宜","馀事勿取","行丧","断蚁","归岫"]),s(f,"dayTaboo",["8319000776262322200C1E1D,06292C2E1F;0F11185C0001092A0D7014692983847B7C2C2E302F802D2B,06454F208A;111852838470795B302F404533802D152B39201E23221D212726,0F2E1F010D29;004023222089,0F29111847;11180001032A0D70795B2C2E302F802D4E152B33714161201F26,52095847;0F17000102061979454F3A15477677,241F8A20;34357C89,7129;1551000403706A454F3A3D771F262322271E1D21,382B415220;0F000102037039297175261F1D21,454F2E156341;00076A54196348767765,7920297115528A0D382B;11180001020439332C2E302F2B5844477515634C1F2721,0F520D19267A29717020;297170192C2E2D2F2B3E363F4C,0F5215632001034720;4C78,297172380D2A2E0F474841;18115C0001702A2C2E2F5283847129795B6375802D154C,1F208A24;1811795B032C2E302F802D4163754C27261E1D2120,010D0F29521F;00401D232289,71290F4720;0F170001020E032A70692C2E302F802D2B0D7129474C201F2322,5211183809615D;0F1811000102062A0D2C2D804B2B672E2F7129,70471F8A20;0007343589,0F71296B7080;175447440D15838477656A49,2B2E1F8A2022;11187129705B79000106032A0D397B6F7C802D2C2B61756627261E0C1D21,0F2E154147;0007385476771548,52061F20;0106111839513A2C2E2D2F8C804B4723221F63,71522920;1118000717161A2C2E3371292B56433D6375363F,0F010347208A;161A7889,292E1F0F3861;11180F00012A0D70795D7B7C39332D2C2E4E4863664C,064F478A20;5452838479195D00012A0D7B7C2C2E3348156366242526201E,0F7129;00262789,292C2E1F2B2F;040318111A17332C15290D200C7A,47450638;0004031A170F11332C2E302F1571292A657677451949,70201D52;007B343589,88;00010670175B71292A152322271E,03637C2B38;04067033392C7161262322271E1D210C,;000715547776,521F;181100012C2E2F1F,0F38;70076A363F,2920;7889,292E1F;0F707B7C00012F75,5220;528403395B2F1E20,0F01;4089,88;02060418110D332C2E415B637566262322271F20,520F;0F181100012C2E7129,5220;7C343589,88;0001020603691817452C2E2D498344,412B6A096338;393589,88;076A48,45752F29384C0F204F612B;000301394F2E154763751F27,0F707A802629710D1920;4F2C2E2B383F443D433663,0F01478A2015;201E27262322,89;0F000102700D335283845329711563,38048A7D4520;6A0339332C20528384531563,29713801000F0C47806B;005089,88;291503000D332E53261F2075,0F5238584F45;003989,88;3435000789,88;150001021745512E443D65262322,2B63387C;394889,88;00036A7415384878,45751F20240F522E834F;00010203332C2E2F1558631F,0F1920707A29712646;0717363F1A2C4F3A67433D8B,71290F010347;","0007010618111A332D302F15262322271E530270164C,560F7129;003989,88;073918111A17332C2E71292322271F1E20481D45548384,38002F70;700F181126151E20001A7919,;5040262789,0F712903;7911192C2E302F00030401060F1571292A75,707C2052;0079701811072C2E01060F33152627200C7A1A302F4576631F2B,80523829;39343589,88;040370181123220F1326271E2021,2915;262322271E202189,1F45;0001060403232226380F767754,56802015;0070071A010618110F5B52846775,632620;00010607155B5C26271E2021165D83,38470F29;3948007889,;528384530339454F0D297115332E2F637520,0F007058;5283845444360F11756415,2C2F29016B472E2B2038;0039504089,;0F0001022E792D3E75663D19,472063703852292B;0F000102032971152C2E19,4720637038522B;343589,88;0F52838403700D332C29712E1F27201E2322,15450175;00261F23221E201D2189,;003989,88;52838454754C2971150301022E,0F63206A0938268A41;151A83842627202322,580F7003632E1F297C;00394C786F89,0F2E4420;0704031118528384542D2E4E49201F1E1D2127,292B000C;0F706A151E201D528384544466,47010C2E292F2C38;394089,71294709636F7C44;0F0003450D3329712C2E2F1575,528A63705A20587D7C;0F111829711500010370390D332E750C201F,4552832F382B80;0034353989,522E1F;0F1118032A0D545283841A802D2C2E2B71296366774744201F26232221,010900150C;0006261F1E201D212322,0F29381118;0006547677,0F5229151F20;111800010206071979697C67474475664C,0F16298A20;000102071283542627201D210C4C78,29580F2E6352032E1F;00784C793989,0F29702E1F208A;0F03390D332C1929711563261D2E2322,382000521118750C706B;702D155483840F63262720,53292F017D4F38442B2E1F47;4089,030F565A61206B;0F181179005B712980152D4E2A0D533358,5270208A;0776776A742623221F200C211D1E,11180F2F5206802B;00343589,060F52;07565A5283845463756677261F20,010F152961;0007363F8B3989,09292C208A0F;0F11181200171A7919547638,5215201D;181179000607040D03302F5283844F3A45512B1533664C47,090F702E208A;838454151A4C200C1E23221D212726,030F522E1F;0039787989,1F2E20;111871545283842979397B7C69152B2A0D33485324251F1D1E26,6B00702F800C20;0F18110001027939706954528384685D15565A75201E1D26,29032E;00170F79191A6540,712909387C20;00676589,0F20;0F00071A706A717677492923221E202726,80522E1F;343589,0F5220;111800020D041A796933483E5347446563751F1D212026,010F09150C;262322271E201D21,52450F4F;0038262389,5215;040307177938494C,0F262070;","0F00030102705283842E544779,2920454F754C38;00010275261E0C2322,6303706F0F292E1F;033945302F838475262720,297071000F2E1F38;000102030F7039453319152E2D2F63751F0C1E20,71290D3847;7917155B0001025D,0F522E3820;38394089,0001202B;0F00175058,5D6B80382E;110F0001702C2E7129201F,5206;0007396A48343589,0F20;111800012A0D2C705271292E201F,15386179;3F656477,0F2B712920;11000170792C2E7129,0F52201F;110F00017052792E1F1E,71290D2B20;0001020626232227201E,0F2E03801F;1179302F842627201E,0071292E1F;0001067052842E71291F20,030F384775;79026A17657603,522E201F;004089,0F014720;010206110F452C2E7129095B5226232227201F0C,58804B036B2B38;69687011180F791966762627201E,0352292E80;00077B7C4834353989,295220;00170F332C2E2D2F802952443F26232227201F,15637C38;006526232227201F,89;0403010218111A17332C2E2D2B15713E6575,4538206429;0007030401021811171A0F2E2322271F1E706749528483,202F2938;000102081A158483262322270C1E,700F292E;1A162623227954,0001710F29;00061A161718110F292A0C26271F21797001022F49,47;1516291211020056,063820;3840,0001202B89;0403080618111A16332E2F152A09537919702C5445490D75072B,80632038;0001081811171A160F1571292A26271E20396476452B0D,632E5238;7B34,88;010206040318110F2E292A27200C70072C302F541F392B49,3815;64262322271F2021,0F2F2938;0002070818111A16175B153E445D5452848365647576,2038454F;000701020618111A1752848354230C7027,26203829;000102261E2027,03476F700F2971382E;15391A302F83845475662627201E,0F702E46290047;0F150370002E0D3979528384532971331F1E20,477D;0F0302791566046F,29710D722A38528384202E45;383940,6370018A75202B454F66;3907,88;0F000170390D332E2971152F63751F1E20,52846A38;00397C343548,89;000102030D70332C2E29712F534426201F1E,0F3815;6526232227201F,88;7100030170391959152E2D2F2B,0F201F4F75668A38;0F030102392E15634447001F1E,293845200D7075;00161A5D454F153826201E27,7D0D29;1A454F548384,88;0F00010203700D332E2F1929711552838453261F201E2322,;0F171170792F5B1566770001032C2B802D,29387C2071;50400089,88;5C11180001027170520D2984832B15200C,03802E3863;2E260F27201F,523815292F1A;7B7C343589,520F;00060724232227261F2025,520F157929382F;003F651F0C2027232289,0F29;00076A386563,0F7D8A2066454F52754C;","00077663,0F29713820;000304080618110F1A2E2D0D3371292A2C302F7566010239454E802B,6320;181117332C2E1526232227201F1E3E,38030F5229;0103040818111A155284262322271E20217A79708330,38472E63;00483F,6338200F;03041A174533302F56795B3E808339528454,700F2920;17262322274050,80387C6B;000F01111A1615292A2627200C2C670279538384543E49,6345;00010618111A16332C2E2F2D27200C07483A450D,15528438;34357B7C,88;002E2F18110F5B3315292A26271F20210C7A70710102393E19,035A;000304111A33152D2E302F71292A5284530770022B,0F634520;1A16170F13152654,3852204F;0018112C2E01040607332D292A09270C2322696870302F47023945,38205280;18111A16175B3315262322271F1E201D215D838454433E363F754551,00030F29;00700F1715262720,472E3863;3F88,2B38200F;030402111A16175B4F3A2B153E0079015D54528483696A51,7006200F;000F1320,63803829;0079181A165B332F2B262322271E2021030469702D4E49712930845D,454F;00030401061A16170F332E71292627200C02696A45514F0D2C2D4E497A,2B;007C343589,88;0F00701784831952712C2E1526271F,03380620;52848353000103297115332E2F19,0F8A514F6A66207545;6A170F19,5845754C201F4F3824;0F000301020D297115332E1F0C,16522026;1545332C2E2F84836375662620,0F0003700D71292B;000102060F17705283797823221E2027,2E7129;3F74397677658988,0F384720;5452848303152F802C2D,2E1F208A7A700F29710C7D;00010F17505840,565A803852838463;0F00030102700D19297115332C2B535448,2E45208A;0F03000102700D29713963451F0C20,528338542F158061;34357B7C89,030F;118384155B20272E1F21,0F0338;0001020607036A5D397C2163664744,0F4E25208A;5483846376656419786A,29803020;0F18110001702C2E71291F0D2B152F2127,52831620;1784832C2E5B26201F,0F010D29;00797084831754,0F2E472D4E1F;000739483F66,0F208A2B;54528384036F796A153E65,712963;0F17795B54838458,52807C38;0F5C111800015B712952841F20,756A25;01067071292C2E1F20,1103150F52;343589,0F715229;0F170070792C2E261F,0403412322;03027011170D332D2C2E2F716152838454,010F201F;6A170F1963766F,5452201F;030102703945802D2C512B7129092322270C7566,112E5283;1A5D453A332C2E2F4B25262322271F201E1D21,000F7047;007984831A160F1719,632E20471D6B;483F89,88;040318111A16175B795452848315302F6563395D,38702920;000F1323222627,2E38290315;010203040618110F3315292A271D200C6339171A712C2E30491E21,7A;0039262322271E201D210C0748766465776A,150F3829;3435,88;007018111A1617192E15382627201F656477,4F09;00030418111617332E2D2F292A52845407020D302B,090F4520;","528384530003010215392C20,1112180F29560D2E1F7545;004D64547589,0F29;2A0D11180F52848353037039156358332C2E,38200026;00702C2E164C157126271F1E202425363F,29386A032B;005089,032C2E1F;0F00010206030D7129302F79802D7C2B5C4744,11701D20528438;000403110F527079156523221E2027,0129802E1F6B;00384089,15296763;000102060775261F20,71290F7015;1100010206702D804E2B2620,0F52540D;0007397B7C343589,01065220;0776776564,000F293820;00010206111803302F565A802D4E2B881F261E0C,0D0F52;00763989,0F20;110F70528475660D7129,012E1F2026;0001020617385483,030F47202B6B;0039787089,2E1F8A034F206B;0706397B7C794C636A48,520F71294720;02703918110F7919155283756626232227201E,012C2E1F0C;00384089,0F202E157C;5C0001020652835B0E03804B2D4E2B752024210C,292E565A;000103020611187B7C2D4E616439201E0C26,522E4744;000734357B7C3989,0F52832920;88,;0004031811171A5B332C2E155D52,0D292045;0089,090F15;18110F197983842E230C271F1E7A70525463,26202915;00011A1615262322271F1E200C214C,472B0F11;00190F153917701A48,472E1F2003;11037B7C2E2F7129,0F5220;007952151E20,0F2E1F;00384740,0F20;0006522E261F20,0F7129;0F11000170717B,522E1F;007B7C3989,88;076564,0F2920;,88;393589,88;0F03700D33195284835329711563,01260038206B;0F70161715232238838426271F20,7D0352;70504C7889,88;0001030239450D297115332C2E4C,0F54207052843863;110F03706A795215636626271E,0C012F38062C292B;0040395089,88;000103392E54837548,19700F58157A2038;00010203390D3329152C2B751E20,2E1F544753524583;0039343589,88;3F4889,88;000102033911170D3319152E2F0947442627201F,;393489,88;0F0102037039330D5284832971152E1F0C,0026206B;001A1715838444363F261F1E200C2322,0F476B520363;0070784889,0345201F;000102031118396375664819,1D413870208029;0370833F0F6A5215,010D582E1F202C2F5829;00387765504089,0F157C;070039201F0C2789,06030F292F;003926271E20747677642322480C06,2E1F;00073934357B7C89,0F52;073F7765644889,0120;","0F110001702E2F71291F20,06;110001527B7C2E75,0F20;0F11707129,2E1F20;1811002E1F8384,0F20;0F1A0070153871291F20,7A76;3F6589,88;0F1811700001062E2F1F20,7129;18117915384C,5220;07404826271F1E2089,88;0F00010203700D332E2F192971152B52838453631F20,;00037039041A26271F1E202322,0F2F2C335129452E0D3A;0039343589,88;0F0001020370332E2F0D19297115637566302B2C3979,;528384000103451915332C2E631F2720,29716A0D0F70;653989,88;0F00010203528384157033,752971206B452F2B262E;0F000102700D332C2E297115383F631F20,034756;394889,88;528384530370331929272E2B2F631F1D20,0F156B38;1979,3F2F2E45207D;074048261F202322,0F71454F15000180;0F000102030D70332E3919528384532971152B2F201F0C,;0001020339161745514F2C190F1A152E2D2F304979,;3435073989,88;11180F5C000102030D332C2E195329711563261F202322,5284;5283840001032E1570637566302F391F,0F47297120;39701117302F713819297566,004551152C2E201D1F;0001020370528384631575712D2E4E3E581F1E1D,292C2B45262080;0F83843D363F776424,15462F2C5203297115;3F8B657789,0F2029702E7D;11180F0001020339700D29716375662E1F2620,38155680;03111A171538193E3F,0F632C2E70454F200C;110F1A6A702C2E1952838453712F6375,4520150001;5283845300010670802D2C2E4E155B201F1E232221,380F71296A;0F1118000102030D70332E2C192971153953631F0C262720,52846125;000739343589,0320;18110F3900010203700D3329711563752E1F0C201D,38525D;000102031811392E2D19528384543E4463751F20,152F1A290F;00657689,6B0F52;0001020311180F702E1F7952838468332D6749443E46630C1E1D21,292B20;0F1700707129385C363F3D1F1E232226,80412B202F;00398B7989,0F20;0F111800017C5C2C2E7129,5270153820;0F1118795B65170002195D,52382E8A20;0007711F204840,010F291538;000106025B75712904032D302F382B2A0D801E20,2E1F0F0F;0F1118060300017B7C792E39767566261F20,71298051;000739343589,8A20;074889,06520F38;5283845B79037B7C802D2C2E4E302F2B38493D4463664C1F2021,0F0D7129;63767789,522E0006206B;0F00010206181139702E1F686F6A792D2C304E153375664923221D21,52296B0D80;89,;3F8B6589,1F20;0370110F45510D3371290941614C522623222720,;1966583F6589,88;03700F,79192C2E2D715275262322271F201D2179;0F11700001522E71291F20,2B;0F117B7C2C2E71291F20,5203;00343589,88;","00343589,7129565A;00060403702C2E4C154947443D651F,0D29;528384530339332E152C2F58631F20,380D000F29;006589,29704720;0F1118175C000301027039450D29332C2E2F15631F,8A5820;0F161A17452F0D33712C2E2B5443633F,150170208A03;70786289,06802E1F;0F0001020370390D332C1929712E157563548384534C,20248A;5B000102073911522C302F3A678C363F33490D482425200C1E2322,0F15382E1F61;00076A74504089,5229702C7D;0F110001708471292E1F20,0338805156;111817000106702C2E71292A0D33802D302F4E2B44,0F522520;0007343589,290F71;0F5B8370000102060403161A494447,386A418A20;11177B7C52842C2E5B1F20,060071292F0F;003889,52201F1D47;000102062A397129797B7C2E1F2425,162F5D2026;0F172C2E387129363F7566512D4E4461,0103475220;008354,06462F2E1F;0F181117795B5C007054292A0D690403332D2C2E66632B3D,8A454F38;030270170F45513A2C71295283842A0D532D24252623222720,155A382E1F;00076A0F3874485040,06707C25;5B71297000010611182A0D39792C2E332D4E80151F202621,52454F38;00077665776489,52830F208A;34357B7C7789,0F29;0F705B0004037C5D15653F1F26,522B4738;181179190E332C2E2D52637566262322271F20,;0076645089,88;0F1100017B7C702E7129,522B;1A38712975,0F20;0026271E20,2F2E1F;18117001061579,712920;0F11707B7C5271291E20,2E1F;0F00074850,8A20;0F1811705200012E71291F20,38;18117000012C2E7129,5220;88,;0F18110001261F20,0352;037B7C2E2F261F20,0F;006389,88;0F030001027039452971150D332C2F6327,20528384;020F11161A17454F2C2E2D302F2B38434C,20700163;003989,88;0F00010D0302703352838453297115632E,208A454F;03027039450D332C2F2D2971528384636626202322,5815;006A5040077448,702B2C0F2F29;0F00030102700D332E2C192971155383846375261F1E20,;0001020370450D332C2E2D152971,0F52838A201D;343589,88;52838454443D65002C2E15495D1F,0F417D712B3863;528384546315332C2E2F26201F2322,0F0D45002971756B;003889,88;393589,88;2C2E2D2B156343364C,0F4729710D708A20036A19;00788B89,0671292E;11180F000152548471702C2E2D4E303348492A156144474C63,8A201F384506;0F0300017039712952542D2C302F80380D2A363F3349483E616320,1118150C1F2E;0F006A385040740717,1F7063;0F1118000102030D70332C2E192971158384535426201E2322,471F;77766564000789,0F52201E8A;","110001392E1F20,0F7129;00343589,88;0F1152702E2F71291F20,0001;0F1152702E2F71291F20,7A;00385476,521F;0F528400012E7129,0920;363F6526232227201E89,88;0F11700001397129,2E20;0F0001067C1F20,5229;0F705215261E20,012E1F;0F001A651707,565A58202E1F4763;297115030102195283840D332C2E,0F1F5863201D8A;0039077426271F1E20,0F29713852832B63;343589,88;0F03706A4F0D332C528384532E29711563,45007500;0F0370010239332E2C19528384532971156375262720,;003854637519,205D1D1F52151E21;0001020352666A,0F7020262938172F;00261F2322271E200C89,;007083624C,0F38202E7D4F45471F71;0F000102030D332C2E195283845329716375261E2322,;0F033915666A52261E272048,382E2F6329712C01;003989,88;00010203450D3329152C2E2F5375,0F638A6A1D8A38;39006A26201F,0F520D38580629712B;343589,88;528384542E03700F111869565A7566631F1E2021,297138000C;0F1118000102030D70332C2E195283845329711563261F0C20,47457525;00173883546365756619,466115201F701D475224;0F18000102111A1703154F2C2E382D2F807566,7163708A1F207D;5D0007363F232227261E21,037C0F471F20;0F00701A17830E544C5C78,7129632E1F38208A452F;2C2E5B000739337C38802D44484C2425201F1E272621,52297015;0F11185C0370332D152322528384636626271E,2F292C2E1F000106;000F7765,2E1F7C46;111879690001020370396A2E2D528384543E637566,0F380D580F2920;00013974150726271F1E200C,0F06520D297170382B45;34353989,0F20;0F528471295B795D2B155333565A446375661F201E272621,00016B0C41;0F181100010603797B7C802D302F2B6743441F202322,2952477D25;11180F71297000010604032A0D793969302F33802D636675,201F52565A1E;11180F000704030D7C684580302F153867534775,702041;00262322271F1E203F8B65,52290F0380;002C7080305C784C62,2E1F4720;000704036939487C4466,0F70112938;54528384700001020339482D301571565A363F637566,06292B201F8A;005040,522E1F0F2C20;18110001032A0D845B7129302F791533536678,0F208A1F1D;076A7626271F1E20,0D0F29382F2E;7B7C343589,0F70;11180F71297052838454792A0D33802D153853201F1E212627,012F564766;0001067011185B0D332C2E2D712909262322271F200C,0F526325;00195475667689,5229152E20;0004037B7C0F79494766754667,80293869208A;003F657789,7152290F032B;525400045B17791A565D754C7866,2E1F207C;71297C790001062A0F802D,5215705D;0470170F191A134C8384662426232227201E,;00170F7665776489,;074889,88;","0F0001020D700339332C192A83842971152E1F0C20262322,0652563861;1F2027260076232289,0F295283;34357C89,0111180F2920;0F030001022A0D3945297115528384637020,476A382E1F44;5B11180001020328700D332C2E195283847115632F751F2720,290F4766;0F0001021A175D2C19152E302F7183846379,8A20704F754541;0F11180300706A2E1549466319,292F26806B382B207545;00704F0D332C2E2D15363F261F20274C,0F2906036F47;0F11180001027039302971542F7526201E,63472E151F58;390001022C2E302F1575804B2D261F20,0D0F0319707D5229717A;076A79040363660F5D363F,52292E1F20382F155601;006A38075040,0F630141202B454F;0F1118000106287129705B032C2E302F802D4E2B201F,5284583841;002876396577261F20,5283290F;07343589,0652;181100012A0D52842953411E20,2E1F0F4715;0F0001062871292E7C528384032C5C2A15767765,11185D8A206B;0F181138171A7975665B52845415,47701F8A20;0F181100062839707952542C2E302F03565A7566441F1E,0D29802B20;0F280001363F8B4326232220,2E1F47032F7D;0F17000728705448757A,522E1F15562F;00076A74173926271F1E20,0F7029522B;04170F79195D1A637566363F76,01522E8A20;700718111A302F717566,0F2B2E20;11180F000128032A0D7129302C2E2F2D802B09411F1E20,52845438;0076777566262322271F201E,0F11185229;34357C89,8A20;010670170F0E3A294152838454262322271F201E,2E181544;01023918112E2D493E52756624262322271F20,;04033918110F0D2C2E7129332D2B72528384547566,;017018110F1A2E15495247838463462322271F,;0F000106387129,2E1F;0F707500261E20,382E1F;181100012C2E2F1F20,0F52;181170792C2F7129,5220;07504089,0F01;0F0001062E7129,5220;7665261F20,0F29;077C343589,88;0F18117052000171291E20,2E1F;0F181100017B7C2E71291F20,036F;181100015B3875,2E20;0F000102702E15471F1E,294F2B452C2F2680;0F000102700D332C712E15261F201E,80036A614738;0001020370392F80712B546675201E26,1F58472E15;0039076A7426271F2048,0F79197029717A38;04031975363F6366,0F5401202C5283842E2F;3807504089,88;00020370454F0D3933192C2E2D156375261F202322,0F71;003F261F202789,88;343589,88;002627651E20232289,88;0F0D33000103452E528384297115752620,63386F70;0003391983845475,2E1F0F6A702971722A0D;0F00010203703915632719792322,8026204529715875;002E4344793F26271F20,03702C2F292B381A;001A2B5448701938754C,152E202425;0039332C2E2D2F152B4644261F1E,0F7019382971637A;11180370392A0D3329712C2F156375795B5D,450C8A00382E1F2001;5040000738,0F7D7C584F012063452B;","000150402627,0F292F2B;0079110F0304062A528423222627207A19701A2C2E2F5D83,2945;001779332D2322271E2007760304,38290F;0007343589,71297063;0004037039180F332D152952262322271F0C533A83,41178047;0079192E2F030417332D1552847A5D,4E20;001A170F1379232227761926,712938;88,26205283;001A170F5B332E2D7129261E203E5D,15035283;007022230726,2E17712952302F;00077A7089,88;88,;07262723221F40,0F712952;0F000102070D70332C2E19528384297115637526201E2322,;03392D2E332F211D201F1E27,0F7015380029710D1958;343589,88;0F0102700D332C2E2F0319528384531529716345261F2322,;5283845300031929150D332C2E63,0F217045208A7175;006A79190F6F2627,6B4620453829;00211D1E232289,;0F7045332C2E71201F1D21,47011552295303;00704889,88;0F00040370396A742E15444948,458A384F20;5283845303702971150D2F,388A6A6D0F20;0007504089,88;0F00010203700D332C2E1929711552838453637526202322,;393589,88;007C343589,88;0F11180003706A4F0D332C2E192971155363751F20262322,5247464161;528384545363000103332E15,0F1F197029710D757D20;0F006A1938271779,565A4575522F801F1E63;001D23221E2789,52290F2E1F20;0F175B3975660745514F2B4825201E211D,010352292E;007007482089,2E1F5847;0F110039702C2E522F1574487B7C2D4E804B,098A20453861;111852838453546319297115030D332B2C,060F8A2E38201F;0007504089,0F291570;030102062C2E543E3D636679,380D1946297100;0339332C2E302B66201D1F27,0D2971010015520F6B;34357B7C89,7129;0F111800010203700D332C2E192971152F4B49471F270C2322,52562B20;0F111800010203391929710D1552838453,2075708A45630941;00177689,0F52804F25;00396577647969271E2322,52012E1F262061;1707702C2E71291F20,0F52000106111D;0070,0F292C2E791F;0F18110001702C2E7129,6F454F098A20;705283845B0D2F71,0F202E41;0007504089,060F71702F29;0F5C5B0001032A0D7052842C2E71291F20,1118517D46;07762623221F1E20,000F1552296B2F;89,6B;181100012A0D2C2E2F2B2D304E447129841F,0F0941613820;03020E0F18110D332C2E2D2F4971293E615244756653,8A2025;000F76,032E1F522C292B;0028397976771E232227,0F522E474420;7039170F45513A2C2E7129242526271F201D,0001035215;0001027007834878,2E388A201D;703911170E2C2E2D2F4B15712952633D,092B8A20;03047039171A533852443D363F,;","111879076A1A171523221E272024,5229700F1D012E292B0C2F;390050404C89,0F5283296920;261F1E20232289,52290058363F;0F0001020370332C2E2F1575261F,2971476A45835238;0007343589,0F292F7020;00021719792B155D5466774962,010611180F2920;0F1118528384530001035C702971152B332C2E63201F1E23222621,6B75452D4F80;00177179546A76,0F52443D1F;0001020603700F7B7C2E1F692D48302F565A586366240C21,2B151A2920;0F1A1716007015713F261F2720,5263587D2B4703;005C702C2F802B154C78,5A562E1F208A454663;00037039454F0D332971152C4C48,090F476341382E;11185283847975661271393D692D15565A201E262322,292F060D0C;004089,0F52;767789,5283002920;0F111800010206032A0D097170292D302F1575761320,521F4725;000739343589,520F;181179838454637566,0F52290120;5C0F1811790070528471291F20,2F03805125;003854767789,2E1F5220;0F18110001707B7C0D7129,52565A152B20;170007386A7448363F261F1E,030F79636F20;11180F000102587B7C5283847971302F804B2B497675,09612E1F20;705C4C39171A4F0E7971295B5248,0F2E1F1D;076A171552847983546578,712970010F;004C504089,0F521547;7665262322271F201E21,0F00298071;00010206090D5B7952838454685D7B7C443D77656366201F1E,030F47454F;343589,88;790F181113332C2E2D302F1554,70012038;00040301067018111A0F332C15292A261E200C7A7919712F5D52838454,5617454F;003826232277,632E2052;000106073018110F3329271E0C7A0D75,38262015;0F005B261F20,2E2F;384C,8A20;076A696819,0F29;036F791E20,522E1F;00654C89,;262322271F1E20,7129;0F18117000012E71291F20,527A;0039343589,;1811795B5466,0120;0F1811705200012E71291F20,062B;003F89,88;000102035270392E2D5863,0F381D2B29212015;00391A6A15384C4943363F7448,0F0379472B63;00701A17794C0F302F715475,2E454F8A2024;000102037039714515750D33,201D381F092E0F11;5283845479036A2627201E,0F380D70297115012F;4C4089,88;261F201E232289,;002627241F1E20232289,;0039343589,88;0F0211195465756679,2F384570202B6A;0F0052037029710D332C15,7545584F8A201D21;0F003854,20521D21;0F0001020370390D1952838453542971631F0C,1520;0F0001022E154826271F1E203874362322,0363;0001020370392F2971152B54754C,458A1F0F2046;000370396A450D332F4B154C,0F208A7D41381F2E;","00790F072C2E0103047018111A262322271E7A302F5448637545,29381556;6A79363F65,0F292B71;000118111A332C2E2D1571292A23222627200C7A791970302F5D5283845456,387C454F;000118111A332C2E2D1571292A2627200C7A1979,387C;00040318110F1519262322271E2021,52831F38;0039343589,88;00390103040618111A17332C2E262322271E157A7071302F45631F2075,807C;000118111A16175B154C26271E200C232279302F5D528384547543,0F297C7A;074889,88;88,;010670181126271F202165,2938;000770171989,0F2E2038;000106040318111A170F33292A26276A201D0C7A71077C1F1E74694F,52;88,;5283845354037029711575262720,631F58000F2E3801;0F0001020370390D3319297115632E2C752620212322,;0339332C2E1575201E26,0F520D631F29712A724738;343589,88;0F00030D70332C2E3952838453542971156375,6B20;00010203396A79637566201D211E,29387D71707A;00076527262322,1552835A201D0F38;3989,;1500443626271F1E,29710F47380D195203;000789,;0F0370390D332C192E2971637547202322,5815;031A2B7915656A,0F177001204529710D632E2F;0F03700D332C2E2971152F52838463,01004547380C;0F000102030D7033528384534529711520,634758;006A6F391974,0F2E614447702C292F71201F3852;34357B7C89,0F20;11180F00010E715229702E79692C2D2B15093954444C66,2F565A8061;000102033945332C6375201D21,0F1929710D70;07487677393F89,0F2952151F1D;0F17000102060370392E52838453331F,452F2C266A79292B2038;161A0F1526271F4C,5861034738;3950177089,522E1F0F20;11180F0001020370391952845329712B632E7B7C792D2C8020,385D15;00046A7966444C7765,010C202F38520F70292E;70545283842E71291A7933192A5D5A5040,090C384F45208A1D6B;0F11180006032A0D70332E011954838471152C202322,58477D63;0F111800037039450D2971332C632026,1F2E2B385283;003934357B7C89,0F20;00481F2023221E27262189,0F292C2E;18117900012C2E5B1F20,0F710D5229;000776776548,0F1118152E1F20;5254700001020612692D4E584647336375662E1F1E,71290D2620;006A583F232227261F20,0F29154703;00077089,522E1F8A20;0F5C707971292C2E0E032A0D6A804B2D8C2B3348634C,521109154620;04795B3F651A5D,0F52010620;117154528384292C2E302D4E092A0D50407970443D,56804100;18115452840001712970802D2C2E302F2B2A0D78791F,0F20475861;0F1811000104037115454F7677657B7C392023222726210C,52092E1F;34350089,0F20;0F111800171A454F514E3A3871157765443D23221E262720,80612E1F;111800010206037939695483845D2D2E4E446375661F262120,0F52290D71;767779392623222789,152B1F1D20;000102060717706A33392D2E4E674447482322271E210C,71292B4F20;0F171511793F76584C,0347200C1D;000789,88;"]),s(f,"hourTaboo",["0F520120,6D61;0F7083520115000255,80262F;707A000855,0102;0100380806,707A2E2C;0F8352150255,70717A7D01002C0306;0F707A0120002C0855,88;,88;0F71832952202C,7A7D0102;0F70835201150255,2E2C;0F295220380255,707A01000306;0F83295201200255,70717A7D2C;0F707A0120002C0855,80262F;707A000855,0102;0F708352150255,2E01002C0806;0F522055,707A01000306;0F700120002C380855,;0F835201150255,70717A7D802C262F;0F70718329527A202C55,0102;,88;0F702952200255,7A7D01000306;0F7083527A01150255,;0F70012000380255,80262F;000855,70717A7D012C02;0F7071527A2055,2E2C;0F522055,707A01000306;0F7001200255,;0F7071297A0115202C55,80262F;0F71832952002C380806,707A0102;0F70835201150255,7A2E2C;0F200255,707A01000306;,88;0F700120002C0855,7A7D80262F;0F7083527A1555,0102;0100380806,2E2C;0F20190255,70717A7D01002C0306;0F707A0120002C0855,88;0F520120,707A6D80262F61;0F7083521555,0102;0F7071297A0115200255,2E2C;0F2952200255,707A01000306;0F835201150255,70717A7D2C;0F7001200255,80262F;,88;,7A2E7D2C;0F712915202C55,707A01000306;0F7029018020002C38,;0F835201150255,70717A7D802C262F;0F70718329527A202C55,0102;0F71832952012002,2E6D2C61;0F7029527A200255,01000806;0F71290115202C,707A55;01002C380806,707A80262F;0F8352150055,70717A7D012C02;0F715220,707A2E2C55;,88;0F7001200255,7A7D;0F835201150255,707A80262F;0F7183295220002C380806,707A010255;0F718329522002,707A2E2C55;0F2952200255,707A01000306","0F700120000255,;0F70290120000855,6D61;0F707129527A15802C381955,01000806;0F7101200019020655,707A2C;0F200855,707A2E01002C0306;0F7183520115802C0255,707A;0F700120000255,;,88;0F70297A01202C380955,;0F8352150255,707A01002C0306;0F0120000855,707A2E2C;0F7071297A01158020002C0855,;0F7083520115000255,;0F70717A01201955,6D61;0F7071295215802C3855,01000806;0F0120000206,707A2C;0F290120000855,707A2E2C;0F7083527A0115202C0255,;0100380806,2E2C;,88;0F707129527A011580202C380255,;0F7083520115000255,;0F71202C1955,707A;0F707129527A1556802C1955,;0F202C4B,707A01000306;0F71201955,707A6D61;0F70202C55,01000806;0F0120000206,707A2C;0F7101201955,707A2E2C;0F7129521556802C0255,707A01000306;01002C380806,;,88;0F7129527A0115802C380255,;0F83520115000255,707A2C;0F202C0855,707A01000306;0F7129521556802C1955,707A;0F700120002C0855,;202C,6D61;0F71295215802C3802,01000806;0F2002,707A01002C0306;0F29012002,707A2E2C;0F708329527A0115202C0255,;01002C380806,;,88;0F71295215802C380855,707A01000306;0F83520115000255,707A;0F0120000855,707A2E2C;0F707129527A1556802C1955,;0F7083520115000255,;,707A01000306;0F707129527A15802C3855,01000806;0F290120000855,707A2C;0F71201955,707A2E2C;0F7183520115802C02,707A55;0F202C0855,707A01000306;,88;0F0120002C086C,707A55;0F83520115000255,707A2C;0F2901202C3809,707A55;0F7129521556802C196C,707A0100030655","0F70297A0120000855,80262F;0F832952202C,0102;0F71832952012002,7A2E7D2C;0F712915202C55,707A01000306;0F718329520120002C380802066C,707A;707A01000855,80262F;0F7083527A1555,0102;0F7001200255,2E2C;,88;0F7071297A15202C55,01000806;0F7083527A0115000255,80262F;0F83521555,70717A7D012C02;0F70718329527A200255,2E01002C0806;0F52,0120002C080306;0F7183295201202C02,7A7D;0F708352150255,01800026082F06;0F7071297A20002C38080655,0102;0F0120000855,707A2E2C;0F708352150255,0120002C080306;0F832952202C02,01000806;,88;0F7071297A15202C55,0102;0F708352011500380255,2E2C;0F202C4B,01000806;0F71832952202C0255,707A;0F7083527A01150255,80262F;0F71832952202C,7A7D016D02;0F712915202C,01800026082F06;0F71292055,707A01000306;,707A01000806;0F7083527A0115000255,80262F;0F71832952202C,0102;,88;0F712915202C,707A01000306;0F835201150255,707A;0F70835201150255,80262F;0F70717A201955,0102;0F7001200255,2E2C;,707A01000306;0F7071297A15202C55,01000806;0F70297A012000380855,80262F;0F2920,70717A7D016D2C02;0F708352150255,2E01002C0806;,707A01000306;,88;0F7083527A01150255,2E2C;0F8352150038,707A010255;0F83520115000255,70717A7D2C;,707A01000306;0F5220,01000806;0F70297A0120000855,80262F;0F712915202C,016D000806;0F70718329527A01200038080206,2E2C;0F832952202C02,707A01000306;0F835201150255,707A;0F7083527A01150255,80262F;,88;0F7071297A011520002C55,;0F708352150255,01000806;0F8352150255,70717A7D01002C0806","0F71832952202C02,707A;0F7029527A0120000255,;0F7071527A202C55,88;0F71295215802C3802,707A01000306;55,707A01000806;0F292055,707A2E2C;0F708329527A202C0255,01000806;0F708352150255,01000806;0F202C0855,707A01000306;,88;0F8329520115200255,707A2C;0F7083527A01150255,;0F7129521556802C1955,707A;2C3808,707A01000306;70297A0120002C0855,88;29202C,6D61;0F708329527A202C0255,01000806;0F71522055,707A2E01002C0806;0F7129521556802C0855,707A01000306;0F7083520115000255,;0F71290120002C080206,88;,88;0F0120004B,707A2C;0F8352150255,707A2E01002C0306;71295201155680002C0855,707A;0F70290120002C06,;0F832952202C0255,01000806;71295215802C38,01000806;0F7071832952202C0255,01000806;0F70718329520120002C080255,;0F70718329527A202C0255,;0F7083527A01150255,;0F70717A01200008190655,88;,88;0F8329520115200255,707A2C;0F708329527A0115202C0255,;0F707129527A011556802C026C,;2C38,01000806;0F202C0855,707A01000306;0F70712952011580202C380255,;0F718329522002,707A01002C0806;0F295201200255,707A2E2C;0F707129527A011556802C026C,;0F8352150255,707A01000306;0F70297A01202C0255,88;,88;0F8352150255,707A01002C0806;0F8352150255,707A2E01002C0806;0F712952155680202C0255,707A01000306;0F7029012000080255,;0F70718329527A202C0255,88;0F707129527A0180202C0255,;,707A01000806;0F832952202C02,707A01000306;707129527A01155680002C0855,;0F70832952011520002C0255,;0F832952202C02,01000806;,88;0F8352150255,707A01002C0306;0F83520115000255,707A2E2C","0F83521555,70717A7D016D2C02;,2E2C;0F5220,707A01000306;0F0120000206,707A;0F835201150255,707A80262F;0F70717A202C381955,01000806;0F0120000206,70717A7D2C;0F7129202C1955,707A01000306;0F7083527A0115000255,;0F7083520115000255,80262F;,88;0F70717A0120003808190655,2E2C;0F8352150255,707A01000306;,2E2C;0F7083527A01150255,80262F;0F70200006,7A7D016D02;0F7071297A01152055,2E6D2C41;2C38,01000806;0F290120000855,70717A7D2C;0F70835201150255,80262F;0F702920002C,0102;0F0120004B,2E2C;,88;0F70717A0120002C3808190655,;0F7083520115000255,80262F;,0102;0F7071527A01200655,2E2C;0F702002,7A7D01000306;0F7129011520002C,6D41;0F70835215380255,01800026082F06;0F200006,70717A7D016D2C02;,2E2C;0F83521502,707A0100030655;0F7083520115000255,7A7D;,88;0F70717A20002C3808190655,016D02;0F835201150255,70717A7D2C;0F7129202C1955,707A01000306;0F520120006C,707A55;0F7083520115000255,7A7D80262F;0F712915202C,707A016D02;0F70717A20381955,2E01002C0806;0F29202C02,707A01000306;0F83295201202C02,707A;0F70835201150255,80262F;0F7083521555,7A7D016D02;,88;0F71202C38081955,707A01000306;0F83520115000255,70717A7D2C;0F70835201150255,80262F;0F70527A2055,016D02;0F0120000206,707A2E2C;0F712915202C,707A016D00034106;2C38,707A01000806;0F83520115000255,70717A7D802C262F;0F832952202C,0102;0F7083527A01150255,2E2C;0F708352150255,7A7D01000306;,88;01002C380806,80262F","0F8329520102,707A202C03;0F7183520115802C0255,707A;0F29522055,707A01000306;0F70718329527A01202C0255,88;0F707129527A15803855,202C03;0F71832952200255,707A2C03;0F71832952012002,707A2E2C;0F7129521556802C0855,707A01000306;0F700120000255,;0F70010255,202C03;0F707129520115800038,202C03;,88;0F29522055,707A2E01002C0306;0F707183527A0115802C0255,;0F70297A55,202C03;0F7071297A0255,202C03;0F718329520120002C080206,;0F29200855,707A01000306;55,707A2E01002C0806;0F7071295201155680000855,202C03;0F01004B,202C03;0F835201150255,707A;0F7129521580202C3855,707A01000306;,88;0F70297A55,202C03;0F707183520115800255,202C03;0F7183295201002C38080206,;0F29200855,707A01000306;0F70297A202C02,01000806;0F70297A01000855,202C03;0F712920,707A2E01002C080306;0F7129521556802C55,707A;0F8352150255,707A01000306;0F8352011502,707A55;0F29526C,707A202C0355;,88;0F718329522002,707A2E2C;0F71835215802C0255,707A01000306;0F70202C55,01000806;0F707A01000855,202C03;0F707129520115800038,202C03;0F290180202C380955,707A6D61;0F7029527A2055,01000806;0F707129527A1556802C0255,;0F71520106,707A202C03;0F70835201150255,202C03;0F718329520120002C080206,;,88;0F200255,707A2E01002C0806;0F70718352011580000255,202C03;0F715201066C,707A202C03;0F290180202C380955,707A;0F71295215802C3855,707A01000306;0F70717A20190255,016D00086106;0F712952,0120002C080306;0F70718329527A0255,202C03;0F7183295201002C38080206,707A;0F8352150255,707A01000306;0F70202C55,01000806;,88",",88;0F832952200255,70717A7D01002C0306;0F70835201150255,88;0F7083527A01150255,2E2C;0F70202C55,7A7D0102;0F7029527A012055,2E2C;0F2920380855,707A01000306;0F83520115000255,70717A7D2C;0F7083527A01150255,80262F;0F52202C,016D02;0F70835201150255,7A2E7D2C;0F71832952202C0255,707A01000306;,88;0F835201150255,70717A7D802C262F;0F712952202C,0102;0F70527A012055,2E2C;700855,7A7D01000306;0F7071297A011520002C55,;0F8352011500380255,707A80262F;0F7083521555,010002;0F71290120,707A2E2C;0F71832952202C02,707A0100030655;0F7083527A01150255,;0F7001200255,2E2C;,88;0F707A01200255,2E2C;0F83521502,707A0100030655;0F0120002C086C,707A55;0F7083527A01150255,80262F;0F712915202C,016D02;0F2901203809,707A2E2C;0F708352150255,01000806;0F7183295201202C02,88;0F7083527A01150255,80262F;0F7083527A1555,0102;0F7071297A01152055,2E2C;,88;0F707A01200255,;0F70835201150255,80262F;0F52202C,016D02;0F71522055,707A2E2C;0F712915202C02,707A01000306;0F718329520120002C3802,6D41;0F7083527A150255,01800026082F06;0F71832952202C,0102;0F70527A012055,2E2C;0855,707A01000306;707A01000855,;,88;0F522055,70717A7D012C02;0F835201150255,707A2E2C;0F71832952202C02,707A01000306;0F707183295201202C0255,7A7D;0F7083527A01150255,80262F;0F71832952002C380806,016D0241;0F70200255,2E01002C0806;0855,707A01000306;0F700120002C0855,;0F70835201150255,7A7D80262F;0F712915202C,016D02","0F290120002C0855,707A;,88;0F7071295201155680002C0206,;0F70832952011520002C0255,;0F70297A01202C0255,88;0F70712901158020002C380855,;0F8352150255,707A01000306;0F71201955,707A2E6D2C61;0F70297A0120002C0206,;0F710120002C3808190655,707A;0F290120002C0855,707A;0F71835215802C380255,707A01000306;,707A2E2C;,88;0F7071295201155680002C0855,;0F7083520115000255,;0F7120081955,707A01000306;0F7071295201158020002C380206,;0F0120004B,707A2C;0F71201955,707A;0F707129521556802C55,01000806;2C3808,707A0100030655;0F71201955,707A;0F70832952011520002C0255,;0F01200255,707A2C;,88;0F7129521556802C0855,707A01000306;0F70290120002C,;0F2901202C,88;0F71295201158020002C380206,707A;0F01200255,707A2C;0F71201955,707A2E016D002C036106;0F7129521556802C02,01000806;0F8329520120002C02,;0F70297A01202C0255,88;0F7083520115000255,;0F202C0855,707A01000306;,88;0F7071297A0120002C19020655,;0F83520115000255,707A;0F70297A01202C0255,88;0F71295215802C3802,707A01000306;0F835201150255,707A2C;0F71201955,707A2E2C;0F70712952155680202C0255,01000806;0F70290120000855,;0F202C0855,707A01000306;0F70718352011580002C380255,;0F7129202C1955,707A;,88;0F707129520115568020002C0255,;0F8352150255,707A01000306;0F70717A201955,2E2C;0F70290120002C0206,;0F01200255,707A2C;0F290120000855,707A2E6D2C61;0F707129521556802C55,01000806;01002C380806,;0F71201955,707A;0F718352011580002C380255,707A","0F708352150255,01000806;0F707A010255,202C03;,88;2920002C0806,0102;0F7083527A01150255,2E2C;0F200255,707A01000306;0F7029527A0155,202C03;0F7083527A011500380255,80262F;0F83295220,70717A7D016D2C02;0F70717A201955,2E01002C0806;0F70527A2055,01000806;707A55,0120002C080306;0F70835201150255,80262F;002C380806,707A010255;,88;0F2002,707A0100030655;0F7029527A010255,202C03;0F0120002C4B02,80262F;0F7071297A15202C55,0102;0F70717A0120003808190655,2E2C;0F8329522002,70717A7D01002C0806;707A55,0120002C080306;0F7083527A01150255,80262F;29202C,7A7D016D02;0F7083520115000255,2E2C;0F71202C38081955,707A01000306;,88;0F70835201150255,80262F;0F7083521555,0102;0F7083527A01150255,2E2C;0F7071297A15202C55,01000806;0F700255,0120002C080306;0F835201150255,70717A7D6D802C262F61;,016D0002;0F70297A0120000855,2E2C;0F70200255,7A7D01000306;0F708329527A01150255,202C03;0F7083527A011500380255,80262F;,88;0F70717A201955,2E2C;0F708352150255,01000806;0F708352150255,0120002C080306;0F7083527A01150255,80262F;0F70717A2000381955,0102;0F290120000855,70717A7D2C;0F70202C55,01000806;0F70527A0155,202C03;0F70835201150255,7A7D80262F;0F7083521555,0102;0F70717A0120003808190655,2E2C;,88;0F7055,0120002C080306;0F70835201150255,80262F;0F7083521555,7A7D016D02;0F70297A0120000855,2E2C;0F71202C38081955,707A01000306;0F29522055,70717A7D2C03;0F708352150255,01800026082F06;0F522055,707A0102;0F71201955,707A2E2C","71295215802C380855,707A01000306;0F835201150255,707A2C;0F832952011520000255,707A2E2C;,88;0F708352150255,01000806;0F8352150255,707A01000306;0F70718329527A202C0255,;0F292055,707A2C;0F83295201200255,707A2E2C;0F707129527A011556802C55,6D41;707A55,01000806;,707A55;0F70297A0120002C0855,;0F7083520115000255,;,707A2E01002C0806;,88;0F718329520120002C080206,;0F835201150255,707A;0F83295201202C02,707A55;,707A55;0855,707A2E01002C0306;0F707129527A1556802C55,6D41;0F7029202C55,01000806;0F700120002C0855,88;0F707129527A15802C3855,01000806;0F708352150255,01000806;0F71832952012002,707A2E2C;,88;0F7083520115000255,;0F835201150255,707A;71295215802C380855,707A01000306;,707A2C;0F0120000855,707A2E2C;0F7029012000080255,6D41;0F707152202C,01000806;0F71832952202C02,01000806;0F70718329527A01202C0255,;0F708329527A0115202C0255,;0F8329520120000255,707A2E2C;,88;0F8352150255,707A01000306;0F70835201150255,88;0F707A0120002C0855,;0F700120002C080255,;,707A2E01002C0806;0F71832952202C02,01000806;0F718329522C3802,01000806;0F2952202C55,707A;0F707129527A0115802C380255,;0F2901802000,707A2C;0855,707A2E01002C0306;,88;0F70832952011520002C0255,;0F7083520115000255,;0F707129527A15802C380255,01000806;0F718329522002,707A01002C0806;0F7183295201200002,707A2E2C;0F702901202C0255,6D41;2C38,01000806;0F7071297A2055,88","0F7071201955,7A7D;0F71290115202C,707A80262F;0F70835215003855,016D02;0F835201150255,70717A7D2C;,88;0F520120,707A55;0F835201150255,707A80262F;0F71291520002C,016D02;0100380806,707A2E2C55;0F71201955,707A01000306;0F71295201202C,6D61;0F5220,01800026082F06;0F7071201955,7A7D016D02;0F7129011520,707A2E2C;2C3808,707A01000306;0F0120004B,70717A7D2C;,88;0F5220,016D02;0F70835201150255,7A2E7D2C;0F712915202C,707A01000306;0F70717A0120002C3808190655,;0F7083527A01150255,80262F;0F70200006,016D0261;0F5220,2E01002C0806;0F71201955,707A01000306;0F7129011520002C,707A;0F708352011500380255,80262F;0F83521555,70717A7D016D2C02;,88;0F5220,707A01000306;0F70835201150255,7A7D;0F835201150255,707A80262F;002C380806,016D02;0F201955,70717A7D2C;0F2002,707A016D00036106;0F5220,01000806;0F835201150255,707A80262F;0F71291520002C,016D02;0F708352011500380255,2E2C;0F8352150255,70717A7D01002C0306;,88;0F7083527A01150255,80262F;0F7083527A1555,016D02;0F7129011520,707A2E2C;2C3808,707A01000306;0F71201955,707A;0F7083520115000255,80262F;0F5220,016D0002;0F7071201955,7A2E7D2C;0F712915202C,707A01000306;0F7083527A011500380255,;0F835201150255,70717A7D802C262F;,88;0F7071520120002C06,;0F29202C55,707A01000306;0F7129011520002C,707A;0F8352011500380255,707A80262F;0F71201955,707A0102;0F700120000206,6D61;0F5220,01000806","0F7183295201202C02,707A55;0F7029527A0120002C0255,;0F83520115000255,707A2C03;0F83520115000255,707A2E2C;0F7129521556802C1955,707A01000306;,88;0F7129202C196C,707A55;0F7183520115803802,707A202C0355;0F29522055,707A2C;0F71832952200255,707A2E01002C0306;0F718329520120002C080206,;0F290120000855,707A;0F700255,0120002C080306;707129527A011580002C380855,;0F204B,707A01002C0306;0F835201150255,707A;0F7071297A202C1955,;,88;0F707A01200255,88;0F71835215802C380255,707A01000306;0F7183295201202C02,;0F290120000855,707A2E2C;0F7071295201155680000855,202C03;01000855,707A;0F70717A201955,01000806;0F7129520115802C3855,707A;0F8329520115200255,707A2C;0F835201150255,707A2E2C03;0F707129527A1580202C55,;,88;0F70718329527A202C0255,88;0F70718352011580002C380255,;0F01200255,707A2C03;01000855,707A2E2C;0F7129521556802C1955,707A01000306;01002C380806,707A6D41;0F7071297A202C1955,01000806;0F707129527A15803855,202C03;0F01200255,707A2C;0F8352150255,707A01000306;0F71832952202C02,;,88;0F707A010255,202C03;707129527A011580002C380855,;0F29202C3809,707A01000306;0F71201955,707A;0F7071297A202C1955,;0100380806,6D202C0341;0F7029527A2055,01000806;0F71295215802C3855,707A01000306;0F835201150255,707A2C;0F832952011520000255,707A2E2C;0F7071295201155680000855,202C03;,88;0F29202C380955,707A01000306;0F7183520115802C380255,707A;29202C,707A;0F71292055,707A2E2C03;0F707129527A1556802C55,;0F71832952202C02,707A016D00034106"]);let X0=f;const C0=class C0 extends h{constructor(t){super(C0.NAMES,t)}static fromIndex(t){return new C0(C0.numeric(t,"ten index"))}static fromName(t){return new C0(t)}next(t){return C0.fromIndex(this.nextIndex(t))}};s(C0,"NAMES",["甲子","甲戌","甲申","甲午","甲辰","甲寅"]);let v2=C0;const a0=class a0 extends h{constructor(t){super(a0.NAMES,t)}static fromIndex(t){return new a0(a0.numeric(t,"terrain index"))}static fromName(t){return new a0(t)}next(t){return a0.fromIndex(this.nextIndex(t))}};s(a0,"NAMES",["长生","沐浴","冠带","临官","帝旺","衰","病","死","墓","绝","胎","养"]);let T2=a0;const E0=class E0 extends h{constructor(t){super(E0.NAMES,t)}static fromIndex(t){return new E0(E0.numeric(t,"twenty index"))}static fromName(t){return new E0(t)}next(t){return E0.fromIndex(this.nextIndex(t))}getSixty(){return w2.fromIndex(~~(this.index/3))}};s(E0,"NAMES",["一运","二运","三运","四运","五运","六运","七运","八运","九运"]);let H2=E0;const o0=class o0 extends h{constructor(t){super(o0.NAMES,t)}static fromIndex(t){return new o0(o0.numeric(t,"zodiac index"))}static fromName(t){return new o0(t)}next(t){return o0.fromIndex(this.nextIndex(t))}getEarthBranch(){return Y.fromIndex(this.index)}};s(o0,"NAMES",["鼠","牛","虎","兔","龙","蛇","马","羊","猴","鸡","狗","猪"]);let V2=o0;const $=class $ extends h{constructor(t){super($.NAMES,t)}static fromIndex(t){return new $($.numeric(t,"earth branch index"))}static fromName(t){return new $(t)}next(t){return $.fromIndex(this.nextIndex(t))}getElement(){return O.fromIndex([4,2,0,0,2,1,1,2,3,3,2,4][this.index])}getYinYang(){return this.index%2===0?1:0}getHideHeavenStemMain(){return k.fromIndex([9,5,0,1,4,2,3,5,6,7,4,8][this.index])}getHideHeavenStemMiddle(){const t=[-1,9,2,-1,1,6,5,3,8,-1,7,0][this.index];return t===-1?null:k.fromIndex(t)}getHideHeavenStemResidual(){const t=[-1,7,4,-1,9,4,-1,1,4,-1,3,-1][this.index];return t===-1?null:k.fromIndex(t)}getHideHeavenStems(){const t=[];t.push(new E2(this.getHideHeavenStemMain(),2));let e=this.getHideHeavenStemMiddle();return e&&t.push(new E2(e,1)),e=this.getHideHeavenStemResidual(),e&&t.push(new E2(e,0)),t}getZodiac(){return V2.fromIndex(this.index)}getDirection(){return S.fromIndex([0,4,2,2,4,8,8,4,6,6,4,0][this.index])}getOpposite(){return this.next(6)}getOminous(){return S.fromIndex([8,2,0,6][this.index%4])}getPengZuEarthBranch(){return d2.fromIndex(this.index)}getCombine(){return $.fromIndex(1-this.index)}getHarm(){return $.fromIndex(19-this.index)}combine(t){return this.getCombine().equals(t)?O.fromIndex([2,2,0,1,3,4,2,2,4,3,1,0][this.index]):null}};s($,"NAMES",["子","丑","寅","卯","辰","巳","午","未","申","酉","戌","亥"]);let Y=$;const A0=class A0 extends h{constructor(t){super(A0.NAMES,t)}static fromIndex(t){return new A0(A0.numeric(t,"heaven stem index"))}static fromName(t){return new A0(t)}next(t){return A0.fromIndex(this.nextIndex(t))}getElement(){return O.fromIndex(~~(this.index/2))}getYinYang(){return this.index%2===0?1:0}getTenStar(t){const e=t.getIndex();let u=e-this.index;return this.index%2!==0&&e%2===0&&(u+=2),$2.fromIndex(u)}getDirection(){return this.getElement().getDirection()}getJoyDirection(){return S.fromIndex([7,5,1,8,3][this.index%5])}getYangDirection(){return S.fromIndex([1,1,6,5,7,0,8,7,2,3][this.index])}getYinDirection(){return S.fromIndex([7,0,5,6,1,1,7,8,3,2][this.index])}getWealthDirection(){return S.fromIndex([7,1,0,2,8][~~(this.index/2)])}getMascotDirection(){return S.fromIndex([3,3,2,2,0,8,1,1,5,6][this.index])}getPengZuHeavenStem(){return B2.fromIndex(this.index)}getTerrain(t){const e=t.getIndex();return T2.fromIndex([1,6,10,9,10,9,7,0,4,3][this.index]+(this.getYinYang()==1?e:-e))}getCombine(){return this.next(5)}combine(t){return this.getCombine().equals(t)?O.fromIndex(this.index+2):null}};s(A0,"NAMES",["甲","乙","丙","丁","戊","己","庚","辛","壬","癸"]);let k=A0;class E2 extends q0{constructor(e,u){super();s(this,"heavenStem");s(this,"type");typeof e=="number"?this.heavenStem=k.fromIndex(e):typeof e=="string"?this.heavenStem=k.fromName(e):this.heavenStem=e,this.type=u}getName(){return this.heavenStem.getName()}getHeavenStem(){return this.heavenStem}getType(){return this.type}}class R1 extends e2{constructor(t,e){super(t,e)}getHideHeavenStem(){return this.culture}getName(){const t=this.getHideHeavenStem().getHeavenStem();return t.getName()+t.getElement().getName()}toString(){return`${this.getName()}第${this.getDayIndex()+1}天`}}const j0=class j0 extends h{constructor(t){super(j0.NAMES,t)}static fromIndex(t){return new j0(j0.numeric(t,"peng zu heaven stem index"))}static fromName(t){return new j0(t)}next(t){return j0.fromIndex(this.nextIndex(t))}};s(j0,"NAMES",["甲不开仓财物耗散","乙不栽植千株不长","丙不修灶必见灾殃","丁不剃头头必生疮","戊不受田田主不祥","己不破券二比并亡","庚不经络织机虚张","辛不合酱主人不尝","壬不泱水更难提防","癸不词讼理弱敌强"]);let B2=j0;const D0=class D0 extends h{constructor(t){super(D0.NAMES,t)}static fromIndex(t){return new D0(D0.numeric(t,"peng zu earth branch index"))}static fromName(t){return new D0(t)}next(t){return D0.fromIndex(this.nextIndex(t))}};s(D0,"NAMES",["子不问卜自惹祸殃","丑不冠带主不还乡","寅不祭祀神鬼不尝","卯不穿井水泉不香","辰不哭泣必主重丧","巳不远行财物伏藏","午不苫盖屋主更张","未不服药毒气入肠","申不安床鬼祟入房","酉不会客醉坐颠狂","戌不吃犬作怪上床","亥不嫁娶不利新郎"]);let d2=D0;class r1 extends q0{constructor(e){super();s(this,"pengZuHeavenStem");s(this,"pengZuEarthBranch");this.pengZuHeavenStem=B2.fromIndex(e.getHeavenStem().getIndex()),this.pengZuEarthBranch=d2.fromIndex(e.getEarthBranch().getIndex())}static fromSixtyCycle(e){return new r1(e)}getName(){return`${this.pengZuHeavenStem.getName()} ${this.pengZuEarthBranch.getName()}`}getPengZuHeavenStem(){return this.pengZuHeavenStem}getPengZuEarthBranch(){return this.pengZuEarthBranch}}const c0=class c0 extends h{constructor(t){super(c0.NAMES,t)}static fromIndex(t){return new c0(c0.numeric(t,"ten star index"))}static fromName(t){return new c0(t)}next(t){return c0.fromIndex(this.nextIndex(t))}};s(c0,"NAMES",["比肩","劫财","食神","伤官","偏财","正财","七杀","正官","偏印","正印"]);let $2=c0;const h0=class h0 extends h{constructor(t){super(h0.NAMES,t)}static fromIndex(t){return new h0(h0.numeric(t,"six star index"))}static fromName(t){return new h0(t)}next(t){return h0.fromIndex(this.nextIndex(t))}};s(h0,"NAMES",["先胜","友引","先负","佛灭","大安","赤口"]);let L2=h0;const g0=class g0 extends h{constructor(t){super(g0.NAMES,t)}static fromIndex(t){return new g0(g0.numeric(t,"minor ren index"))}static fromName(t){return new g0(t)}next(t){return g0.fromIndex(this.nextIndex(t))}getLuck(){return U0.fromIndex(this.index%2)}getElement(){return O.fromIndex([0,4,1,3,0,2][this.index])}};s(g0,"NAMES",["大安","留连","速喜","赤口","小吉","空亡"]);let q2=g0;const B0=class B0 extends h{constructor(t){super(B0.NAMES,t)}static fromIndex(t){return new B0(B0.numeric(t,"sixty cycle index"))}static fromName(t){return new B0(t)}next(t){return B0.fromIndex(this.nextIndex(t))}getHeavenStem(){return k.fromIndex(this.index%k.NAMES.length)}getEarthBranch(){return Y.fromIndex(this.index%Y.NAMES.length)}getSound(){return Y2.fromIndex(~~(this.index/2))}getPengZu(){return r1.fromSixtyCycle(this)}getTen(){return v2.fromIndex(~~((this.getHeavenStem().getIndex()-this.getEarthBranch().getIndex())/2))}getExtraEarthBranches(){const t=[];return t[0]=Y.fromIndex(10+this.getEarthBranch().getIndex()-this.getHeavenStem().getIndex()),t[1]=t[0].next(1),t}};s(B0,"NAMES",["甲子","乙丑","丙寅","丁卯","戊辰","己巳","庚午","辛未","壬申","癸酉","甲戌","乙亥","丙子","丁丑","戊寅","己卯","庚辰","辛巳","壬午","癸未","甲申","乙酉","丙戌","丁亥","戊子","己丑","庚寅","辛卯","壬辰","癸巳","甲午","乙未","丙申","丁酉","戊戌","己亥","庚子","辛丑","壬寅","癸卯","甲辰","乙巳","丙午","丁未","戊申","己酉","庚戌","辛亥","壬子","癸丑","甲寅","乙卯","丙辰","丁巳","戊午","己未","庚申","辛酉","壬戌","癸亥"]);let b=B0;const d0=class d0 extends h{constructor(t){super(d0.NAMES,t)}static fromIndex(t){return new d0(d0.numeric(t,"dog index"))}static fromName(t){return new d0(t)}next(t){return d0.fromIndex(this.nextIndex(t))}};s(d0,"NAMES",["初伏","中伏","末伏"]);let R0=d0;class a2 extends e2{constructor(t,e){super(t,e)}getDog(){return this.culture}}const l0=class l0 extends h{constructor(t){super(l0.NAMES,t)}static fromIndex(t){return new l0(l0.numeric(t,"plum rain index"))}static fromName(t){return new l0(t)}next(t){return l0.fromIndex(this.nextIndex(t))}};s(l0,"NAMES",["入梅","出梅"]);let l2=l0;class E1 extends e2{constructor(t,e){super(t,e)}getPlumRain(){return this.culture}toString(){return this.getPlumRain().getIndex()==0?super.toString():this.culture.getName()}}const r2=class r2 extends h{constructor(t){super(r2.NAMES,t)}next(t){return new r2(this.nextIndex(t))}};s(r2,"NAMES",["门","碓磨","厨灶","仓库","房床"]);let O2=r2;const n2=class n2 extends h{constructor(t){super(n2.NAMES,t)}next(t){return new n2(this.nextIndex(t))}};s(n2,"NAMES",["碓","厕","炉","门","栖","床"]);let R2=n2;class n1 extends q0{constructor(e){super();s(this,"fetusHeavenStem");s(this,"fetusEarthBranch");s(this,"side");s(this,"direction");const u=e.getSixtyCycle();this.fetusHeavenStem=new O2(u.getHeavenStem().getIndex()%5),this.fetusEarthBranch=new R2(u.getEarthBranch().getIndex()%6);const r=[3,3,8,8,8,8,8,1,1,1,1,1,1,6,6,6,6,6,5,5,5,5,5,5,0,0,0,0,0,-9,-9,-9,-9,-9,-5,-5,-1,-1,-1,-3,-7,-7,-7,-7,-5,7,7,7,7,7,7,2,2,2,2,2,3,3,3,3][u.getIndex()];this.side=r<0?0:1,this.direction=S.fromIndex(r)}static fromLunarDay(e){return new n1(e)}getName(){let e=this.fetusHeavenStem.getName()+this.fetusEarthBranch.getName();e==="门门"?e="占大门":e==="碓磨碓"?e="占碓磨":e==="房床床"?e="占房床":e.indexOf("门")===0&&(e="占"+e),e+=" ";const u=this.direction.getName();return this.side==0?e+="房内":e+="外",this.side==1&&"北南西东".indexOf(u)>-1&&(e+="正"),e+=u,e}getSide(){return this.side}getDirection(){return this.direction}getFetusHeavenStem(){return this.fetusHeavenStem}getFetusEarthBranch(){return this.fetusEarthBranch}}const m0=class m0 extends h{constructor(t){super(m0.NAMES,t)}static fromIndex(t){return new m0(m0.numeric(t,"nine index"))}static fromName(t){return new m0(t)}next(t){return m0.fromIndex(this.nextIndex(t))}};s(m0,"NAMES",["一九","二九","三九","四九","五九","六九","七九","八九","九九"]);let J2=m0;class J1 extends e2{constructor(t,e){super(t,e)}getNine(){return this.culture}}const f0=class f0 extends h{constructor(t){super(f0.NAMES,t)}static fromIndex(t){return new f0(f0.numeric(t,"phenology index"))}static fromName(t){return new f0(t)}next(t){return f0.fromIndex(this.nextIndex(t))}getThreePhenology(){return P2.fromIndex(this.index%3)}};s(f0,"NAMES",["蚯蚓结","麋角解","水泉动","雁北乡","鹊始巢","雉始雊","鸡始乳","征鸟厉疾","水泽腹坚","东风解冻","蛰虫始振","鱼陟负冰","獭祭鱼","候雁北","草木萌动","桃始华","仓庚鸣","鹰化为鸠","玄鸟至","雷乃发声","始电","桐始华","田鼠化为鴽","虹始见","萍始生","鸣鸠拂奇羽","戴胜降于桑","蝼蝈鸣","蚯蚓出","王瓜生","苦菜秀","靡草死","麦秋至","螳螂生","鵙始鸣","反舌无声","鹿角解","蜩始鸣","半夏生","温风至","蟋蟀居壁","鹰始挚","腐草为萤","土润溽暑","大雨行时","凉风至","白露降","寒蝉鸣","鹰乃祭鸟","天地始肃","禾乃登","鸿雁来","玄鸟归","群鸟养羞","雷始收声","蛰虫坯户","水始涸","鸿雁来宾","雀入大水为蛤","菊有黄花","豺乃祭兽","草木黄落","蛰虫咸俯","水始冰","地始冻","雉入大水为蜃","虹藏不见","天气上升地气下降","闭塞而成冬","鹖鴠不鸣","虎始交","荔挺出"]);let W2=f0;const R=class R extends h{constructor(t){super(R.NAMES,t)}static fromIndex(t){return new R(R.numeric(t,"three phenology index"))}static fromName(t){return new R(t)}next(t){return R.fromIndex(this.nextIndex(t))}getThreePhenology(){return R.fromIndex(this.index%3)}};s(R,"NAMES",["初候","二候","三候"]);let P2=R;const x0=class x0 extends h{constructor(t){super(x0.NAMES,t)}static fromIndex(t){return new x0(x0.numeric(t,"dipper index"))}static fromName(t){return new x0(t)}next(t){return x0.fromIndex(this.nextIndex(t))}};s(x0,"NAMES",["天枢","天璇","天玑","天权","玉衡","开阳","摇光","洞明","隐元"]);let z2=x0;class W1 extends e2{constructor(t,e){super(t,e)}getPhenology(){return this.culture}}const b0=class b0 extends h{constructor(t){super(b0.NAMES,t)}static fromIndex(t){return new b0(b0.numeric(t,"nine star index"))}static fromName(t){return new b0(t)}next(t){return b0.fromIndex(this.nextIndex(t))}getColor(){return["白","黑","碧","绿","黄","白","赤","白","紫"][this.index]}getElement(){return O.fromIndex([4,2,0,0,2,3,3,2,1][this.index])}getDipper(){return z2.fromIndex(this.index)}getDirection(){return S.fromIndex(this.index)}toString(){return this.getName()+this.getColor()+this.getElement()}};s(b0,"NAMES",["一","二","三","四","五","六","七","八","九"]);let _0=b0;const y0=class y0 extends h{constructor(t){super(y0.NAMES,t)}static fromIndex(t){return new y0(y0.numeric(t,"twelve star index"))}static fromName(t){return new y0(t)}next(t){return y0.fromIndex(this.nextIndex(t))}getEcliptic(){return Z2.fromIndex([0,0,1,1,0,0,1,0,1,1,0,1][this.index])}};s(y0,"NAMES",["青龙","明堂","天刑","朱雀","金匮","天德","白虎","玉堂","天牢","玄武","司命","勾陈"]);let m2=y0;const I0=class I0 extends h{constructor(t){super(I0.NAMES,t)}static fromIndex(t){return new I0(I0.numeric(t,"ecliptic index"))}static fromName(t){return new I0(t)}next(t){return I0.fromIndex(this.nextIndex(t))}getLuck(){return U0.fromIndex(this.index)}};s(I0,"NAMES",["黄道","黑道"]);let Z2=I0;const N=class N extends I{constructor(e){super();s(this,"year");N.init();const u=N.numeric(e,"lunar year");if(u<-1||u>9999)throw new Error(`illegal lunar year: ${e}`);this.year=u}static init(){if(N.isInit)return;const e="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_@",u="080b0r0j0j0j0C0j0j0C0j0j0j0C0j0C0j0C0F0j0V0V0V0u0j0j0C0j0j0j0j0V0C0j1v0u0C0V1v0C0b080u110u0C0j0C1v9K1v2z0j1vmZbl1veN3s1v0V0C2S1v0V0C2S2o0C0j1Z1c2S1v0j1c0j2z1v0j1c0j392H0b2_2S0C0V0j1c0j2z0C0C0j0j1c0j0N250j0C0j0b081n080b0C0C0C1c0j0N,0r1v1c1v0V0V0F0V0j0C0j0C0j0V0j0u1O0j0C0V0j0j0j0V0b080u0r0u080b0j0j0C0V0C0V0j0b080V0u080b0j0j0u0j1v0u080b1c0j080b0j0V0j0j0V0C0N1v0j1c0j0j1v2g1v420j1c0j2z1v0j1v5Q9z1v4l0j1vfn1v420j9z4l1v1v2S1c0j1v2S3s1v0V0C2S1v1v2S1c0j1v2S2_0b0j2_2z0j1c0j,0z0j0j0j0C0j0j0C0j0j0j0C0j0C0j0j0j0j0m0j0C0j0j0C0j0j0j0j0b0V0j0j0C0j0j0j0j0V0j0j0j0V0b0V0V0C0V0C0j0j0b080u110u0V0C0j0N0j0b080b080b0j0r0b0r0b0j0j0j0j0C0j0b0r0C0j0b0j0C0C0j0j0j0j0j0j0j0j0j0b110j0b0j0j0j0C0j0C0j0j0j0j0b080b080b0V080b080b0j0j0j0j0j0j0V0j0j0u1v0j0j0j0C0j0j0j0V0C0N1c0j0C0C0j0j0j1n080b0j0V0C0j0C0C2g0j1c0j0j1v2g1v0j0j1v7N0j1c0j3L0j0j1v5Q1Z5Q1v4lfn1v420j1v5Q1Z5Q1v4l1v2z1v,0H140r0N0r140r0u0r0V171c11140C0j0u110j0u0j1v0j0C0j0j0j0b080V0u080b0C1v0j0j0j0C0j0b080V0j0j0b080b0j0j0j0j0b080b0C080j0b080b0j0j0j0j0j0j0b080j0b080C0b080b080b080b0j0j0j0j080b0j0C0j0j0j0b0j0j080C0b0j0j0j0j0j0j0b08080b0j0C0j0j0j0b0j0j0K0b0j0C0j0j0j0b080b080j0C0b0j080b080b0j0j0j0j080b0j0b0r0j0j0j0b0j0C0r0b0j0j0j0j0j0j0j0b080j0b0r0C0j0b0j0j0j0r0b0j0C0j0j0j0u0r0b0C0j080b0j0j0j0j0j0j0j1c0j0b0j0j0j0C0j0j0j0j0j0j0j0b080j1c0u0j0j0j0C0j1c0j0u0j1c0j0j0j0j0j0j0j0j1c0j0u1v0j0j0V0j0j2g0j0j0j0C1v0C1G0j0j0V0C1Z1O0j0V0j0j2g1v0j0j0V0C2g5x1v4l1v421O7N0V0C4l1v2S1c0j1v2S2_,050b080C0j0j0j0C0j0j0C0j0j0j0C0j0C0j0C030j0j0j0j0j0j0j0j0j0C0j0b080u0V080b0j0j0V0j0j0j0j0j0j0j0j0j0V0N0j0C0C0j0j0j0j0j0j0j0j1c0j0u0j1v0j0j0j0j0j0b080b080j0j0j0b080b080b080b080b0j0j0j080b0j0b080j0j0j0j0b080b0j0j0r0b080b0b080j0j0j0j0b080b080j0b080j0b080b080b080b080b0j0j0r0b0j0b080j0j0j0j0b080b0j0j0C080b0b080j0j0j0j0j0j0j0b080u080j0j0b0j0j0j0C0j0b080j0j0j0j0b080b080b080b0C080b080b080b0j0j0j0j0j0j0b0C080j0j0b0j0j0j0C0j0b080j0j0C0b080b080j0b0j0j0C080b0j0j0j0j0j0j0b0j0j080C0b0j080b0j0j0j0j0j0j0j0C0j0j0j0b0j0j0C080b0j0j0j0j0j0j0b080b080b0K0b080b080b0j0j0j0j0j0j0j0C0j0j0u0j0j0V0j080b0j0C0j0j0j0b0j0r0C0b0j0j0j0j0j0j0j0j0j0C0j0b080b080b0j0C0C0j0C0j0j0j0u110u0j0j0j0j0j0j0j0j0C0j0j0u0j1c0j0j0j0j0j0j0j0j0V0C0u0j0C0C0V0C1Z0j0j0j0C0j0j0j1v0u0j1c0j0j0j0C0j0j2g0j1c1v0C1Z0V0j4l0j0V0j0j2g0j1v0j1v2S1c7N1v,0w0j1c0j0V0j0j0V0V0V0j0m0V0j0C1c140j0j0j0C0V0C0j1v0j0N0j0C0j0j0j0V0j0j1v0N0j0j0V0j0j0j0j0j0j080b0j0j0j0j0j0j0j080b0j0C0j0j0j0b0j0j080u080b0j0j0j0j0j0j0b080b080b080C0b0j080b080b0j0j0j0j080b0j0C0j0j0j0b0j0j080u080b0j0j0j0j0j0j0b080b080b080b0r0b0j080b080b0j0j0j0j080b0j0b0r0j0j0b080b0j0j080b0j080b0j080b080b0j0j0j0j0j0b080b0r0C0b080b0j0j0j0j080b0b080b080j0j0j0b080b080b080b0j0j0j0j080b0j0b080j0j0j0j0b080b0j0j0r0b080b0j0j0j0j0j0b080b080j0b0r0b080j0b080b0j0j0j0j080b0j0b080j0j0j0j0b080b0j080b0r0b0j080b080b0j0j0j0j0j0b080b0r0C0b080b0j0j0j0j0j0j0b080j0j0j0b080b080b080b0j0j0j0r0b0j0b080j0j0j0j0b080b0r0b0r0b0j080b080b0j0j0j0j0j0j0b0r0j0j0j0b0j0j0j0j080b0j0b080j0j0j0j0b080b080b0j0r0b0j080b0j0j0j0j0j0j0j0b0r0C0b0j0j0j0j0j0j0j080b0j0C0j0j0j0b0j0C0r0b0j0j0j0j0j0j0b080b080u0r0b0j080b0j0j0j0j0j0j0j0b0r0C0u0j0j0j0C0j080b0j0C0j0j0j0u110b0j0j0j0j0j0j0j0j0j0C0j0b080b0j0j0C0C0j0C0j0j0j0b0j1c0j080b0j0j0j0j0j0j0V0j0j0u0j1c0j0j0j0C0j0j2g0j0j0j0C0j0j0V0j0b080b1c0C0V0j0j2g0j0j0V0j0j1c0j1Z0j0j0C0C0j1v,160j0j0V0j1c0j0C0j0C0j1f0j0V0C0j0j0C0j0j0j1G080b080u0V080b0j0j0V0j1v0j0u0j1c0j0j0j0C0j0j0j0C0C0j1D0b0j080b0j0j0j0j0C0j0b0r0C0j0b0j0C0C0j0j0j0j0j0j0j0j0j0b0r0b0r0j0b0j0j0j0C0j0b0r0j0j0j0b080b080j0b0C0j080b080b0j0j0j0j0j0j0b0C080j0j0b0j0j0j0C0j0b080j0j0j0j0b080b080j0b0C0r0j0b0j0j0j0j0j0j0b0C080j0j0b0j0j0j0C0j0j0j0j0C0j0j0b080b0j0j0C080b0j0j0j0j0j0j0b080b080b080C0b080b080b080b0j0j0j0j0j0b080C0j0j0b080b0j0j0C080b0j0j0j0j0j0j0b080j0b0C080j0j0b0j0j0j0j0j0j0b080j0b080C0b080b080b080b0j0j0j0j080b0j0C0j0j0b080b0j0j0C080b0j0j0j0j0j0j0b080j0b080u080j0j0b0j0j0j0j0j0j0b080C0j0j0b080b0j0j0C0j0j080b0j0j0j0j0j0b080b0C0r0b080b0j0j0j0j0j0j0b080j0b080u080b080b080b0j0j0j0C0j0b080j0j0j0j0b0j0j0j0C0j0j080b0j0j0j0j0j0b080b0C0r0b080b0j0j0j0j0j0j0b080j0b0r0b080b080b080b0j0j0j0r0b0j0b0r0j0j0j0b0j0j0j0r0b0j080b0j0j0j0j0j0j0j0b0r0C0b0j0j0j0j0j0j0j0b080j0C0u080b080b0j0j0j0r0b0j0C0C0j0b0j110b0j080b0j0j0j0j0j0j0u0r0C0b0j0j0j0j0j0j0j0j0j0C0j0j0j0b0j1c0j0C0j0j0j0b0j0814080b080b0j0j0j0j0j0j1c0j0u0j0j0V0j0j0j0j0j0j0j0u110u0j0j0j,020b0r0C0j0j0j0C0j0j0V0j0j0j0j0j0C0j1f0j0C0j0V1G0j0j0j0j0V0C0j0C1v0u0j0j0j0V0j0j0C0j0j0j1v0N0C0V0j0j0j0K0C250b0C0V0j0j0V0j0j2g0C0V0j0j0C0j0j0b081v0N0j0j0V0V0j0j0u0j1c0j080b0j0j0j0j0j0j0V0j0j0u0j0j0V0j0j0j0C0j0b080b080V0b0j080b0j0j0j0j0j0j0j0b0r0C0j0b0j0j0j0C0j080b0j0j0j0j0j0j0u0r0C0u0j0j0j0j0j0j0b080j0C0j0b080b080b0j0C0j080b0j0j0j0j0j0j0b080b110b0j0j0j0j0j0j0j0j0j0b0r0j0j0j0b0j0j0j0r0b0j0b080j0j0j0j0b080b080b080b0r0b0j080b080b0j0j0j0j0j0j0b0r0C0b080b0j0j0j0j080b0j0b080j0j0j0j0b080b080b0j0j0j0r0b0j0j0j0j0j0j0b080b0j080C0b0j080b080b0j0j0j0j080b0j0b0r0C0b080b0j0j0j0j080b0j0j0j0j0j0b080b080b080b0j0j080b0r0b0j0j0j0j0j0j0b0j0j080C0b0j080b080b0j0j0j0j0j0b080C0j0j0b080b0j0j0C0j0b080j0j0j0j0b080b080b080b0C0C080b0j0j0j0j0j0j0b0C0C080b080b080b0j0j0j0j0j0j0b0C080j0j0b0j0j0j0C0j0b080j0b080j0j0b080b080b080b0C0r0b0j0j0j0j0j0j0b080b0r0b0r0b0j080b080b0j0j0j0j0j0j0b0r0C0j0b0j0j0j0j0j0j0b080j0C0j0b080j0b0j0j0K0b0j0C0j0j0j0b080b0j0K0b0j080b0j0j0j0j0j0j0V0j0j0b0j0j0j0C0j0j0j0j,0l0C0K0N0r0N0j0r1G0V0m0j0V1c0C0j0j0j0j1O0N110u0j0j0j0C0j0j0V0C0j0u110u0j0j0j0C0j0j0j0C0C0j250j1c2S1v1v0j5x2g0j1c0j0j1c2z0j1c0j0j1c0j0N1v0V0C1v0C0b0C0V0j0j0C0j0C1v0u0j0C0C0j0j0j0C0j0j0j0u110u0j0j0j0C0j0C0C0C0b080b0j0C0j080b0j0C0j0j0j0u110u0j0j0j0C0j0j0j0C0j0j0j0u0C0r0u0j0j0j0j0j0j0b0r0b0V080b080b0j0C0j0j0j0V0j0j0b0j0j0j0C0j0j0j0j0j0j0j0b080j0b0C0r0j0b0j0j0j0C0j0b0r0b0r0j0b080b080b0j0C0j0j0j0j0j0j0j0j0b0j0C0r0b0j0j0j0j0j0j0b080b080j0b0r0b0r0j0b0j0j0j0j080b0j0b0r0j0j0j0b080b080b0j0j0j0j080b0j0j0j0j0j0j0b0j0j0j0r0b0j0j0j0j0j0j0b080b080b080b0r0C0b080b0j0j0j0j0j0b080b0r0C0b080b080b080b0j0j0j0j080b0j0C0j0j0j0b0j0j0C080b0j0j0j0j0j0j0b080j0b0C080j0j0b0j0j0j0j0j0j0b0r0b080j0j0b080b080b0j0j0j0j0j0j0b080j0j0j0j0b0j0j0j0r0b0j0b080j0j0j0j0j0b080b080b0C0r0b0j0j0j0j0j0j0b080b080j0C0b0j080b080b0j0j0j0j0j0j,0a0j0j0j0j0C0j0j0C0j0C0C0j0j0j0j0j0j0j0m0C0j0j0j0j0u080j0j0j1n0j0j0j0j0C0j0j0j0V0j0j0j1c0u0j0C0V0j0j0V0j0j1v0N0C0V2o1v1O2S2o141v0j1v4l0j1c0j1v2S2o0C0u1v0j0C0C2S1v0j1c0j0j1v0N251c0j1v0b1c1v1n1v0j0j0V0j0j1v0N1v0C0V0j0j1v0b0C0j0j0V1c0j0u0j1c0j0j0j0j0j0j0j0j1c0j0u0j0j0V0j0j0j0j0j0j0b080u110u0j0j0j0j0j0j1c0j0b0j080b0j0C0j0j0j0V0j0j0u0C0V0j0j0j0C0j0b080j1c0j0b0j0j0j0C0j0C0j0j0j0b080b080b0j0C0j080b0j0j0j0j0j0j0j0b0C0r0u0j0j0j0j0j0j0b080j0b0r0C0j0b0j0j0j0r0b0j0b0r0j0j0j0b080b080b0j0r0b0j080b0j0j0j0j0j0j0b0j0r0C0b0j0j0j0j0j0j0b080j0j0C0j0j0b080b0j0j0j0j0j0j0j0j0j0j0b080b080b080b0C0j0j080b0j0j0j0j0j0j0b0j0j0C080b0j0j0j0j0j0j0j0j0b0C080j0j0b0j0j0j0j0j,0n0Q0j1c14010q0V1c171k0u0r140V0j0j1c0C0N1O0j0V0j0j0j1c0j0u110u0C0j0C0V0C0j0j0b671v0j1v5Q1O2S2o2S1v4l1v0j1v2S2o0C1Z0j0C0C1O141v0j1c0j2z1O0j0V0j0j1v0b2H390j1c0j0V0C2z0j1c0j1v2g0C0V0j1O0b0j0j0V0C1c0j0u0j1c0j0j0j0j0j0j0j0j1c0N0j0j0V0j0j0C0j0j0b081v0u0j0j0j0C0j1c0N0j0j0C0j0j0j0C0j0j0j0u0C0r0u0j0j0j0C0j0b080j1c0j0b0j0C0C0j0C0C0j0b080b080u0C0j080b0j0C0j0j0j0u110u0j0j0j0j0j0j0j0j0C0C0j0b0j0j0j0C0j0C0C0j0b080b080b0j0C0j080b0j0C0j0j0j0b0j110b0j0j0j0j0j,0B0j0V0j0j0C0j0j0j0C0j0C0j0j0C0j0m0j0j0j0j0C0j0C0j0j0u0j1c0j0j0C0C0j0j0j0j0j0j0j0j0u110N0j0j0V0C0V0j0b081n080b0CrU1O5e2SbX2_1Z0V2o141v0j0C0C0j2z1v0j1c0j7N1O420j1c0j1v2S1c0j1v2S2_0b0j0V0j0j1v0N1v0j0j1c0j1v140j0V0j0j0C0C0b080u1v0C0V0u110u0j0j0j0C0j0j0j0C0C0N0C0V0j0j0C0j0j0b080u110u0C0j0C0u0r0C0u080b0j0j0C0j0j0j".split(",",-1);for(let r=0;r<12;r++){let n=0;const F=u[r],i=~~(F.length/2),a=[];for(let E=0;E<i;E++){const D=E*2,j=F.substring(D,D+2);let o=0,c=1;for(let B=1;B>-1;B--)o+=c*e.indexOf(j.charAt(B)),c*=64;n+=o,a.push(n)}N.LEAP[`${r+1}`]=a}N.isInit=!0}static fromYear(e){return new N(e)}getYear(){return this.year}getDayCount(){let e=0;const u=this.getMonths();for(let r=0,n=u.length;r<n;r++)e+=u[r].getDayCount();return e}getMonthCount(){return this.getLeapMonth()>0?13:12}getName(){return`农历${this.getSixtyCycle().getName()}年`}next(e){return N.fromYear(this.year+e)}getLeapMonth(){if(this.year===-1)return 11;for(const e of Object.keys(N.LEAP))if(N.LEAP[e].indexOf(this.year)>-1)return parseInt(e,10);return 0}getSixtyCycle(){return b.fromIndex(this.year-4)}getTwenty(){return H2.fromIndex(Math.floor((this.year-1864)/20))}getNineStar(){return _0.fromIndex(63+this.getTwenty().getSixty().getIndex()*3-this.getSixtyCycle().getIndex())}getJupiterDirection(){return S.fromIndex([0,7,7,2,3,3,8,1,1,6,0,0][this.getSixtyCycle().getEarthBranch().getIndex()])}getMonths(){const e=[];let u=w0.fromYm(this.year,1);for(;u.getYear()===this.year;)e.push(u),u=u.next(1);return e}getKitchenGodSteed(){return e1.fromLunarYear(this.year)}};s(N,"isInit",!1),s(N,"LEAP",{});let u2=N;const S0=class S0 extends h{constructor(t){super(S0.NAMES,t)}static fromIndex(t){return new S0(S0.numeric(t,"lunar season index"))}static fromName(t){return new S0(t)}next(t){return S0.fromIndex(this.nextIndex(t))}};s(S0,"NAMES",["孟春","仲春","季春","孟夏","仲夏","季夏","孟秋","仲秋","季秋","孟冬","仲冬","季冬"]);let K2=S0;const J0=class J0 extends h{constructor(t){super(J0.NAMES,t)}static fromLunarMonth(t){return t.isLeap()?null:new J0(t.getMonth()-1)}next(t){return new J0(this.nextIndex(t))}};s(J0,"NAMES",["占房床","占户窗","占门堂","占厨灶","占房床","占床仓","占碓磨","占厕户","占门房","占房床","占灶炉","占房床"]);let Q2=J0;const T=class T extends I{constructor(e,u,r){super();s(this,"year");s(this,"month");s(this,"leap");s(this,"dayCount");s(this,"indexInYear");s(this,"firstJulianDay");if(r){const n=r[1];this.year=u2.fromYear(r[0]),this.month=Math.abs(n),this.leap=n<0,this.dayCount=r[2],this.indexInYear=r[3],this.firstJulianDay=z.fromJulianDay(r[4])}else{const n=T.numeric(u,"lunar month");if(n===0||n>12||n<-12)throw new Error(`illegal lunar month: ${u}`);const F=u2.fromYear(e),i=F.getYear(),a=F.getLeapMonth(),E=n<0,D=Math.abs(n);if(E&&D!=a)throw new Error(`illegal leap month ${D} in lunar year ${e}`);const o=y.fromIndex(i,0).getCursoryJulianDay();let c=M0.calcShuo(o);c>o&&(c-=29.53);let B=2;i>8&&i<24?B=1:u2.fromYear(i-1).getLeapMonth()>10&&i!=239&&i!=240&&(B=3);let d=D-1;(E||a>0&&D>a)&&(d+=1),this.indexInYear=d,c+=29.5306*(B+d);const m=M0.calcShuo(c);this.firstJulianDay=z.fromJulianDay(z.J2000+m),this.dayCount=~~(M0.calcShuo(c+29.5306)-m),this.year=F,this.month=D,this.leap=E}}static fromYm(e,u){let r;const n=`${e}${u}`,F=T.cache[n];return F?r=new T(0,0,F):(r=new T(e,u),T.cache[n]=[r.getYear(),r.getMonthWithLeap(),r.getDayCount(),r.getIndexInYear(),r.getFirstJulianDay().getDay()]),r}getLunarYear(){return this.year}getYear(){return this.year.getYear()}getMonth(){return this.month}getMonthWithLeap(){return this.leap?-this.month:this.month}getDayCount(){return this.dayCount}getIndexInYear(){return this.indexInYear}getSeason(){return K2.fromIndex(this.month-1)}getFirstJulianDay(){return this.firstJulianDay}isLeap(){return this.leap}getWeekCount(e){return Math.ceil((this.indexOf(this.firstJulianDay.getWeek().getIndex()-e,7)+this.getDayCount())/7)}getName(){return(this.leap?"闰":"")+T.NAMES[this.month-1]}toString(){return this.year.toString()+this.getName()}next(e){if(e===0)return T.fromYm(this.getYear(),this.getMonthWithLeap());let u=this.indexInYear+1+e,r=this.year,n=r.getLeapMonth();if(e>0){let i=n>0?13:12;for(;u>i;)u-=i,r=r.next(1),n=r.getLeapMonth(),i=n>0?13:12}else for(;u<=0;)r=r.next(-1),n=r.getLeapMonth(),u+=n>0?13:12;let F=!1;return n>0&&(u===n+1&&(F=!0),u>n&&u--),T.fromYm(r.getYear(),F?-u:u)}getDays(){const e=this.getYear(),u=this.getMonthWithLeap(),r=[];for(let n=1,F=this.getDayCount();n<=F;n++)r.push(w.fromYmd(e,u,n));return r}getWeeks(e){const u=this.getYear(),r=this.getMonthWithLeap(),n=[];for(let F=0,i=this.getWeekCount(e);F<i;F++)n.push(G2.fromYm(u,r,F,e));return n}getSixtyCycle(){return b.fromName(k.fromIndex((this.year.getSixtyCycle().getHeavenStem().getIndex()+1)*2+this.indexInYear).getName()+Y.fromIndex(this.indexInYear+2).getName())}getNineStar(){let e=this.getSixtyCycle().getEarthBranch().getIndex();return e<2&&(e+=3),_0.fromIndex(27-this.year.getSixtyCycle().getEarthBranch().getIndex()%3*3-e)}getJupiterDirection(){const e=this.getSixtyCycle(),u=[7,-1,1,3][e.getEarthBranch().next(-2).getIndex()%4];return u===-1?e.getHeavenStem().getDirection():S.fromIndex(u)}getFetus(){return Q2.fromLunarMonth(this)}getMinorRen(){return q2.fromIndex((this.month-1)%6)}};s(T,"cache",{}),s(T,"NAMES",["正月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"]);let w0=T;const p0=class p0 extends I{constructor(e,u,r,n){super();s(this,"month");s(this,"index");s(this,"start");const F=p0.numeric(r,"lunar week index");if(F<0||F>5)throw new Error(`illegal lunar week index: ${r}`);const i=G0.fromIndex(n),a=w0.fromYm(e,u);if(F>=a.getWeekCount(i.getIndex()))throw new Error(`illegal lunar week index: ${r} in month: ${a.toString()}`);this.month=a,this.index=F,this.start=i}static fromYm(e,u,r,n){return new p0(e,u,r,n)}getLunarMonth(){return this.month}getYear(){return this.month.getYear()}getMonth(){return this.month.getMonthWithLeap()}getIndex(){return this.index}getStart(){return this.start}getName(){return p0.NAMES[this.index]}toString(){return this.month.toString()+this.getName()}next(e){const u=this.start.getIndex();if(e===0)return p0.fromYm(this.getYear(),this.getMonth(),this.index,u);let r=this.index+e,n=this.month;if(e>0){let F=n.getWeekCount(u);for(;r>=F;)r-=F,n=n.next(1),w.fromYmd(n.getYear(),n.getMonthWithLeap(),1).getWeek().equals(this.start)||(r+=1),F=n.getWeekCount(u)}else for(;r<0;)w.fromYmd(n.getYear(),n.getMonthWithLeap(),1).getWeek().equals(this.start)||(r-=1),n=n.next(-1),r+=n.getWeekCount(u);return p0.fromYm(n.getYear(),n.getMonthWithLeap(),r,u)}getFirstDay(){const e=w.fromYmd(this.getYear(),this.getMonth(),1);return e.next(this.index*7-this.indexOf(e.getWeek().getIndex()-this.start.getIndex(),7))}getDays(){const e=[],u=this.getFirstDay();e.push(u);for(let r=1;r<7;r++)e.push(u.next(r));return e}equals(e){return e&&e.getFirstDay().equals(this.getFirstDay())}};s(p0,"NAMES",["第一周","第二周","第三周","第四周","第五周","第六周"]);let G2=p0;const Y0=class Y0 extends I{constructor(e,u,r){super();s(this,"month");s(this,"day");const n=w0.fromYm(e,u),F=Y0.numeric(r,"lunar day");if(F<1||F>n.getDayCount())throw new Error(`illegal day ${r} in ${n.toString()}`);this.month=n,this.day=F}static fromYmd(e,u,r){return new Y0(e,u,r)}getLunarMonth(){return this.month}getYear(){return this.month.getYear()}getMonth(){return this.month.getMonthWithLeap()}getDay(){return this.day}getName(){return Y0.NAMES[this.day-1]}toString(){return this.month.toString()+this.getName()}next(e){return e!==0?this.getSolarDay().next(e).getLunarDay():Y0.fromYmd(this.getYear(),this.getMonth(),this.day)}isBefore(e){const u=this.getYear(),r=e.getYear();if(u!==r)return u<r;const n=this.getMonth(),F=e.getMonth();return n!==F?Math.abs(n)<Math.abs(F):this.day<e.getDay()}isAfter(e){const u=this.getYear(),r=e.getYear();if(u!==r)return u>r;const n=this.getMonth(),F=e.getMonth();return n!=F?Math.abs(n)>=Math.abs(F):this.day>e.getDay()}getWeek(){return this.getSolarDay().getWeek()}getYearSixtyCycle(){const e=this.getSolarDay(),u=e.getYear(),r=y.fromIndex(u,3).getJulianDay().getSolarDay(),n=this.month.getLunarYear(),F=n.getYear();let i=n.getSixtyCycle();return F===u?e.isBefore(r)&&(i=i.next(-1)):F<u&&(e.isBefore(r)||(i=i.next(1))),i}getMonthSixtyCycle(){const e=this.getSolarDay(),u=e.getYear(),r=e.getTerm();let n=r.getIndex()-3;return n<0&&r.getJulianDay().getSolarDay().isAfter(y.fromIndex(u,3).getJulianDay().getSolarDay())&&(n+=24),w0.fromYm(u,1).getSixtyCycle().next(Math.floor(n/2))}getSixtyCycle(){const e=~~this.month.getFirstJulianDay().next(this.day-12).getDay();return b.fromName(k.fromIndex(e).getName()+Y.fromIndex(e).getName())}getDuty(){return g2.fromIndex(this.getSixtyCycle().getEarthBranch().getIndex()-this.getMonthSixtyCycle().getEarthBranch().getIndex())}getTwelveStar(){return m2.fromIndex(this.getSixtyCycle().getEarthBranch().getIndex()+(8-this.getMonthSixtyCycle().getEarthBranch().getIndex()%6)*2)}getNineStar(){const e=this.getSolarDay(),u=y.fromIndex(e.getYear(),0),r=u.next(12),n=u.next(24),F=u.getJulianDay().getSolarDay(),i=r.getJulianDay().getSolarDay(),a=n.getJulianDay().getSolarDay(),E=F.getLunarDay().getSixtyCycle().getIndex(),D=i.getLunarDay().getSixtyCycle().getIndex(),j=a.getLunarDay().getSixtyCycle().getIndex(),o=F.next(E>29?60-E:-E),c=a.next(j>29?60-j:-j),B=i.next(D>29?60-D:-D);let d=0;return!e.isBefore(o)&&e.isBefore(B)?d=e.subtract(o):!e.isBefore(B)&&e.isBefore(c)?d=8-e.subtract(B):e.isBefore(c)?e.isBefore(o)&&(d=8+o.subtract(e)):d=e.subtract(c),_0.fromIndex(d)}getJupiterDirection(){const e=this.getSixtyCycle().getIndex();return e%12<6?O.fromIndex(~~(e/12)).getDirection():this.month.getLunarYear().getJupiterDirection()}getFetusDay(){return n1.fromLunarDay(this)}getPhase(){return M2.fromIndex(this.day-1)}getSolarDay(){return this.month.getFirstJulianDay().next(this.day-1).getSolarDay()}getTwentyEightStar(){return j2.fromIndex([10,18,26,6,14,22,2][this.getSolarDay().getWeek().getIndex()]).next(-7*this.getSixtyCycle().getEarthBranch().getIndex())}getFestival(){return _2.fromYmd(this.getYear(),this.getMonth(),this.day)}getSixStar(){return L2.fromIndex((this.month.getMonth()+this.day-2)%6)}getGods(){return N2.getDayGods(this.getMonthSixtyCycle(),this.getSixtyCycle())}getRecommends(){return X0.getDayRecommends(this.getMonthSixtyCycle(),this.getSixtyCycle())}getAvoids(){return X0.getDayAvoids(this.getMonthSixtyCycle(),this.getSixtyCycle())}getHours(){const e=[],u=this.getYear(),r=this.getMonth();e.push(i2.fromYmdHms(u,r,this.day,0,0,0));for(let n=0;n<24;n+=2)e.push(i2.fromYmdHms(u,r,this.day,n+1,0,0));return e}getMinorRen(){return this.getLunarMonth().getMinorRen().next(this.day-1)}};s(Y0,"NAMES",["初一","初二","初三","初四","初五","初六","初七","初八","初九","初十","十一","十二","十三","十四","十五","十六","十七","十八","十九","二十","廿一","廿二","廿三","廿四","廿五","廿六","廿七","廿八","廿九","三十"]);let w=Y0;class P1{getEightChar(t){return new Z1(t.getYearSixtyCycle(),t.getMonthSixtyCycle(),t.getDaySixtyCycle(),t.getSixtyCycle())}}const L=class L extends I{constructor(e,u,r,n,F,i){super();s(this,"day");s(this,"hour");s(this,"minute");s(this,"second");const a=L.numeric(n,"hour");if(a<0||a>23)throw new Error(`illegal hour: ${n}`);const E=L.numeric(F,"minute");if(E<0||E>59)throw new Error(`illegal minute: ${F}`);const D=L.numeric(i,"second");if(D<0||D>59)throw new Error(`illegal second: ${i}`);this.day=w.fromYmd(e,u,r),this.hour=a,this.minute=E,this.second=D}static fromYmdHms(e,u,r,n,F,i){return new L(e,u,r,n,F,i)}getLunarDay(){return this.day}getYear(){return this.day.getYear()}getMonth(){return this.day.getMonth()}getDay(){return this.day.getDay()}getHour(){return this.hour}getMinute(){return this.minute}getSecond(){return this.second}getName(){return Y.fromIndex(this.getIndexInDay()).getName()+"时"}toString(){return`${this.day.toString()}${this.getSixtyCycle().getName()}时`}getIndexInDay(){return~~((this.hour+1)/2)}next(e){if(e==0)return L.fromYmdHms(this.getYear(),this.getMonth(),this.getDay(),this.hour,this.minute,this.second);const u=this.hour+e*2,r=u<0?-1:1;let n=Math.abs(u),F=~~(n/24)*r;n=n%24*r,n<0&&(n+=24,F--);const i=this.day.next(F);return L.fromYmdHms(i.getYear(),i.getMonth(),i.getDay(),n,this.minute,this.second)}isBefore(e){return this.day.equals(e.getLunarDay())?this.hour!==e.getHour()?this.hour<e.getHour():this.minute!==e.getMinute()?this.minute<e.getMinute():this.second<e.getSecond():this.day.isBefore(e.getLunarDay())}isAfter(e){return this.day.equals(e.getLunarDay())?this.hour!==e.getHour()?this.hour>e.getHour():this.minute!==e.getMinute()?this.minute>e.getMinute():this.second>e.getSecond():this.day.isAfter(e.getLunarDay())}getYearSixtyCycle(){const e=this.getSolarTime(),u=this.day.getSolarDay().getYear(),r=y.fromIndex(u,3).getJulianDay().getSolarTime(),n=this.day.getLunarMonth().getLunarYear(),F=n.getYear();let i=n.getSixtyCycle();return F===u?e.isBefore(r)&&(i=i.next(-1)):F<u&&(e.isBefore(r)||(i=i.next(1))),i}getMonthSixtyCycle(){const e=this.getSolarTime(),u=e.getYear(),r=e.getTerm();let n=r.getIndex()-3;return n<0&&r.getJulianDay().getSolarTime().isAfter(y.fromIndex(u,3).getJulianDay().getSolarTime())&&(n+=24),w0.fromYm(u,1).getSixtyCycle().next(Math.floor(n/2))}getDaySixtyCycle(){const e=this.day.getSixtyCycle();return this.hour<23?e:e.next(1)}getSixtyCycle(){const e=this.getIndexInDay()%12,u=this.getDaySixtyCycle().getHeavenStem().getIndex()%5*2+e;return b.fromName(k.fromIndex(u).getName()+Y.fromIndex(e).getName())}getTwelveStar(){return m2.fromIndex(this.getSixtyCycle().getEarthBranch().getIndex()+(8-this.getDaySixtyCycle().getEarthBranch().getIndex()%6)*2)}getNineStar(){const e=this.day.getSolarDay(),u=y.fromIndex(e.getYear(),0),r=u.next(12),n=!e.isBefore(u.getJulianDay().getSolarDay())&&e.isBefore(r.getJulianDay().getSolarDay());let F=[8,5,2][this.day.getSixtyCycle().getEarthBranch().getIndex()%3];n&&(F=8-F);const i=this.getIndexInDay()%12;return _0.fromIndex(F+(n?i:-i))}getSolarTime(){const e=this.day.getSolarDay();return q.fromYmdHms(e.getYear(),e.getMonth(),e.getDay(),this.hour,this.minute,this.second)}getEightChar(){return L.provider.getEightChar(this)}getRecommends(){return X0.getHourRecommends(this.getDaySixtyCycle(),this.getSixtyCycle())}getAvoids(){return X0.getHourAvoids(this.getDaySixtyCycle(),this.getSixtyCycle())}getMinorRen(){return this.getLunarDay().getMinorRen().next(this.getIndexInDay())}};s(L,"provider",new P1);let i2=L;const M=class M extends I{constructor(e){super();s(this,"day");this.day=M.numeric(e,"julian day")}static fromJulianDay(e){return new M(e)}static fromYmdHms(e,u,r,n,F,i){let a=M.numeric(e,"year"),E=M.numeric(u,"month");const D=M.numeric(n,"hour"),j=M.numeric(F,"minute"),o=M.numeric(i,"second"),c=M.numeric(r,"day")+((o/60+j)/60+D)/24;let B=0;const d=a*372+E*31+~~c>=588829;return E<=2&&(E+=12,a--),d&&(B=~~(a/100),B=2-B+~~(B/4)),M.fromJulianDay(~~(365.25*(a+4716))+~~(30.6001*(E+1))+c+B-1524.5)}getDay(){return this.day}getName(){return`${this.day}`}next(e){return M.fromJulianDay(this.day+e)}getSolarDay(){return this.getSolarTime().getSolarDay()}getSolarTime(){let e=~~(this.day+.5),u=this.day+.5-e;if(e>=2299161){const D=~~((e-186721625e-2)/36524.25);e+=1+D-~~(D/4)}e+=1524;let r=~~((e-122.1)/365.25);e-=~~(365.25*r);let n=~~(e/30.601);e-=~~(30.601*n);let F=e;n>13?(n-=13,r-=4715):(n-=1,r-=4716),u*=24;let i=~~u;u-=i,u*=60;let a=~~u;u-=a,u*=60;let E=Math.round(u);return E>59&&(E-=60,a++),a>59&&(a-=60,i++),i>23&&(i-=24,F+=1),q.fromYmdHms(r,n,F,i,a,E)}getWeek(){return G0.fromIndex(~~(this.day+.5)+7000001)}subtract(e){return this.day-e.getDay()}};s(M,"J2000",2451545);let z=M;const C=class C{static decode(t){const e="0000000000",u=e+e;return t=t.replace(/J/g,"00"),t=t.replace(/I/g,"000"),t=t.replace(/H/g,"0000"),t=t.replace(/G/g,"00000"),t=t.replace(/t/g,"02"),t=t.replace(/s/g,"002"),t=t.replace(/r/g,"0002"),t=t.replace(/q/g,"00002"),t=t.replace(/p/g,"000002"),t=t.replace(/o/g,"0000002"),t=t.replace(/n/g,"00000002"),t=t.replace(/m/g,"000000002"),t=t.replace(/l/g,"0000000002"),t=t.replace(/k/g,"01"),t=t.replace(/j/g,"0101"),t=t.replace(/i/g,"001"),t=t.replace(/h/g,"001001"),t=t.replace(/g/g,"0001"),t=t.replace(/f/g,"00001"),t=t.replace(/e/g,"000001"),t=t.replace(/d/g,"0000001"),t=t.replace(/c/g,"00000001"),t=t.replace(/b/g,"000000001"),t=t.replace(/a/g,"0000000001"),t=t.replace(/A/g,u+u+u),t=t.replace(/B/g,u+u+e),t=t.replace(/C/g,u+u),t=t.replace(/D/g,u+e),t=t.replace(/E/g,u),t=t.replace(/F/g,e),t}static nutationLon2(t){let e=-1.742*t;const u=t*t;let r=0;for(let n=0,F=C.NUT_B.length;n<F;n+=5)r+=(C.NUT_B[n+3]+e)*Math.sin(C.NUT_B[n]+C.NUT_B[n+1]*t+C.NUT_B[n+2]*u),e=0;return r/100/C.SECOND_PER_RAD}static eLon(t,e){t/=10;let u=0,r=1,n,F,i,a,E;const D=C.XL0[2]-C.XL0[1];for(let o=0;o<6;o++,r*=t)if(n=~~C.XL0[1+o],F=~~C.XL0[2+o],E=F-n,E!==0){e<0?i=F:(i=~~(3*e*E/D+.5+n),o!=0&&(i+=3),i>F&&(i=F)),a=0;for(let c=n;c<i;c+=3)a+=C.XL0[c]*Math.cos(C.XL0[c+1]+t*C.XL0[c+2]);u+=a*r}u/=C.XL0[0];const j=t*t;return u+=(-.0728-2.7702*t-1.1019*j-.0996*j*t)/C.SECOND_PER_RAD,u}static mLon(t,e){const u=C.XL1[0].length;let r=1,n=0,F,i,a=t*t,E=a*t,D=E*t;const j=D*t,o=t-10;n+=(3.81034409+8399.684730072*t-3319e-8*a+311e-10*E-2033e-13*D)*C.SECOND_PER_RAD,n+=5028.792262*t+1.1124406*a+7699e-8*E-23479e-9*D-178e-10*j,o>0&&(n+=-.866+1.43*o+.054*o*o),a/=1e4,E/=1e8,D/=1e8,e*=6,e<0&&(e=u);for(let c=0,B=C.XL1.length;c<B;c++,r*=t){const d=C.XL1[c],m=d.length;let l=~~(e*m/u+.5);for(c>0&&(l+=6),l>=m&&(l=m),F=0,i=0;F<l;F+=6)i+=d[F]*Math.cos(d[F+1]+t*d[F+2]+a*d[F+3]+E*d[F+4]+D*d[F+5]);n+=i*r}return n/=C.SECOND_PER_RAD,n}static gxcSunLon(t){const e=t*t,u=-.043126+628.301955*t-2732e-9*e;return-20.49552*(1+(.016708634-42037e-9*t-1267e-10*e)*Math.cos(u))/C.SECOND_PER_RAD}static ev(t){const e=628.307585*t;return 628.332+21*Math.sin(1.527+e)+.44*Math.sin(1.48+e*2)+.129*Math.sin(5.82+e)*t+55e-5*Math.sin(4.21+e)*t*t}static saLon(t,e){return C.eLon(t,e)+C.nutationLon2(t)+C.gxcSunLon(t)+Math.PI}static dtExt(t,e){const u=(t-1820)/100;return-20+e*u*u}static dtCalc(t){const e=C.DT_AT.length,u=C.DT_AT[e-2],r=C.DT_AT[e-1];if(t>=u)return t>u+100?C.dtExt(t,31):C.dtExt(t,31)-(C.dtExt(u,31)-r)*(u+100-t)/100;let n;for(n=0;n<e&&!(t<C.DT_AT[n+5]);n+=5);const F=(t-C.DT_AT[n])/(C.DT_AT[n+5]-C.DT_AT[n])*10,i=F*F,a=i*F;return C.DT_AT[n+1]+C.DT_AT[n+2]*F+C.DT_AT[n+3]*i+C.DT_AT[n+4]*a}static dtT(t){return C.dtCalc(t/365.2425+2e3)/C.SECOND_PER_DAY}static mv(t){let e=8399.71-914*Math.sin(.7848+8328.691425*t+1523e-7*t*t);return e-=179*Math.sin(2.543+15542.7543*t)+160*Math.sin(.1874+7214.0629*t)+62*Math.sin(3.14+16657.3828*t)+34*Math.sin(4.827+16866.9323*t)+22*Math.sin(4.9+23871.4457*t)+12*Math.sin(2.59+14914.4523*t)+7*Math.sin(.23+6585.7609*t)+5*Math.sin(.9+25195.624*t)+5*Math.sin(2.32-7700.3895*t)+5*Math.sin(3.88+8956.9934*t)+5*Math.sin(.49+7771.3771*t),e}static saLonT(t){let e,u=628.3319653318;return e=(t-1.75347-Math.PI)/u,u=C.ev(e),e+=(t-C.saLon(e,10))/u,u=C.ev(e),e+=(t-C.saLon(e,-1))/u,e}static msaLon(t,e,u){return C.mLon(t,e)+-34e-7-(C.eLon(t,u)+C.gxcSunLon(t)+Math.PI)}static msaLonT(t){let e,u=7771.37714500204;return e=(t+1.08472)/u,e+=(t-C.msaLon(e,3,3))/u,u=C.mv(e)-C.ev(e),e+=(t-C.msaLon(e,20,10))/u,e+=(t-C.msaLon(e,-1,60))/u,e}static saLonT2(t){const e=628.3319653318;let u=(t-1.75347-Math.PI)/e;return u-=(5297e-9*u*u+.0334166*Math.cos(4.669257+628.307585*u)+2061e-7*Math.cos(2.67823+628.307585*u)*u)/e,u+=(t-C.eLon(u,8)-Math.PI+(20.5+17.2*Math.sin(2.1824-33.75705*u))/C.SECOND_PER_RAD)/e,u}static msaLonT2(t){let e,u=7771.37714500204;e=(t+1.08472)/u;let r=e*e;e-=(-3309e-8*r+.10976*Math.cos(.784758+8328.6914246*e+152292e-9*r)+.02224*Math.cos(.1874+7214.0628654*e-21848e-8*r)-.03342*Math.cos(4.669257+628.307585*e))/u,r=e*e;const n=C.mLon(e,20)-(4.8950632+628.3319653318*e+5297e-9*r+.0334166*Math.cos(4.669257+628.307585*e)+2061e-7*Math.cos(2.67823+628.307585*e)*e+349e-6*Math.cos(4.6261+1256.61517*e)-20.5/C.SECOND_PER_RAD);return u=7771.38-914*Math.sin(.7848+8328.691425*e+1523e-7*r)-179*Math.sin(2.543+15542.7543*e)-160*Math.sin(.1874+7214.0629*e),e+=(t-n)/u,e}static qiHigh(t){let e=C.saLonT2(t)*36525;e=e-C.dtT(e)+C.ONE_THIRD;const u=(e+.5)%1*C.SECOND_PER_DAY;return(u<1200||u>C.SECOND_PER_DAY-1200)&&(e=C.saLonT(t)*36525-C.dtT(e)+C.ONE_THIRD),e}static shuoHigh(t){let e=C.msaLonT2(t)*36525;e=e-C.dtT(e)+C.ONE_THIRD;const u=(e+.5)%1*C.SECOND_PER_DAY;return(u<1800||u>C.SECOND_PER_DAY-1800)&&(e=C.msaLonT(t)*36525-C.dtT(e)+C.ONE_THIRD),e}static qiLow(t){const e=628.3319653318;let u=(t-4.895062166)/e;u-=(53*u*u+334116*Math.cos(4.67+628.307585*u)+2061*Math.cos(2.678+628.3076*u)*u)/e/1e7;const r=4895062166e-2+6283319653318e-3*u+53*u*u+334166*Math.cos(4.669257+628.307585*u)+3489*Math.cos(4.6261+1256.61517*u)+2060.6*Math.cos(2.67823+628.307585*u)*u-994-834*Math.sin(2.1824-33.75705*u);return u-=(r/1e7-t)/628.332+(32*(u+1.8)*(u+1.8)-20)/C.SECOND_PER_DAY/36525,u*36525+C.ONE_THIRD}static shuoLow(t){const e=7771.37714500204;let u=(t+1.08472)/e;return u-=(-331e-7*u*u+.10976*Math.cos(.785+8328.6914*u)+.02224*Math.cos(.187+7214.0629*u)-.03342*Math.cos(4.669+628.3076*u))/e+(32*(u+1.8)*(u+1.8)-20)/C.SECOND_PER_DAY/36525,u*36525+C.ONE_THIRD}static calcShuo(t){const e=C.SHUO_KB.length;let u=0;const r=14;let n;t+=2451545;const F=C.SHUO_KB[0]-r,i=C.SHUO_KB[e-1]-r,a=2436935;if(t<F||t>=a)u=Math.floor(C.shuoHigh(Math.floor((t+r-2451551)/29.5306)*C.PI_2)+.5);else if(t>=F&&t<i){for(n=0;n<e&&!(t+r<C.SHUO_KB[n+2]);n+=2);u=C.SHUO_KB[n]+C.SHUO_KB[n+1]*Math.floor((t+r-C.SHUO_KB[n])/C.SHUO_KB[n+1]),u=Math.floor(u+.5),u===1683460&&u++,u-=2451545}else if(t>=i&&t<a){u=Math.floor(C.shuoLow(Math.floor((t+r-2451551)/29.5306)*C.PI_2)+.5);const E=Math.floor((t-i)/29.5306),D=C.SB.substring(E,E+1);D==="1"?u+=1:D==="2"&&(u-=1)}return u}static calcQi(t){const e=C.QI_KB.length;let u=0;const r=7;let n;t+=2451545;const F=C.QI_KB[0]-r,i=C.QI_KB[e-1]-r,a=2436935;if(t<F||t>=a)u=Math.floor(C.qiHigh(Math.floor((t+r-2451259)/365.2422*24)*Math.PI/12)+.5);else if(t>=F&&t<i){for(n=0;n<e&&!(t+r<C.QI_KB[n+2]);n+=2);u=C.QI_KB[n]+C.QI_KB[n+1]*Math.floor((t+r-C.QI_KB[n])/C.QI_KB[n+1]),u=Math.floor(u+.5),u===1683460&&u++,u-=2451545}else if(t>=i&&t<a){u=Math.floor(C.qiLow(Math.floor((t+r-2451259)/365.2422*24)*Math.PI/12)+.5);const E=Math.floor((t-i)/365.2422*24),D=C.QB.substring(E,E+1);D==="1"?u+=1:D==="2"&&(u-=1)}return u}static qiAccurate(t){const e=C.saLonT(t)*36525;return e-C.dtT(e)+C.ONE_THIRD}static qiAccurate2(t){const e=Math.PI/12,u=Math.floor((t+293)/365.2422*24)*e,r=C.qiAccurate(u);return r-t>5?C.qiAccurate(u-e):r-t<-5?C.qiAccurate(u+e):r}};s(C,"PI_2",2*Math.PI),s(C,"ONE_THIRD",1/3),s(C,"SECOND_PER_DAY",86400),s(C,"SECOND_PER_RAD",648e3/Math.PI),s(C,"NUT_B",[2.1824,-33.75705,36e-6,-1720,920,3.5069,1256.66393,11e-6,-132,57,1.3375,16799.4182,-51e-6,-23,10,4.3649,-67.5141,72e-6,21,-9,.04,-628.302,0,-14,0,2.36,8328.691,0,7,0,3.46,1884.966,0,-5,2,5.44,16833.175,0,-4,2,3.69,25128.11,0,-3,0,3.55,628.362,0,2,0]),s(C,"DT_AT",[-4e3,108371.7,-13036.8,392,0,-500,17201,-627.82,16.17,-.3413,-150,12200.6,-346.41,5.403,-.1593,150,9113.8,-328.13,-1.647,.0377,500,5707.5,-391.41,.915,.3145,900,2203.4,-283.45,13.034,-.1778,1300,490.1,-57.35,2.085,-.0072,1600,120,-9.81,-1.532,.1403,1700,10.2,-.91,.51,-.037,1800,13.4,-.72,.202,-.0193,1830,7.8,-1.81,.416,-.0247,1860,8.3,-.13,-.406,.0292,1880,-5.4,.32,-.183,.0173,1900,-2.3,2.06,.169,-.0135,1920,21.2,1.69,-.304,.0167,1940,24.2,1.22,-.064,.0031,1960,33.2,.51,.231,-.0109,1980,51,1.29,-.026,.0032,2e3,63.87,.1,0,0,2005,64.7,.21,0,0,2012,66.8,.22,0,0,2018,69,.36,0,0,2028,72.6]),s(C,"XL0",[1e10,20,578,920,1100,1124,1136,1148,1217,1226,1229,1229,1229,1229,1937,2363,2618,2633,2660,2666,17534704567,0,0,334165646,4.669256804,6283.075849991,3489428,4.6261024,12566.1517,349706,2.744118,5753.384885,341757,2.828866,3.523118,313590,3.62767,77713.771468,267622,4.418084,7860.419392,234269,6.135162,3930.209696,132429,.742464,11506.76977,127317,2.037097,529.690965,119917,1.109629,1577.343542,99025,5.23268,5884.92685,90186,2.04505,26.29832,85722,3.50849,398.149,77979,1.17883,5223.69392,75314,2.53339,5507.55324,50526,4.58293,18849.22755,49238,4.20507,775.52261,35666,2.91954,.06731,31709,5.84902,11790.62909,28413,1.89869,796.29801,27104,.31489,10977.0788,24281,.34481,5486.77784,20616,4.80647,2544.31442,20539,1.86948,5573.1428,20226,2.45768,6069.77675,15552,.83306,213.2991,13221,3.41118,2942.46342,12618,1.08303,20.7754,11513,.64545,.98032,10285,.636,4694.00295,10190,.97569,15720.83878,10172,4.2668,7.11355,9921,6.2099,2146.1654,9761,.681,155.4204,8580,5.9832,161000.6857,8513,1.2987,6275.9623,8471,3.6708,71430.6956,7964,1.8079,17260.1547,7876,3.037,12036.4607,7465,1.7551,5088.6288,7387,3.5032,3154.6871,7355,4.6793,801.8209,6963,.833,9437.7629,6245,3.9776,8827.3903,6115,1.8184,7084.8968,5696,2.7843,6286.599,5612,4.3869,14143.4952,5558,3.4701,6279.5527,5199,.1891,12139.5535,5161,1.3328,1748.0164,5115,.2831,5856.4777,4900,.4874,1194.447,4104,5.3682,8429.2413,4094,2.3985,19651.0485,3920,6.1683,10447.3878,3677,6.0413,10213.2855,3660,2.5696,1059.3819,3595,1.7088,2352.8662,3557,1.776,6812.7668,3329,.5931,17789.8456,3041,.4429,83996.8473,3005,2.7398,1349.8674,2535,3.1647,4690.4798,2474,.2148,3.5904,2366,.4847,8031.0923,2357,2.0653,3340.6124,2282,5.222,4705.7323,2189,5.5559,553.5694,2142,1.4256,16730.4637,2109,4.1483,951.7184,2030,.3713,283.8593,1992,5.2221,12168.0027,1986,5.7747,6309.3742,1912,3.8222,23581.2582,1889,5.3863,149854.4001,1790,2.2149,13367.9726,1748,4.5605,135.0651,1622,5.9884,11769.8537,1508,4.1957,6256.7775,1442,4.1932,242.7286,1435,3.7236,38.0277,1397,4.4014,6681.2249,1362,1.8893,7632.9433,1250,1.1305,5.5229,1205,2.6223,955.5997,1200,1.0035,632.7837,1129,.1774,4164.312,1083,.3273,103.0928,1052,.9387,11926.2544,1050,5.3591,1592.596,1033,6.1998,6438.4962,1001,6.0291,5746.2713,980,.999,11371.705,980,5.244,27511.468,938,2.624,5760.498,923,.483,522.577,922,4.571,4292.331,905,5.337,6386.169,862,4.165,7058.598,841,3.299,7234.794,836,4.539,25132.303,813,6.112,4732.031,812,6.271,426.598,801,5.821,28.449,787,.996,5643.179,776,2.957,23013.54,769,3.121,7238.676,758,3.974,11499.656,735,4.386,316.392,731,.607,11513.883,719,3.998,74.782,706,.323,263.084,676,5.911,90955.552,663,3.665,17298.182,653,5.791,18073.705,630,4.717,6836.645,615,1.458,233141.314,612,1.075,19804.827,596,3.321,6283.009,596,2.876,6283.143,555,2.452,12352.853,541,5.392,419.485,531,.382,31441.678,519,4.065,6208.294,513,2.361,10973.556,494,5.737,9917.697,450,3.272,11015.106,449,3.653,206.186,447,2.064,7079.374,435,4.423,5216.58,421,1.906,245.832,413,.921,3738.761,402,.84,20.355,387,1.826,11856.219,379,2.344,3.881,374,2.954,3128.389,370,5.031,536.805,365,1.018,16200.773,365,1.083,88860.057,352,5.978,3894.182,352,2.056,244287.6,351,3.713,6290.189,340,1.106,14712.317,339,.978,8635.942,339,3.202,5120.601,333,.837,6496.375,325,3.479,6133.513,316,5.089,21228.392,316,1.328,10873.986,309,3.646,10.637,303,1.802,35371.887,296,3.397,9225.539,288,6.026,154717.61,281,2.585,14314.168,262,3.856,266.607,262,2.579,22483.849,257,1.561,23543.231,255,3.949,1990.745,251,3.744,10575.407,240,1.161,10984.192,238,.106,7.046,236,4.272,6040.347,234,3.577,10969.965,211,3.714,65147.62,210,.754,13521.751,207,4.228,5650.292,202,.814,170.673,201,4.629,6037.244,200,.381,6172.87,199,3.933,6206.81,199,5.197,6262.3,197,1.046,18209.33,195,1.07,5230.807,195,4.869,36.028,194,4.313,6244.943,192,1.229,709.933,192,5.595,6282.096,192,.602,6284.056,189,3.744,23.878,188,1.904,15.252,188,.867,22003.915,182,3.681,15110.466,181,.491,1.484,179,3.222,39302.097,179,1.259,12559.038,62833196674749,0,0,20605886,2.67823456,6283.07584999,430343,2.635127,12566.1517,42526,1.59047,3.52312,11926,5.79557,26.29832,10898,2.96618,1577.34354,9348,2.5921,18849.2275,7212,1.1385,529.691,6777,1.8747,398.149,6733,4.4092,5507.5532,5903,2.888,5223.6939,5598,2.1747,155.4204,4541,.398,796.298,3637,.4662,775.5226,2896,2.6471,7.1135,2084,5.3414,.9803,1910,1.8463,5486.7778,1851,4.9686,213.2991,1729,2.9912,6275.9623,1623,.0322,2544.3144,1583,1.4305,2146.1654,1462,1.2053,10977.0788,1246,2.8343,1748.0164,1188,3.258,5088.6288,1181,5.2738,1194.447,1151,2.075,4694.003,1064,.7661,553.5694,997,1.303,6286.599,972,4.239,1349.867,945,2.7,242.729,858,5.645,951.718,758,5.301,2352.866,639,2.65,9437.763,610,4.666,4690.48,583,1.766,1059.382,531,.909,3154.687,522,5.661,71430.696,520,1.854,801.821,504,1.425,6438.496,433,.241,6812.767,426,.774,10447.388,413,5.24,7084.897,374,2.001,8031.092,356,2.429,14143.495,350,4.8,6279.553,337,.888,12036.461,337,3.862,1592.596,325,3.4,7632.943,322,.616,8429.241,318,3.188,4705.732,297,6.07,4292.331,295,1.431,5746.271,290,2.325,20.355,275,.935,5760.498,270,4.804,7234.794,253,6.223,6836.645,228,5.003,17789.846,225,5.672,11499.656,215,5.202,11513.883,208,3.955,10213.286,208,2.268,522.577,206,2.224,5856.478,206,2.55,25132.303,203,.91,6256.778,189,.532,3340.612,188,4.735,83996.847,179,1.474,4164.312,178,3.025,5.523,177,3.026,5753.385,159,4.637,3.286,157,6.124,5216.58,155,3.077,6681.225,154,4.2,13367.973,143,1.191,3894.182,138,3.093,135.065,136,4.245,426.598,134,5.765,6040.347,128,3.085,5643.179,127,2.092,6290.189,125,3.077,11926.254,125,3.445,536.805,114,3.244,12168.003,112,2.318,16730.464,111,3.901,11506.77,111,5.32,23.878,105,3.75,7860.419,103,2.447,1990.745,96,.82,3.88,96,4.08,6127.66,91,5.42,206.19,91,.42,7079.37,88,5.17,11790.63,81,.34,9917.7,80,3.89,10973.56,78,2.4,1589.07,78,2.58,11371.7,77,3.98,955.6,77,3.36,36.03,76,1.3,103.09,75,5.18,10969.97,75,4.96,6496.37,73,5.21,38.03,72,2.65,6309.37,70,5.61,3738.76,69,2.6,3496.03,69,.39,15.25,69,2.78,20.78,65,1.13,7058.6,64,4.28,28.45,61,5.63,10984.19,60,.73,419.48,60,5.28,10575.41,58,5.55,17298.18,58,3.19,4732.03,5291887,0,0,871984,1.072097,6283.07585,30913,.86729,12566.1517,2734,.053,3.5231,1633,5.1883,26.2983,1575,3.6846,155.4204,954,.757,18849.228,894,2.057,77713.771,695,.827,775.523,506,4.663,1577.344,406,1.031,7.114,381,3.441,5573.143,346,5.141,796.298,317,6.053,5507.553,302,1.192,242.729,289,6.117,529.691,271,.306,398.149,254,2.28,553.569,237,4.381,5223.694,208,3.754,.98,168,.902,951.718,153,5.759,1349.867,145,4.364,1748.016,134,3.721,1194.447,125,2.948,6438.496,122,2.973,2146.165,110,1.271,161000.686,104,.604,3154.687,100,5.986,6286.599,92,4.8,5088.63,89,5.23,7084.9,83,3.31,213.3,76,3.42,5486.78,71,6.19,4690.48,68,3.43,4694,65,1.6,2544.31,64,1.98,801.82,61,2.48,10977.08,50,1.44,6836.65,49,2.34,1592.6,46,1.31,4292.33,46,3.81,149854.4,43,.04,7234.79,40,4.94,7632.94,39,1.57,71430.7,38,3.17,6309.37,35,.99,6040.35,35,.67,1059.38,31,3.18,2352.87,31,3.55,8031.09,30,1.92,10447.39,30,2.52,6127.66,28,4.42,9437.76,28,2.71,3894.18,27,.67,25132.3,26,5.27,6812.77,25,.55,6279.55,23,1.38,4705.73,22,.64,6256.78,20,6.07,640.88,28923,5.84384,6283.07585,3496,0,0,1682,5.4877,12566.1517,296,5.196,155.42,129,4.722,3.523,71,5.3,18849.23,64,5.97,242.73,40,3.79,553.57,11408,3.14159,0,772,4.134,6283.076,77,3.84,12566.15,42,.42,155.42,88,3.14,0,17,2.77,6283.08,5,2.01,155.42,3,2.21,12566.15,27962,3.1987,84334.66158,10164,5.42249,5507.55324,8045,3.8801,5223.6939,4381,3.7044,2352.8662,3193,4.0003,1577.3435,2272,3.9847,1047.7473,1814,4.9837,6283.0758,1639,3.5646,5856.4777,1444,3.7028,9437.7629,1430,3.4112,10213.2855,1125,4.8282,14143.4952,1090,2.0857,6812.7668,1037,4.0566,71092.8814,971,3.473,4694.003,915,1.142,6620.89,878,4.44,5753.385,837,4.993,7084.897,770,5.554,167621.576,719,3.602,529.691,692,4.326,6275.962,558,4.41,7860.419,529,2.484,4705.732,521,6.25,18073.705,903,3.897,5507.553,618,1.73,5223.694,380,5.244,2352.866,166,1.627,84334.662,10001398880,0,0,167069963,3.098463508,6283.075849991,1395602,3.0552461,12566.1517,308372,5.198467,77713.771468,162846,1.173877,5753.384885,157557,2.846852,7860.419392,92480,5.45292,11506.76977,54244,4.56409,3930.2097,47211,3.661,5884.92685,34598,.96369,5507.55324,32878,5.89984,5223.69392,30678,.29867,5573.1428,24319,4.2735,11790.62909,21183,5.84715,1577.34354,18575,5.02194,10977.0788,17484,3.01194,18849.22755,10984,5.05511,5486.77784,9832,.8868,6069.7768,8650,5.6896,15720.8388,8583,1.2708,161000.6857,6490,.2725,17260.1547,6292,.9218,529.691,5706,2.0137,83996.8473,5574,5.2416,71430.6956,4938,3.245,2544.3144,4696,2.5781,775.5226,4466,5.5372,9437.7629,4252,6.0111,6275.9623,3897,5.3607,4694.003,3825,2.3926,8827.3903,3749,.8295,19651.0485,3696,4.9011,12139.5535,3566,1.6747,12036.4607,3454,1.8427,2942.4634,3319,.2437,7084.8968,3192,.1837,5088.6288,3185,1.7778,398.149,2846,1.2134,6286.599,2779,1.8993,6279.5527,2628,4.589,10447.3878,2460,3.7866,8429.2413,2393,4.996,5856.4777,2359,.2687,796.298,2329,2.8078,14143.4952,2210,1.95,3154.6871,2035,4.6527,2146.1654,1951,5.3823,2352.8662,1883,.6731,149854.4001,1833,2.2535,23581.2582,1796,.1987,6812.7668,1731,6.152,16730.4637,1717,4.4332,10213.2855,1619,5.2316,17789.8456,1381,5.1896,8031.0923,1364,3.6852,4705.7323,1314,.6529,13367.9726,1041,4.3329,11769.8537,1017,1.5939,4690.4798,998,4.201,6309.374,966,3.676,27511.468,874,6.064,1748.016,779,3.674,12168.003,771,.312,7632.943,756,2.626,6256.778,746,5.648,11926.254,693,2.924,6681.225,680,1.423,23013.54,674,.563,3340.612,663,5.661,11371.705,659,3.136,801.821,648,2.65,19804.827,615,3.029,233141.314,612,5.134,1194.447,563,4.341,90955.552,552,2.091,17298.182,534,5.1,31441.678,531,2.407,11499.656,523,4.624,6438.496,513,5.324,11513.883,477,.256,11856.219,461,1.722,7234.794,458,3.766,6386.169,458,4.466,5746.271,423,1.055,5760.498,422,1.557,7238.676,415,2.599,7058.598,401,3.03,1059.382,397,1.201,1349.867,379,4.907,4164.312,360,5.707,5643.179,352,3.626,244287.6,348,.761,10973.556,342,3.001,4292.331,336,4.546,4732.031,334,3.138,6836.645,324,4.164,9917.697,316,1.691,11015.106,307,.238,35371.887,298,1.306,6283.143,298,1.75,6283.009,293,5.738,16200.773,286,5.928,14712.317,281,3.515,21228.392,280,5.663,8635.942,277,.513,26.298,268,4.207,18073.705,266,.9,12352.853,260,2.962,25132.303,255,2.477,6208.294,242,2.8,709.933,231,1.054,22483.849,229,1.07,14314.168,216,1.314,154717.61,215,6.038,10873.986,200,.561,7079.374,198,2.614,951.718,197,4.369,167283.762,186,2.861,5216.58,183,1.66,39302.097,183,5.912,3738.761,175,2.145,6290.189,173,2.168,10575.407,171,3.702,1592.596,171,1.343,3128.389,164,5.55,6496.375,164,5.856,10984.192,161,1.998,10969.965,161,1.909,6133.513,157,4.955,25158.602,154,6.216,23543.231,153,5.357,13521.751,150,5.77,18209.33,150,5.439,155.42,139,1.778,9225.539,139,1.626,5120.601,128,2.46,13916.019,123,.717,143571.324,122,2.654,88860.057,121,4.414,3894.182,121,1.192,3.523,120,4.03,553.569,119,1.513,17654.781,117,3.117,14945.316,113,2.698,6040.347,110,3.085,43232.307,109,.998,955.6,108,2.939,17256.632,107,5.285,65147.62,103,.139,11712.955,103,5.85,213.299,102,3.046,6037.244,101,2.842,8662.24,100,3.626,6262.3,98,2.36,6206.81,98,5.11,6172.87,98,2,15110.47,97,2.67,5650.29,97,2.75,6244.94,96,4.02,6282.1,96,5.31,6284.06,92,.1,29088.81,85,3.26,20426.57,84,2.6,28766.92,81,3.58,10177.26,80,5.81,5230.81,78,2.53,16496.36,77,4.06,6127.66,73,.04,5481.25,72,5.96,12559.04,72,5.92,4136.91,71,5.49,22003.91,70,3.41,7.11,69,.62,11403.68,69,3.9,1589.07,69,1.96,12416.59,69,4.51,426.6,67,1.61,11087.29,66,4.5,47162.52,66,5.08,283.86,66,4.32,16858.48,65,1.04,6062.66,64,1.59,18319.54,63,5.7,45892.73,63,4.6,66567.49,63,3.82,13517.87,62,2.62,11190.38,61,1.54,33019.02,60,5.58,10344.3,60,5.38,316428.23,60,5.78,632.78,59,6.12,9623.69,57,.16,17267.27,57,3.86,6076.89,57,1.98,7668.64,56,4.78,20199.09,55,4.56,18875.53,55,3.51,17253.04,54,3.07,226858.24,54,4.83,18422.63,53,5.02,12132.44,52,3.63,5333.9,52,.97,155427.54,51,3.36,20597.24,50,.99,11609.86,50,2.21,1990.75,48,1.62,12146.67,48,1.17,12569.67,47,4.62,5436.99,47,1.81,12562.63,47,.59,21954.16,47,.76,7342.46,46,.27,4590.91,46,3.77,156137.48,45,5.66,10454.5,44,5.84,3496.03,43,.24,17996.03,41,5.93,51092.73,41,4.21,12592.45,40,5.14,1551.05,40,5.28,15671.08,39,3.69,18052.93,39,4.94,24356.78,38,2.72,11933.37,38,5.23,7477.52,38,4.99,9779.11,37,3.7,9388.01,37,4.44,4535.06,36,2.16,28237.23,36,2.54,242.73,36,.22,5429.88,35,6.15,19800.95,35,2.92,36949.23,34,5.63,2379.16,34,5.73,16460.33,34,5.11,5849.36,33,6.19,6268.85,10301861,1.1074897,6283.07584999,172124,1.064423,12566.1517,70222,3.14159,0,3235,1.0217,18849.2275,3080,2.8435,5507.5532,2497,1.3191,5223.6939,1849,1.4243,1577.3435,1008,5.9138,10977.0788,865,1.42,6275.962,863,.271,5486.778,507,1.686,5088.629,499,6.014,6286.599,467,5.987,529.691,440,.518,4694.003,410,1.084,9437.763,387,4.75,2544.314,375,5.071,796.298,352,.023,83996.847,344,.949,71430.696,341,5.412,775.523,322,6.156,2146.165,286,5.484,10447.388,284,3.42,2352.866,255,6.132,6438.496,252,.243,398.149,243,3.092,4690.48,225,3.689,7084.897,220,4.952,6812.767,219,.42,8031.092,209,1.282,1748.016,193,5.314,8429.241,185,1.82,7632.943,175,3.229,6279.553,173,1.537,4705.732,158,4.097,11499.656,158,5.539,3154.687,150,3.633,11513.883,148,3.222,7234.794,147,3.653,1194.447,144,.817,14143.495,135,6.151,5746.271,134,4.644,6836.645,128,2.693,1349.867,123,5.65,5760.498,118,2.577,13367.973,113,3.357,17789.846,110,4.497,4292.331,108,5.828,12036.461,102,5.621,6256.778,99,1.14,1059.38,98,.66,5856.48,93,2.32,10213.29,92,.77,16730.46,88,1.5,11926.25,86,1.42,5753.38,85,.66,155.42,81,1.64,6681.22,80,4.11,951.72,66,4.55,5216.58,65,.98,25132.3,64,4.19,6040.35,64,.52,6290.19,63,1.51,5643.18,59,6.18,4164.31,57,2.3,10973.56,55,2.32,11506.77,55,2.2,1592.6,55,5.27,3340.61,54,5.54,553.57,53,5.04,9917.7,53,.92,11371.7,52,3.98,17298.18,52,3.6,10969.97,49,5.91,3894.18,49,2.51,6127.66,48,1.67,12168,46,.31,801.82,42,3.7,10575.41,42,4.05,10984.19,40,2.17,7860.42,40,4.17,26.3,38,5.82,7058.6,37,3.39,6496.37,36,1.08,6309.37,36,5.34,7079.37,34,3.62,11790.63,32,.32,16200.77,31,4.24,3738.76,29,4.55,11856.22,29,1.26,8635.94,27,3.45,5884.93,26,5.08,10177.26,26,5.38,21228.39,24,2.26,11712.96,24,1.05,242.73,24,5.59,6069.78,23,3.63,6284.06,23,1.64,4732.03,22,3.46,213.3,21,1.05,3496.03,21,3.92,13916.02,21,4.01,5230.81,20,5.16,12352.85,20,.69,1990.75,19,2.73,6062.66,19,5.01,11015.11,18,6.04,6283.01,18,2.85,7238.68,18,5.6,6283.14,18,5.16,17253.04,18,2.54,14314.17,17,1.58,7.11,17,.98,3930.21,17,4.75,17267.27,16,2.19,6076.89,16,2.19,18073.7,16,6.12,3.52,16,4.61,9623.69,16,3.4,16496.36,15,.19,9779.11,15,5.3,13517.87,15,4.26,3128.39,15,.81,709.93,14,.5,25158.6,14,4.38,4136.91,13,.98,65147.62,13,3.31,154717.61,13,2.11,1589.07,13,1.92,22483.85,12,6.03,9225.54,12,1.53,12559.04,12,5.82,6282.1,12,5.61,5642.2,12,2.38,167283.76,12,.39,12132.44,12,3.98,4686.89,12,5.81,12569.67,12,.56,5849.36,11,.45,6172.87,11,5.8,16858.48,11,6.22,12146.67,11,2.27,5429.88,435939,5.784551,6283.07585,12363,5.57935,12566.1517,1234,3.1416,0,879,3.628,77713.771,569,1.87,5573.143,330,5.47,18849.228,147,4.48,5507.553,110,2.842,161000.686,101,2.815,5223.694,85,3.11,1577.34,65,5.47,775.52,61,1.38,6438.5,50,4.42,6286.6,47,3.66,7084.9,46,5.39,149854.4,42,.9,10977.08,40,3.2,5088.63,35,1.81,5486.78,32,5.35,3154.69,30,3.52,796.3,29,4.62,4690.48,28,1.84,4694,27,3.14,71430.7,27,6.17,6836.65,26,1.42,2146.17,25,2.81,1748.02,24,2.18,155.42,23,4.76,7234.79,21,3.38,7632.94,21,.22,4705.73,20,4.22,1349.87,20,2.01,1194.45,20,4.58,529.69,19,1.59,6309.37,18,5.7,6040.35,18,6.03,4292.33,17,2.9,9437.76,17,2,8031.09,17,5.78,83996.85,16,.05,2544.31,15,.95,6127.66,14,.36,10447.39,14,1.48,2352.87,13,.77,553.57,13,5.48,951.72,13,5.27,6279.55,13,3.76,6812.77,11,5.41,6256.78,10,.68,1592.6,10,4.95,398.15,10,1.15,3894.18,10,5.2,244287.6,10,1.94,11856.22,9,5.39,25132.3,8,6.18,1059.38,8,.69,8429.24,8,5.85,242.73,7,5.26,14143.5,7,.52,801.82,6,2.24,8635.94,6,4,13367.97,6,2.77,90955.55,6,5.17,7058.6,5,1.46,233141.31,5,4.13,7860.42,5,3.91,26.3,5,3.89,12036.46,5,5.58,6290.19,5,5.54,1990.75,5,.83,11506.77,5,6.22,6681.22,4,5.26,10575.41,4,1.91,7477.52,4,.43,10213.29,4,1.09,709.93,4,5.09,11015.11,4,4.22,88860.06,4,3.57,7079.37,4,1.98,6284.06,4,3.93,10973.56,4,6.18,9917.7,4,.36,10177.26,4,2.75,3738.76,4,3.33,5643.18,4,5.36,25158.6,14459,4.27319,6283.07585,673,3.917,12566.152,77,0,0,25,3.73,18849.23,4,2.8,6286.6,386,2.564,6283.076,31,2.27,12566.15,5,3.44,5573.14,2,2.05,18849.23,1,2.06,77713.77,1,4.41,161000.69,1,3.82,149854.4,1,4.08,6127.66,1,5.26,6438.5,9,1.22,6283.08,1,.66,12566.15]),s(C,"XL1",[[22639.586,.78475822,8328.691424623,1.5229241,25.0719,-.123598,4586.438,.1873974,7214.06286536,-2.184756,-18.86,.0828,2369.914,2.542952,15542.75428998,-.661832,6.212,-.0408,769.026,3.140313,16657.38284925,3.04585,50.144,-.2472,666.418,1.527671,628.30195521,-.02664,.062,-.0054,411.596,4.826607,16866.932315,-1.28012,-1.07,-.0059,211.656,4.115028,-1114.6285593,-3.70768,-43.93,.2064,205.436,.230523,6585.7609101,-2.15812,-18.92,.0882,191.956,4.898507,23871.4457146,.86109,31.28,-.164,164.729,2.586078,14914.4523348,-.6352,6.15,-.035,147.321,5.4553,-7700.3894694,-1.5496,-25.01,.118,124.988,.48608,7771.377145,-.3309,3.11,-.02,109.38,3.88323,8956.9933798,1.4963,25.13,-.129,55.177,5.57033,-1324.178025,.6183,7.3,-.035,45.1,.89898,25195.62374,.2428,24,-.129,39.533,3.81213,-8538.24089,2.803,26.1,-.118,38.43,4.30115,22756.817155,-2.8466,-12.6,.042,36.124,5.49587,24986.074274,4.5688,75.2,-.371,30.773,1.94559,14428.125731,-4.3695,-37.7,.166,28.397,3.28586,7842.364821,-2.2114,-18.8,.077,24.358,5.64142,16171.056245,-.6885,6.3,-.046,18.585,4.41371,-557.31428,-1.8538,-22,.1,17.954,3.58454,8399.6791,-.3576,3.2,-.03,14.53,4.9416,23243.143759,.888,31.2,-.16,14.38,.9709,32200.137139,2.384,56.4,-.29,14.251,5.7641,-2.3012,1.523,25.1,-.12,13.899,.3735,31085.50858,-1.324,12.4,-.08,13.194,1.7595,-9443.319984,-5.231,-69,.33,9.679,3.0997,-16029.080894,-3.072,-50.1,.24,9.366,.3016,24080.99518,-3.465,-19.9,.08,8.606,4.1582,-1742.930514,-3.681,-44,.21,8.453,2.8416,16100.06857,1.192,28.2,-.14,8.05,2.6292,14286.15038,-.609,6.1,-.03,7.63,6.2388,17285.684804,3.019,50.2,-.25,7.447,1.4845,1256.60391,-.053,.1,-.01,7.371,.2736,5957.458955,-2.131,-19,.09,7.063,5.6715,33.757047,-.308,-3.6,.02,6.383,4.7843,7004.5134,2.141,32.4,-.16,5.742,2.6572,32409.686605,-1.942,5,-.05,4.374,4.3443,22128.5152,-2.82,-13,.05,3.998,3.2545,33524.31516,1.766,49,-.25,3.21,2.2443,14985.44001,-2.516,-16,.06,2.915,1.7138,24499.74767,.834,31,-.17,2.732,1.9887,13799.82378,-4.343,-38,.17,2.568,5.4122,-7072.08751,-1.576,-25,.11,2.521,3.2427,8470.66678,-2.238,-19,.07,2.489,4.0719,-486.3266,-3.734,-44,.2,2.146,5.6135,-1952.47998,.645,7,-.03,1.978,2.7291,39414.2,.199,37,-.21,1.934,1.5682,33314.7657,6.092,100,-.5,1.871,.4166,30457.20662,-1.297,12,-.1,1.753,2.0582,-8886.0057,-3.38,-47,.2,1.437,2.386,-695.87607,.59,7,0,1.373,3.026,-209.54947,4.33,51,-.2,1.262,5.94,16728.37052,1.17,28,-.1,1.224,6.172,6656.74859,-4.04,-41,.2,1.187,5.873,6099.43431,-5.89,-63,.3,1.177,1.014,31571.83518,2.41,56,-.3,1.162,3.84,9585.29534,1.47,25,-.1,1.143,5.639,8364.73984,-2.18,-19,.1,1.078,1.229,70.98768,-1.88,-22,.1,1.059,3.326,40528.82856,3.91,81,-.4,.99,5.013,40738.37803,-.42,30,-.2,.948,5.687,-17772.01141,-6.75,-94,.5,.876,.298,-.35232,0,0,0,.822,2.994,393.02097,0,0,0,.788,1.836,8326.39022,3.05,50,-.2,.752,4.985,22614.8418,.91,31,-.2,.74,2.875,8330.99262,0,0,0,.669,.744,-24357.77232,-4.6,-75,.4,.644,1.314,8393.12577,-2.18,-19,.1,.639,5.888,575.33849,0,0,0,.635,1.116,23385.11911,-2.87,-13,0,.584,5.197,24428.75999,2.71,53,-.3,.583,3.513,-9095.55517,.95,4,0,.572,6.059,29970.88002,-5.03,-32,.1,.565,2.96,.32863,1.52,25,-.1,.561,4.001,-17981.56087,-2.43,-43,.2,.557,.529,7143.07519,-.3,3,0,.546,2.311,25614.37623,4.54,75,-.4,.536,4.229,15752.30376,-4.99,-45,.2,.493,3.316,-8294.9344,-1.83,-29,.1,.491,1.744,8362.4485,1.21,21,-.1,.478,1.803,-10071.6219,-5.2,-69,.3,.454,.857,15333.2048,3.66,57,-.3,.445,2.071,8311.7707,-2.18,-19,.1,.426,.345,23452.6932,-3.44,-20,.1,.42,4.941,33733.8646,-2.56,-2,0,.413,1.642,17495.2343,-1.31,-1,0,.404,1.458,23314.1314,-.99,9,-.1,.395,2.132,38299.5714,-3.51,-6,0,.382,2.7,31781.3846,-1.92,5,0,.375,4.827,6376.2114,2.17,32,-.2,.361,3.867,16833.1753,-.97,3,0,.358,5.044,15056.4277,-4.4,-38,.2,.35,5.157,-8257.7037,-3.4,-47,.2,.344,4.233,157.7344,0,0,0,.34,2.672,13657.8484,-.58,6,0,.329,5.61,41853.0066,3.29,74,-.4,.325,5.895,-39.8149,0,0,0,.309,4.387,21500.2132,-2.79,-13,.1,.302,1.278,786.0419,0,0,0,.302,5.341,-24567.3218,-.27,-24,.1,.301,1.045,5889.8848,-1.57,-12,0,.294,4.201,-2371.2325,-3.65,-44,.2,.293,3.704,21642.1886,-6.55,-57,.2,.29,4.069,32828.4391,2.36,56,-.3,.289,3.472,31713.8105,-1.35,12,-.1,.285,5.407,-33.7814,.31,4,0,.283,5.998,-16.9207,-3.71,-44,.2,.283,2.772,38785.898,.23,37,-.2,.274,5.343,15613.742,-2.54,-16,.1,.263,3.997,25823.9257,.22,24,-.1,.254,.6,24638.3095,-1.61,2,0,.253,1.344,6447.1991,.29,10,-.1,.25,.887,141.9754,-3.76,-44,.2,.247,.317,5329.157,-2.1,-19,.1,.245,.141,36.0484,-3.71,-44,.2,.231,2.287,14357.1381,-2.49,-16,.1,.227,5.158,2.6298,0,0,0,.219,5.085,47742.8914,1.72,63,-.3,.211,2.145,6638.7244,-2.18,-19,.1,.201,4.415,39623.7495,-4.13,-14,0,.194,2.091,588.4927,0,0,0,.193,3.057,-15400.7789,-3.1,-50,0,.186,5.598,16799.3582,-.72,6,0,.185,3.886,1150.677,0,0,0,.183,1.619,7178.0144,1.52,25,0,.181,2.635,8328.3391,1.52,25,0,.181,2.077,8329.0437,1.52,25,0,.179,3.215,-9652.8694,-.9,-18,0,.176,1.716,-8815.018,-5.26,-69,0,.175,5.673,550.7553,0,0,0,.17,2.06,31295.058,-5.6,-39,0,.167,1.239,7211.7617,-.7,6,0,.165,4.499,14967.4158,-.7,6,0,.164,3.595,15540.4531,.9,31,0,.164,4.237,522.3694,0,0,0,.163,4.633,15545.0555,-2.2,-19,0,.161,.478,6428.0209,-2.2,-19,0,.158,2.03,13171.5218,-4.3,-38,0,.157,2.28,7216.3641,-3.7,-44,0,.154,5.65,7935.6705,1.5,25,0,.152,.46,29828.9047,-1.3,12,0,.151,1.19,-.7113,0,0,0,.15,1.42,23942.4334,-1,9,0,.144,2.75,7753.3529,1.5,25,0,.137,2.08,7213.7105,-2.2,-19,0,.137,1.44,7214.4152,-2.2,-19,0,.136,4.46,-1185.6162,-1.8,-22,0,.136,3.03,8000.1048,-2.2,-19,0,.134,2.83,14756.7124,-.7,6,0,.131,5.05,6821.0419,-2.2,-19,0,.128,5.99,-17214.6971,-4.9,-72,0,.127,5.35,8721.7124,1.5,25,0,.126,4.49,46628.2629,-2,19,0,.125,5.94,7149.6285,1.5,25,0,.124,1.09,49067.0695,1.1,55,0,.121,2.88,15471.7666,1.2,28,0,.111,3.92,41643.4571,7.6,125,-1,.11,1.96,8904.0299,1.5,25,0,.106,3.3,-18.0489,-2.2,-19,0,.105,2.3,-4.931,1.5,25,0,.104,2.22,-6.559,-1.9,-22,0,.101,1.44,1884.9059,-.1,0,0,.1,5.92,5471.1324,-5.9,-63,0,.099,1.12,15149.7333,-.7,6,0,.096,4.73,15508.9972,-.4,10,0,.095,5.18,7230.9835,1.5,25,0,.093,3.37,39900.5266,3.9,81,0,.092,2.01,25057.0619,2.7,53,0,.092,1.21,-79.6298,0,0,0,.092,1.65,-26310.2523,-4,-68,0,.091,1.01,42062.5561,-1,23,0,.09,6.1,29342.5781,-5,-32,0,.09,4.43,15542.402,-.7,6,0,.09,3.8,15543.1066,-.7,6,0,.089,4.15,6063.3859,-2.2,-19,0,.086,4.03,52.9691,0,0,0,.085,.49,47952.4409,-2.6,11,0,.085,1.6,7632.8154,2.1,32,0,.084,.22,14392.0773,-.7,6,0,.083,6.22,6028.4466,-4,-41,0,.083,.63,-7909.9389,2.8,26,0,.083,5.2,-77.5523,0,0,0,.082,2.74,8786.1467,-2.2,-19,0,.08,2.43,9166.5428,-2.8,-26,0,.08,3.7,-25405.1732,4.1,27,0,.078,5.68,48857.52,5.4,106,-1,.077,1.85,8315.5735,-2.2,-19,0,.075,5.46,-18191.1103,1.9,8,0,.075,1.41,-16238.6304,1.3,1,0,.074,5.06,40110.0761,-.4,30,0,.072,2.1,64.4343,-3.7,-44,0,.071,2.17,37671.2695,-3.5,-6,0,.069,1.71,16693.4313,-.7,6,0,.069,3.33,-26100.7028,-8.3,-119,1,.068,1.09,8329.4028,1.5,25,0,.068,3.62,8327.9801,1.5,25,0,.068,2.41,16833.1509,-1,3,0,.067,3.4,24709.2971,-3.5,-20,0,.067,1.65,8346.7156,-.3,3,0,.066,2.61,22547.2677,1.5,39,0,.066,3.5,15576.5113,-1,3,0,.065,5.76,33037.9886,-2,5,0,.065,4.58,8322.1325,-.3,3,0,.065,6.2,17913.9868,3,50,0,.065,1.5,22685.8295,-1,9,0,.065,2.37,7180.3058,-1.9,-15,0,.064,1.06,30943.5332,2.4,56,0,.064,1.89,8288.8765,1.5,25,0,.064,4.7,6.0335,.3,4,0,.063,2.83,8368.5063,1.5,25,0,.063,5.66,-2580.7819,.7,7,0,.062,3.78,7056.3285,-2.2,-19,0,.061,1.49,8294.91,1.8,29,0,.061,.12,-10281.1714,-.9,-18,0,.061,3.06,-8362.4729,-1.2,-21,0,.061,4.43,8170.9571,1.5,25,0,.059,5.78,-13.1179,-3.7,-44,0,.059,5.97,6625.5702,-2.2,-19,0,.058,5.01,-.508,-.3,0,0,.058,2.73,7161.0938,-2.2,-19,0,.057,.19,7214.0629,-2.2,-19,0,.057,4,22199.5029,-4.7,-35,0,.057,5.38,8119.142,5.8,76,0,.056,1.07,7542.6495,1.5,25,0,.056,.28,8486.4258,1.5,25,0,.054,4.19,16655.0816,4.6,75,0,.053,.72,7267.032,-2.2,-19,0,.053,3.12,12.6192,.6,7,0,.052,2.99,-32896.013,-1.8,-49,0,.052,3.46,1097.708,0,0,0,.051,5.37,-6443.786,-1.6,-25,0,.051,1.35,7789.401,-2.2,-19,0,.051,5.83,40042.502,.2,38,0,.051,3.63,9114.733,1.5,25,0,.05,1.51,8504.484,-2.5,-22,0,.05,5.23,16659.684,1.5,25,0,.05,1.15,7247.82,-2.5,-23,0,.047,.25,-1290.421,.3,0,0,.047,4.67,-32686.464,-6.1,-100,0,.047,3.49,548.678,0,0,0,.047,2.37,6663.308,-2.2,-19,0,.046,.98,1572.084,0,0,0,.046,2.04,14954.262,-.7,6,0,.046,3.72,6691.693,-2.2,-19,0,.045,6.19,-235.287,0,0,0,.044,2.96,32967.001,-.1,27,0,.044,3.82,-1671.943,-5.6,-66,0,.043,5.82,1179.063,0,0,0,.043,.07,34152.617,1.7,49,0,.043,3.71,6514.773,-.3,0,0,.043,5.62,15.732,-2.5,-23,0,.043,5.8,8351.233,-2.2,-19,0,.042,.27,7740.199,1.5,25,0,.042,6.14,15385.02,-.7,6,0,.042,6.13,7285.051,-4.1,-41,0,.041,1.27,32757.451,4.2,78,0,.041,4.46,8275.722,1.5,25,0,.04,.23,8381.661,1.5,25,0,.04,5.87,-766.864,2.5,29,0,.04,1.66,254.431,0,0,0,.04,.4,9027.981,-.4,0,0,.04,2.96,7777.936,1.5,25,0,.039,4.67,33943.068,6.1,100,0,.039,3.52,8326.062,1.5,25,0,.039,3.75,21013.887,-6.5,-57,0,.039,5.6,606.978,0,0,0,.039,1.19,8331.321,1.5,25,0,.039,2.84,7211.433,-2.2,-19,0,.038,.67,7216.693,-2.2,-19,0,.038,6.22,25161.867,.6,28,0,.038,4.4,7806.322,1.5,25,0,.038,4.16,9179.168,-2.2,-19,0,.037,4.73,14991.999,-.7,6,0,.036,.35,67.514,-.6,-7,0,.036,3.7,25266.611,-1.6,0,0,.036,5.39,16328.796,-.7,6,0,.035,1.44,7174.248,-2.2,-19,0,.035,5,15684.73,-4.4,-38,0,.035,.39,-15.419,-2.2,-19,0,.035,6.07,15020.385,-.7,6,0,.034,6.01,7371.797,-2.2,-19,0,.034,.96,-16623.626,-3.4,-54,0,.033,6.24,9479.368,1.5,25,0,.033,3.21,23661.896,5.2,82,0,.033,4.06,8311.418,-2.2,-19,0,.033,2.4,1965.105,0,0,0,.033,5.17,15489.785,-.7,6,0,.033,5.03,21986.54,.9,31,0,.033,4.1,16691.14,2.7,46,0,.033,5.13,47114.589,1.7,63,0,.033,4.45,8917.184,1.5,25,0,.033,4.23,2.078,0,0,0,.032,2.33,75.251,1.5,25,0,.032,2.1,7253.878,-2.2,-19,0,.032,3.11,-.224,1.5,25,0,.032,4.43,16640.462,-.7,6,0,.032,5.68,8328.363,0,0,0,.031,5.32,8329.02,3,50,0,.031,3.7,16118.093,-.7,6,0,.03,3.67,16721.817,-.7,6,0,.03,5.27,-1881.492,-1.2,-15,0,.03,5.72,8157.839,-2.2,-19,0,.029,5.73,-18400.313,-6.7,-94,0,.029,2.76,16,-2.2,-19,0,.029,1.75,8879.447,1.5,25,0,.029,.32,8851.061,1.5,25,0,.029,.9,14704.903,3.7,57,0,.028,2.9,15595.723,-.7,6,0,.028,5.88,16864.631,.2,24,0,.028,.63,16869.234,-2.8,-26,0,.028,4.04,-18609.863,-2.4,-43,0,.027,5.83,6727.736,-5.9,-63,0,.027,6.12,418.752,4.3,51,0,.027,.14,41157.131,3.9,81,0,.026,3.8,15.542,0,0,0,.026,1.68,50181.698,4.8,99,-1,.026,.32,315.469,0,0,0,.025,5.67,19.188,.3,0,0,.025,3.16,62.133,-2.2,-19,0,.025,3.76,15502.939,-.7,6,0,.025,4.53,45999.961,-2,19,0,.024,3.21,837.851,-4.4,-51,0,.024,2.82,38157.596,.3,37,0,.024,5.21,15540.124,-.7,6,0,.024,.26,14218.576,0,13,0,.024,3.01,15545.384,-.7,6,0,.024,1.16,-17424.247,-.6,-21,0,.023,2.34,-67.574,.6,7,0,.023,2.44,18.024,-1.9,-22,0,.023,3.7,469.4,0,0,0,.023,.72,7136.511,-2.2,-19,0,.023,4.5,15582.569,-.7,6,0,.023,2.8,-16586.395,-4.9,-72,0,.023,1.51,80.182,0,0,0,.023,1.09,5261.583,-1.5,-12,0,.023,.56,54956.954,-.5,44,0,.023,4.01,8550.86,-2.2,-19,0,.023,4.46,38995.448,-4.1,-14,0,.023,3.82,2358.126,0,0,0,.022,3.77,32271.125,.5,34,0,.022,.82,15935.775,-.7,6,0,.022,1.07,24013.421,-2.9,-13,0,.022,.4,8940.078,-2.2,-19,0,.022,2.06,15700.489,-.7,6,0,.022,4.27,15124.002,-5,-45,0,.021,1.16,56071.583,3.2,88,0,.021,5.58,9572.189,-2.2,-19,0,.02,1.7,-17.273,-3.7,-44,0,.02,3.05,214.617,0,0,0,.02,4.41,8391.048,-2.2,-19,0,.02,5.95,23869.145,2.4,56,0,.02,.42,40947.927,-4.7,-21,0,.019,1.39,5818.897,.3,10,0,.019,.71,23873.747,-.7,6,0,.019,2.81,7291.615,-2.2,-19,0,.019,5.09,8428.018,-2.2,-19,0,.019,4.14,6518.187,-1.6,-12,0,.019,3.85,21.33,0,0,0,.018,.66,14445.046,-.7,6,0,.018,1.65,.966,-4,-48,0,.018,5.64,-17143.709,-6.8,-94,0,.018,6.01,7736.432,-2.2,-19,0,.018,2.74,31153.083,-1.9,5,0,.018,4.58,6116.355,-2.2,-19,0,.018,2.28,46.401,.3,0,0,.018,3.8,10213.597,1.4,25,0,.018,2.84,56281.132,-1.1,36,0,.018,3.53,8249.062,1.5,25,0,.017,4.43,20871.911,-3,-13,0,.017,4.44,627.596,0,0,0,.017,1.85,628.308,0,0,0,.017,1.19,8408.321,2,25,0,.017,1.95,7214.056,-2,-19,0,.017,1.57,7214.07,-2,-19,0,.017,1.65,13870.811,-6,-60,0,.017,.3,22.542,-4,-44,0,.017,2.62,-119.445,0,0,0,.016,4.87,5747.909,2,32,0,.016,4.45,14339.108,-1,6,0,.016,1.83,41366.68,0,30,0,.016,4.53,16309.618,-3,-23,0,.016,2.54,15542.754,-1,6,0,.016,6.05,1203.646,0,0,0,.015,5.2,2751.147,0,0,0,.015,1.8,-10699.924,-5,-69,0,.015,.4,22824.391,-3,-20,0,.015,2.1,30666.756,-6,-39,0,.015,2.1,6010.417,-2,-19,0,.015,.7,-23729.47,-5,-75,0,.015,1.4,14363.691,-1,6,0,.015,5.8,16900.689,-2,0,0,.015,5.2,23800.458,3,53,0,.015,5.3,6035,-2,-19,0,.015,1.2,8251.139,2,25,0,.015,3.6,-8.86,0,0,0,.015,.8,882.739,0,0,0,.015,3,1021.329,0,0,0,.015,.6,23296.107,1,31,0,.014,5.4,7227.181,2,25,0,.014,.1,7213.352,-2,-19,0,.014,4,15506.706,3,50,0,.014,3.4,7214.774,-2,-19,0,.014,4.6,6665.385,-2,-19,0,.014,.1,-8.636,-2,-22,0,.014,3.1,15465.202,-1,6,0,.014,4.9,508.863,0,0,0,.014,3.5,8406.244,2,25,0,.014,1.3,13313.497,-8,-82,0,.014,2.8,49276.619,-3,0,0,.014,.1,30528.194,-3,-10,0,.013,1.7,25128.05,1,31,0,.013,2.9,14128.405,-1,6,0,.013,3.4,57395.761,3,80,0,.013,2.7,13029.546,-1,6,0,.013,3.9,7802.556,-2,-19,0,.013,1.6,8258.802,-2,-19,0,.013,2.2,8417.709,-2,-19,0,.013,.7,9965.21,-2,-19,0,.013,3.4,50391.247,0,48,0,.013,3,7134.433,-2,-19,0,.013,2.9,30599.182,-5,-31,0,.013,3.6,-9723.857,1,0,0,.013,4.8,7607.084,-2,-19,0,.012,.8,23837.689,1,35,0,.012,3.6,4.409,-4,-44,0,.012,5,16657.031,3,50,0,.012,4.4,16657.735,3,50,0,.012,1.1,15578.803,-4,-38,0,.012,6,-11.49,0,0,0,.012,1.9,8164.398,0,0,0,.012,2.4,31852.372,-4,-17,0,.012,2.4,6607.085,-2,-19,0,.012,4.2,8359.87,0,0,0,.012,.5,5799.713,-2,-19,0,.012,2.7,7220.622,0,0,0,.012,4.3,-139.72,0,0,0,.012,2.3,13728.836,-2,-16,0,.011,3.6,14912.146,1,31,0,.011,4.7,14916.748,-2,-19,0],[1.6768,4.66926,628.301955,-.0266,.1,-.005,.51642,3.3721,6585.76091,-2.158,-18.9,.09,.41383,5.7277,14914.452335,-.635,6.2,-.04,.37115,3.9695,7700.389469,1.55,25,-.12,.2756,.7416,8956.99338,1.496,25.1,-.13,.24599,4.2253,-2.3012,1.523,25.1,-.12,.07118,.1443,7842.36482,-2.211,-19,.08,.06128,2.4998,16171.05625,-.688,6,0,.04516,.443,8399.6791,-.36,3,0,.04048,5.771,14286.15038,-.61,6,0,.03747,4.626,1256.60391,-.05,0,0,.03707,3.415,5957.45895,-2.13,-19,.1,.03649,1.8,23243.14376,.89,31,-.2,.02438,.042,16029.08089,3.07,50,-.2,.02165,1.017,-1742.93051,-3.68,-44,.2,.01923,3.097,17285.6848,3.02,50,-.3,.01692,1.28,.3286,1.52,25,-.1,.01361,.298,8326.3902,3.05,50,-.2,.01293,4.013,7072.0875,1.58,25,-.1,.01276,4.413,8330.9926,0,0,0,.0127,.101,8470.6668,-2.24,-19,.1,.01097,1.203,22128.5152,-2.82,-13,0,.01088,2.545,15542.7543,-.66,6,0,.00835,.19,7214.0629,-2.18,-19,.1,.00734,4.855,24499.7477,.83,31,-.2,.00686,5.13,13799.8238,-4.34,-38,.2,.00631,.93,-486.3266,-3.73,-44,0,.00585,.699,9585.2953,1.5,25,0,.00566,4.073,8328.3391,1.5,25,0,.00566,.638,8329.0437,1.5,25,0,.00539,2.472,-1952.48,.6,7,0,.00509,2.88,-.7113,0,0,0,.00469,3.56,30457.2066,-1.3,12,0,.00387,.78,-.3523,0,0,0,.00378,1.84,22614.8418,.9,31,0,.00362,5.53,-695.8761,.6,7,0,.00317,2.8,16728.3705,1.2,28,0,.00303,6.07,157.7344,0,0,0,.003,2.53,33.757,-.3,-4,0,.00295,4.16,31571.8352,2.4,56,0,.00289,5.98,7211.7617,-.7,6,0,.00285,2.06,15540.4531,.9,31,0,.00283,2.65,2.6298,0,0,0,.00282,6.17,15545.0555,-2.2,-19,0,.00278,1.23,-39.8149,0,0,0,.00272,3.82,7216.3641,-3.7,-44,0,.0027,4.37,70.9877,-1.9,-22,0,.00256,5.81,13657.8484,-.6,6,0,.00244,5.64,-.2237,1.5,25,0,.0024,2.96,8311.7707,-2.2,-19,0,.00239,.87,-33.7814,.3,4,0,.00216,2.31,15.9995,-2.2,-19,0,.00186,3.46,5329.157,-2.1,-19,0,.00169,2.4,24357.772,4.6,75,0,.00161,5.8,8329.403,1.5,25,0,.00161,5.2,8327.98,1.5,25,0,.0016,4.26,23385.119,-2.9,-13,0,.00156,1.26,550.755,0,0,0,.00155,1.25,21500.213,-2.8,-13,0,.00152,.6,-16.921,-3.7,-44,0,.0015,2.71,-79.63,0,0,0,.0015,5.29,15.542,0,0,0,.00148,1.06,-2371.232,-3.7,-44,0,.00141,.77,8328.691,1.5,25,0,.00141,3.67,7143.075,-.3,0,0,.00138,5.45,25614.376,4.5,75,0,.00129,4.9,23871.446,.9,31,0,.00126,4.03,141.975,-3.8,-44,0,.00124,6.01,522.369,0,0,0,.0012,4.94,-10071.622,-5.2,-69,0,.00118,5.07,-15.419,-2.2,-19,0,.00107,3.49,23452.693,-3.4,-20,0,.00104,4.78,17495.234,-1.3,0,0,.00103,1.44,-18.049,-2.2,-19,0,.00102,5.63,15542.402,-.7,6,0,.00102,2.59,15543.107,-.7,6,0,.001,4.11,-6.559,-1.9,-22,0,97e-5,.08,15400.779,3.1,50,0,96e-5,5.84,31781.385,-1.9,5,0,94e-5,1.08,8328.363,0,0,0,94e-5,2.46,16799.358,-.7,6,0,94e-5,1.69,6376.211,2.2,32,0,93e-5,3.64,8329.02,3,50,0,93e-5,2.65,16655.082,4.6,75,0,9e-4,1.9,15056.428,-4.4,-38,0,89e-5,1.59,52.969,0,0,0,88e-5,2.02,-8257.704,-3.4,-47,0,88e-5,3.02,7213.711,-2.2,-19,0,87e-5,.5,7214.415,-2.2,-19,0,87e-5,.49,16659.684,1.5,25,0,82e-5,5.64,-4.931,1.5,25,0,79e-5,5.17,13171.522,-4.3,-38,0,76e-5,3.6,29828.905,-1.3,12,0,76e-5,4.08,24567.322,.3,24,0,76e-5,4.58,1884.906,-.1,0,0,73e-5,.33,31713.811,-1.4,12,0,73e-5,.93,32828.439,2.4,56,0,71e-5,5.91,38785.898,.2,37,0,69e-5,2.2,15613.742,-2.5,-16,0,66e-5,3.87,15.732,-2.5,-23,0,66e-5,.86,25823.926,.2,24,0,65e-5,2.52,8170.957,1.5,25,0,63e-5,.18,8322.132,-.3,0,0,6e-4,5.84,8326.062,1.5,25,0,6e-4,5.15,8331.321,1.5,25,0,6e-4,2.18,8486.426,1.5,25,0,58e-5,2.3,-1.731,-4,-44,0,58e-5,5.43,14357.138,-2,-16,0,57e-5,3.09,8294.91,2,29,0,57e-5,4.67,-8362.473,-1,-21,0,56e-5,4.15,16833.151,-1,0,0,54e-5,1.93,7056.329,-2,-19,0,54e-5,5.27,8315.574,-2,-19,0,52e-5,5.6,8311.418,-2,-19,0,52e-5,2.7,-77.552,0,0,0,51e-5,4.3,7230.984,2,25,0,5e-4,.4,-.508,0,0,0,49e-5,5.4,7211.433,-2,-19,0,49e-5,4.4,7216.693,-2,-19,0,49e-5,4.3,16864.631,0,24,0,49e-5,2.2,16869.234,-3,-26,0,47e-5,6.1,627.596,0,0,0,47e-5,5,12.619,1,7,0,45e-5,4.9,-8815.018,-5,-69,0,44e-5,1.6,62.133,-2,-19,0,42e-5,2.9,-13.118,-4,-44,0,42e-5,4.1,-119.445,0,0,0,41e-5,4.3,22756.817,-3,-13,0,41e-5,3.6,8288.877,2,25,0,4e-4,.5,6663.308,-2,-19,0,4e-4,1.1,8368.506,2,25,0,39e-5,4.1,6443.786,2,25,0,39e-5,3.1,16657.383,3,50,0,38e-5,.1,16657.031,3,50,0,38e-5,3,16657.735,3,50,0,38e-5,4.6,23942.433,-1,9,0,37e-5,4.3,15385.02,-1,6,0,37e-5,5,548.678,0,0,0,36e-5,1.8,7213.352,-2,-19,0,36e-5,1.7,7214.774,-2,-19,0,35e-5,1.1,7777.936,2,25,0,35e-5,1.6,-8.86,0,0,0,35e-5,4.4,23869.145,2,56,0,35e-5,2,6691.693,-2,-19,0,34e-5,1.3,-1185.616,-2,-22,0,34e-5,2.2,23873.747,-1,6,0,33e-5,2,-235.287,0,0,0,33e-5,3.1,17913.987,3,50,0,33e-5,1,8351.233,-2,-19,0],[.00487,4.6693,628.30196,-.027,0,-.01,.00228,2.6746,-2.3012,1.523,25,-.12,.0015,3.372,6585.76091,-2.16,-19,.1,.0012,5.728,14914.45233,-.64,6,0,.00108,3.969,7700.38947,1.55,25,-.1,8e-4,.742,8956.99338,1.5,25,-.1,254e-6,6.002,.3286,1.52,25,-.1,21e-5,.144,7842.3648,-2.21,-19,0,18e-5,2.5,16171.0562,-.7,6,0,13e-5,.44,8399.6791,-.4,3,0,126e-6,5.03,8326.3902,3,50,0,12e-5,5.77,14286.1504,-.6,6,0,118e-6,5.96,8330.9926,0,0,0,11e-5,1.8,23243.1438,.9,31,0,11e-5,3.42,5957.459,-2.1,-19,0,11e-5,4.63,1256.6039,-.1,0,0,99e-6,4.7,-.7113,0,0,0,7e-5,.04,16029.0809,3.1,50,0,7e-5,5.14,8328.3391,1.5,25,0,7e-5,5.85,8329.0437,1.5,25,0,6e-5,1.02,-1742.9305,-3.7,-44,0,6e-5,3.1,17285.6848,3,50,0,54e-6,5.69,-.352,0,0,0,43e-6,.52,15.542,0,0,0,41e-6,2.03,2.63,0,0,0,4e-5,.1,8470.667,-2.2,-19,0,4e-5,4.01,7072.088,1.6,25,0,36e-6,2.93,-8.86,-.3,0,0,3e-5,1.2,22128.515,-2.8,-13,0,3e-5,2.54,15542.754,-.7,6,0,27e-6,4.43,7211.762,-.7,6,0,26e-6,.51,15540.453,.9,31,0,26e-6,1.44,15545.055,-2.2,-19,0,25e-6,5.37,7216.364,-3.7,-44,0],[12e-6,1.041,-2.3012,1.52,25,-.1,17e-7,.31,-.711,0,0,0]]),s(C,"QI_KB",[1640650479938e-6,15.218425,1642476703182e-6,15.21874996,1683430515601e-6,15.218750011,1752157640664e-6,15.218749978,1807675003759e-6,15.218620279,1883627765182e-6,15.218612292,19073691281e-4,15.218449176,1936603140413e-6,15.218425,193914552418e-5,15.218466998,19471807983e-4,15.218524844,1964362041824e-6,15.218533526,1987372340971e-6,15.218513908,1999653819126e-6,15.218530782,2007445469786e-6,15.218535181,2021324917146e-6,15.218526248,2047257232342e-6,15.218519654,2070282898213e-6,15.218425,207320487285e-5,15.218515221,2080144500926e-6,15.218530782,2086703688963e-6,15.218523776,2110033182763e-6,15.218425,2111190300888e-6,15.218425,2113731271005e-6,15.218515671,2120670840263e-6,15.218425,2123973309063e-6,15.218425,2125068997336e-6,15.218477932,2136026312633e-6,15.218472436,2156099495538e-6,15.218425,2159021324663e-6,15.218425,2162308575254e-6,15.218461742,2178485706538e-6,15.218425,2178759662849e-6,15.218445786,21853340208e-4,15.218425,2187525481425e-6,15.218425,2188621191481e-6,15.218437494,232214776e-2]),s(C,"QB",C.decode("FrcFs22AFsckF2tsDtFqEtF1posFdFgiFseFtmelpsEfhkF2anmelpFlF1ikrotcnEqEq2FfqmcDsrFor22FgFrcgDscFs22FgEeFtE2sfFs22sCoEsaF2tsD1FpeE2eFsssEciFsFnmelpFcFhkF2tcnEqEpFgkrotcnEqrEtFermcDsrE222FgBmcmr22DaEfnaF222sD1FpeForeF2tssEfiFpEoeFssD1iFstEqFppDgFstcnEqEpFg11FscnEqrAoAF2ClAEsDmDtCtBaDlAFbAEpAAAAAD2FgBiBqoBbnBaBoAAAAAAAEgDqAdBqAFrBaBoACdAAf1AACgAAAeBbCamDgEifAE2AABa1C1BgFdiAAACoCeE1ADiEifDaAEqAAFe1AcFbcAAAAAF1iFaAAACpACmFmAAAAAAAACrDaAAADG0")),s(C,"SHUO_KB",[1457698231017e-6,29.53067166,1546082512234e-6,29.53085106,16406407353e-4,29.5306,1642472151543e-6,29.53085439,16834305093e-4,29.53086148,1752148041079e-6,29.53085097,1807665420323e-6,29.53059851,18836181141e-4,29.5306,19073607047e-4,29.5306,19365962249e-4,29.5306,19391356753e-4,29.5306,1947168]),s(C,"SB",C.decode("EqoFscDcrFpmEsF2DfFideFelFpFfFfFiaipqti1ksttikptikqckstekqttgkqttgkqteksttikptikq2fjstgjqttjkqttgkqtekstfkptikq2tijstgjiFkirFsAeACoFsiDaDiADc1AFbBfgdfikijFifegF1FhaikgFag1E2btaieeibggiffdeigFfqDfaiBkF1kEaikhkigeidhhdiegcFfakF1ggkidbiaedksaFffckekidhhdhdikcikiakicjF1deedFhFccgicdekgiFbiaikcfi1kbFibefgEgFdcFkFeFkdcfkF1kfkcickEiFkDacFiEfbiaejcFfffkhkdgkaiei1ehigikhdFikfckF1dhhdikcfgjikhfjicjicgiehdikcikggcifgiejF1jkieFhegikggcikFegiegkfjebhigikggcikdgkaFkijcfkcikfkcifikiggkaeeigefkcdfcfkhkdgkegieidhijcFfakhfgeidieidiegikhfkfckfcjbdehdikggikgkfkicjicjF1dbidikFiggcifgiejkiegkigcdiegfggcikdbgfgefjF1kfegikggcikdgFkeeijcfkcikfkekcikdgkabhkFikaffcfkhkdgkegbiaekfkiakicjhfgqdq2fkiakgkfkhfkfcjiekgFebicggbedF1jikejbbbiakgbgkacgiejkijjgigfiakggfggcibFifjefjF1kfekdgjcibFeFkijcfkfhkfkeaieigekgbhkfikidfcjeaibgekgdkiffiffkiakF1jhbakgdki1dj1ikfkicjicjieeFkgdkicggkighdF1jfgkgfgbdkicggfggkidFkiekgijkeigfiskiggfaidheigF1jekijcikickiggkidhhdbgcfkFikikhkigeidieFikggikhkffaffijhidhhakgdkhkijF1kiakF1kfheakgdkifiggkigicjiejkieedikgdfcggkigieeiejfgkgkigbgikicggkiaideeijkefjeijikhkiggkiaidheigcikaikffikijgkiahi1hhdikgjfifaakekighie1hiaikggikhkffakicjhiahaikggikhkijF1kfejfeFhidikggiffiggkigicjiekgieeigikggiffiggkidheigkgfjkeigiegikifiggkidhedeijcfkFikikhkiggkidhh1ehigcikaffkhkiggkidhh1hhigikekfiFkFikcidhh1hitcikggikhkfkicjicghiediaikggikhkijbjfejfeFhaikggifikiggkigiejkikgkgieeigikggiffiggkigieeigekijcijikggifikiggkideedeijkefkfckikhkiggkidhh1ehijcikaffkhkiggkidhh1hhigikhkikFikfckcidhh1hiaikgjikhfjicjicgiehdikcikggifikigiejfejkieFhegikggifikiggfghigkfjeijkhigikggifikiggkigieeijcijcikfksikifikiggkidehdeijcfdckikhkiggkhghh1ehijikifffffkhsFngErD1pAfBoDd1BlEtFqA2AqoEpDqElAEsEeB2BmADlDkqBtC1FnEpDqnEmFsFsAFnllBbFmDsDiCtDmAB2BmtCgpEplCpAEiBiEoFqFtEqsDcCnFtADnFlEgdkEgmEtEsCtDmADqFtAFrAtEcCqAE1BoFqC1F1DrFtBmFtAC2ACnFaoCgADcADcCcFfoFtDlAFgmFqBq2bpEoAEmkqnEeCtAE1bAEqgDfFfCrgEcBrACfAAABqAAB1AAClEnFeCtCgAADqDoBmtAAACbFiAAADsEtBqAB2FsDqpFqEmFsCeDtFlCeDtoEpClEqAAFrAFoCgFmFsFqEnAEcCqFeCtFtEnAEeFtAAEkFnErAABbFkADnAAeCtFeAfBoAEpFtAABtFqAApDcCGJ"));let M0=C;const J=class J extends h{constructor(e,u){super(J.NAMES,u);s(this,"year");s(this,"cursoryJulianDay");let r=J.numeric(e,"lunar year");if(typeof u=="number"){const i=J.NAMES.length;r=~~((r*i+u)/i)}const n=Math.floor((r-2e3)*365.2422+180);let F=Math.floor((n-355+183)/365.2422)*365.2422+355;M0.calcQi(F)>n&&(F-=365.2422),this.year=r,this.cursoryJulianDay=M0.calcQi(F+15.2184*this.index)}static fromIndex(e,u){return new J(e,u)}static fromName(e,u){return new J(e,u)}next(e){const u=this.getSize(),r=this.index+e;return J.fromIndex(~~((this.year*u+r)/u),this.indexOfBy(r))}isJie(){return this.index%2===1}isQi(){return this.index%2===0}getJulianDay(){return z.fromJulianDay(M0.qiAccurate2(this.cursoryJulianDay)+z.J2000)}getYear(){return this.year}getCursoryJulianDay(){return this.cursoryJulianDay}};s(J,"NAMES",["冬至","小寒","大寒","立春","雨水","惊蛰","春分","清明","谷雨","立夏","小满","芒种","夏至","小暑","大暑","立秋","处暑","白露","秋分","寒露","霜降","立冬","小雪","大雪"]);let y=J;class z1 extends e2{constructor(t,e){super(t,e)}getSolarTerm(){return this.culture}}class H0 extends I{constructor(e){super();s(this,"year");const u=H0.numeric(e,"solar year");if(u<1||u>9999)throw new Error(`illegal solar year: ${e}`);this.year=u}static fromYear(e){return new H0(e)}getYear(){return this.year}getDayCount(){return this.year===1582?355:this.isLeap()?366:365}isLeap(){return this.year<1600?this.year%4===0:this.year%4===0&&this.year%100!==0||this.year%400===0}getName(){return`${this.year}年`}next(e){return H0.fromYear(this.year+e)}getMonths(){const e=[];for(let u=1;u<13;u++)e.push(L0.fromYm(this.year,u));return e}getSeasons(){const e=[];for(let u=0;u<4;u++)e.push(s2.fromIndex(this.year,u));return e}getHalfYears(){const e=[];for(let u=0;u<2;u++)e.push(U2.fromIndex(this.year,u));return e}}const v0=class v0 extends I{constructor(e,u){super();s(this,"year");s(this,"index");const r=v0.numeric(u,"solar half year index");if(r<0||r>1)throw new Error(`illegal solar half year index: ${u}`);this.year=H0.fromYear(e),this.index=r}static fromIndex(e,u){return new v0(e,u)}getSolarYear(){return this.year}getYear(){return this.year.getYear()}getIndex(){return this.index}getName(){return v0.NAMES[this.index]}toString(){return this.year.toString()+this.getName()}next(e){const u=this.index+e;return v0.fromIndex(~~((this.getYear()*2+u)/2),this.indexOf(u,2))}getMonths(){const e=[],u=this.year.getYear();for(let r=1;r<7;r++)e.push(L0.fromYm(u,this.index*6+r));return e}getSeasons(){const e=[],u=this.year.getYear();for(let r=0;r<2;r++)e.push(s2.fromIndex(u,this.index*2+r));return e}};s(v0,"NAMES",["上半年","下半年"]);let U2=v0;const T0=class T0 extends I{constructor(e,u){super();s(this,"year");s(this,"index");const r=T0.numeric(u,"solar season index");if(r<0||r>3)throw new Error(`illegal solar season index: ${u}`);this.year=H0.fromYear(e),this.index=r}static fromIndex(e,u){return new T0(e,u)}getSolarYear(){return this.year}getYear(){return this.year.getYear()}getIndex(){return this.index}getName(){return T0.NAMES[this.index]}toString(){return this.year.toString()+this.getName()}next(e){const u=this.index+e;return T0.fromIndex(~~((this.getYear()*4+u)/4),this.indexOf(u,4))}getMonths(){const e=[],u=this.year.getYear();for(let r=1;r<4;r++)e.push(L0.fromYm(u,this.index*3+r));return e}};s(T0,"NAMES",["一季度","二季度","三季度","四季度"]);let s2=T0;const W=class W extends I{constructor(e,u){super();s(this,"year");s(this,"month");const r=W.numeric(u,"solar month");if(r<1||r>12)throw new Error(`illegal solar month: ${u}`);this.year=H0.fromYear(e),this.month=r}static fromYm(e,u){return new W(e,u)}getSolarYear(){return this.year}getYear(){return this.year.getYear()}getMonth(){return this.month}getDayCount(){if(this.getYear()===1582&&this.month===10)return 21;let e=W.DAYS[this.getIndexInYear()];return this.month===2&&this.year.isLeap()&&e++,e}getIndexInYear(){return this.month-1}getSeason(){return s2.fromIndex(this.getYear(),~~(this.getIndexInYear()/3))}getWeekCount(e){return Math.ceil((this.indexOf(v.fromYmd(this.getYear(),this.month,1).getWeek().getIndex()-e,7)+this.getDayCount())/7)}getName(){return W.NAMES[this.getIndexInYear()]}toString(){return this.year.toString()+this.getName()}next(e){const u=this.month-1+e;return W.fromYm(~~((this.getYear()*12+u)/12),this.indexOf(u,12)+1)}getWeeks(e){const u=[],r=this.getYear();for(let n=0,F=this.getWeekCount(e);n<F;n++)u.push(f2.fromYm(r,this.month,n,e));return u}getDays(){const e=[],u=this.getYear();for(let r=1,n=this.getDayCount();r<=n;r++)e.push(v.fromYmd(u,this.month,r));return e}};s(W,"NAMES",["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"]),s(W,"DAYS",[31,28,31,30,31,30,31,31,30,31,30,31]);let L0=W;const k0=class k0 extends I{constructor(e,u,r,n){super();s(this,"month");s(this,"index");s(this,"start");const F=k0.numeric(r,"solar week index");if(F<0||F>5)throw new Error(`illegal solar week index: ${r}`);const i=G0.fromIndex(n),a=L0.fromYm(e,u);if(F>=a.getWeekCount(i.getIndex()))throw new Error(`illegal solar week index: ${r} in month: ${a.toString()}`);this.month=a,this.index=F,this.start=i}static fromYm(e,u,r,n){return new k0(e,u,r,n)}getSolarMonth(){return this.month}getYear(){return this.month.getYear()}getMonth(){return this.month.getMonth()}getIndex(){return this.index}getIndexInYear(){let e=0;const u=this.getFirstDay();let r=k0.fromYm(this.getYear(),1,0,this.start.getIndex());for(;!r.getFirstDay().equals(u);)r=r.next(1),e++;return e}getStart(){return this.start}getName(){return k0.NAMES[this.index]}toString(){return this.month.toString()+this.getName()}next(e){const u=this.start.getIndex();let r=this.index,n=this.month;if(e>0){r+=e;let F=n.getWeekCount(u);for(;r>=F;)r-=F,n=n.next(1),v.fromYmd(n.getYear(),n.getMonth(),1).getWeek().equals(this.start)||(r+=1),F=n.getWeekCount(u)}else if(e<0)for(r+=e;r<0;)v.fromYmd(n.getYear(),n.getMonth(),1).getWeek().equals(this.start)||(r-=1),n=n.next(-1),r+=n.getWeekCount(u);return k0.fromYm(n.getYear(),n.getMonth(),r,u)}getFirstDay(){const e=v.fromYmd(this.getYear(),this.getMonth(),1);return e.next(this.index*7-this.indexOf(e.getWeek().getIndex()-this.start.getIndex(),7))}getDays(){const e=[],u=this.getFirstDay();e.push(u);for(let r=1;r<7;r++)e.push(u.next(r));return e}equals(e){return e&&e.getFirstDay().equals(this.getFirstDay())}};s(k0,"NAMES",["第一周","第二周","第三周","第四周","第五周","第六周"]);let f2=k0;const N0=class N0 extends I{constructor(e,u,r){super();s(this,"month");s(this,"day");const n=N0.numeric(r,"solar day");if(n<1)throw new Error(`illegal solar day: ${e}-${u}-${r}`);const F=L0.fromYm(e,u);if(F.getYear()===1582&&F.getMonth()===10){if(n>4&&n<15||n>31)throw new Error(`illegal solar day: ${e}-${u}-${r}`)}else if(n>F.getDayCount())throw new Error(`illegal solar day: ${e}-${u}-${r}`);this.month=F,this.day=n}static fromYmd(e,u,r){return new N0(e,u,r)}getSolarMonth(){return this.month}getYear(){return this.month.getYear()}getMonth(){return this.month.getMonth()}getDay(){return this.day}getWeek(){return this.getJulianDay().getWeek()}getConstellation(){const e=this.getMonth()*100+this.day;return k2.fromIndex(e>1221||e<120?9:e<219?10:e<321?11:e<420?0:e<521?1:e<622?2:e<723?3:e<823?4:e<923?5:e<1024?6:e<1123?7:8)}getName(){return N0.NAMES[this.day-1]}toString(){return this.month.toString()+this.getName()}next(e){return this.getJulianDay().next(e).getSolarDay()}isBefore(e){const u=this.getYear(),r=e.getYear();if(u!==r)return u<r;const n=this.getMonth(),F=e.getMonth();return n!==F?n<F:this.day<e.getDay()}isAfter(e){const u=this.getYear(),r=e.getYear();if(u!==r)return u>r;const n=this.getMonth(),F=e.getMonth();return n!==F?n>F:this.day>e.getDay()}getTerm(){return this.getTermDay().getSolarTerm()}getTermDay(){let e=this.getYear(),u=this.getMonth()*2;u==24&&(e+=1,u=0);let r=y.fromIndex(e,u),n=r.getJulianDay().getSolarDay();for(;this.isBefore(n);)r=r.next(-1),n=r.getJulianDay().getSolarDay();return new z1(r,this.subtract(n))}getSolarWeek(e){const u=this.getYear(),r=this.getMonth();return f2.fromYm(u,r,Math.ceil((this.day+N0.fromYmd(u,r,1).getWeek().next(-e).getIndex())/7)-1,e)}getPhenologyDay(){const e=this.getTerm();let u=this.subtract(e.getJulianDay().getSolarDay()),r=~~(u/5);return r>2&&(r=2),u-=r*5,new W1(W2.fromIndex(e.getIndex()*3+r),u)}getDogDay(){const e=y.fromIndex(this.getYear(),12);let u=e.getJulianDay().getSolarDay();u=u.next(u.getLunarDay().getSixtyCycle().getHeavenStem().stepsTo(6)+20);let r=this.subtract(u);if(r<0)return null;if(r<10)return new a2(R0.fromIndex(0),r);if(u=u.next(10),r=this.subtract(u),r<10)return new a2(R0.fromIndex(1),r);if(u=u.next(10),r=this.subtract(u),e.next(3).getJulianDay().getSolarDay().isAfter(u)){if(r<10)return new a2(R0.fromIndex(1),r+10);u=u.next(10),r=this.subtract(u)}return r<10?new a2(R0.fromIndex(2),r):null}getPlumRainDay(){const e=y.fromIndex(this.getYear(),11);let u=e.getJulianDay().getSolarDay();u=u.next(u.getLunarDay().getSixtyCycle().getHeavenStem().stepsTo(2));let n=e.next(2).getJulianDay().getSolarDay();return n=n.next(n.getLunarDay().getSixtyCycle().getEarthBranch().stepsTo(7)),this.isBefore(u)||this.isAfter(n)?null:this.equals(n)?new E1(l2.fromIndex(1),0):new E1(l2.fromIndex(0),this.subtract(u))}getHideHeavenStemDay(){const e=[3,5,7,9,10,30];let u=this.getTerm();u.isQi()&&(u=u.next(-1));let r=this.subtract(u.getJulianDay().getSolarDay());const n=(u.getIndex()-1)*3,F="93705542220504xx1513904541632524533533105544806564xx7573304542018584xx95".substring(n,n+6);let i=0,a=0,E=0;for(;E<3;){const j=E*2,o=F.substring(j,j+1);let c=0;if(o!="x"&&(a=parseInt(o,10),c=e[parseInt(F.substring(j+1,j+2),10)],i+=c),r<=i){r-=i-c;break}E++}let D;return E==0?D=0:E==1?D=1:D=2,new R1(new E2(a,D),r)}getNineDay(){const e=this.getYear();let u=y.fromIndex(e+1,0).getJulianDay().getSolarDay();this.isBefore(u)&&(u=y.fromIndex(e,0).getJulianDay().getSolarDay());const r=u.next(81);if(this.isBefore(u)||!this.isBefore(r))return null;const n=this.subtract(u);return new J1(J2.fromIndex(~~(n/9)),n%9)}getIndexInYear(){return this.subtract(N0.fromYmd(this.getYear(),1,1))}subtract(e){return~~this.getJulianDay().subtract(e.getJulianDay())}getJulianDay(){return z.fromYmdHms(this.getYear(),this.getMonth(),this.day,0,0,0)}getLunarDay(){let e=w0.fromYm(this.getYear(),this.getMonth()),u=this.subtract(e.getFirstJulianDay().getSolarDay());for(;u<0;)e=e.next(-1),u+=e.getDayCount();return w.fromYmd(e.getYear(),e.getMonthWithLeap(),u+1)}getLegalHoliday(){return x2.fromYmd(this.getYear(),this.getMonth(),this.day)}getFestival(){return X2.fromYmd(this.getYear(),this.getMonth(),this.day)}};s(N0,"NAMES",["1日","2日","3日","4日","5日","6日","7日","8日","9日","10日","11日","12日","13日","14日","15日","16日","17日","18日","19日","20日","21日","22日","23日","24日","25日","26日","27日","28日","29日","30日","31日"]);let v=N0;class q extends I{constructor(e,u,r,n,F,i){super();s(this,"day");s(this,"hour");s(this,"minute");s(this,"second");const a=q.numeric(n,"hour");if(a<0||a>23)throw new Error(`illegal hour: ${n}`);const E=q.numeric(F,"minute");if(E<0||E>59)throw new Error(`illegal minute: ${F}`);const D=q.numeric(i,"second");if(D<0||D>59)throw new Error(`illegal second: ${i}`);this.day=v.fromYmd(e,u,r),this.hour=a,this.minute=E,this.second=D}static fromYmdHms(e,u,r,n,F,i){return new q(e,u,r,n,F,i)}getSolarDay(){return this.day}getYear(){return this.day.getYear()}getMonth(){return this.day.getMonth()}getDay(){return this.day.getDay()}getHour(){return this.hour}getMinute(){return this.minute}getSecond(){return this.second}getName(){const e=(this.hour<10?"0":"")+this.hour,u=(this.minute<10?"0":"")+this.minute,r=(this.second<10?"0":"")+this.second;return`${e}:${u}:${r}`}toString(){return`${this.day.toString()} ${this.getName()}`}next(e){if(e==0)return q.fromYmdHms(this.getYear(),this.getMonth(),this.getDay(),this.hour,this.minute,this.second);let u=this.second+e,r=this.minute+~~(u/60);u%=60,u<0&&(u+=60,r-=1);let n=this.hour+~~(r/60);r%=60,r<0&&(r+=60,n-=1);let F=~~(n/24);n%=24,n<0&&(n+=24,F-=1);const i=this.day.next(F);return q.fromYmdHms(i.getYear(),i.getMonth(),i.getDay(),n,r,u)}isBefore(e){return this.day.equals(e.getSolarDay())?this.hour!==e.getHour()?this.hour<e.getHour():this.minute!==e.getMinute()?this.minute<e.getMinute():this.second<e.getSecond():this.day.isBefore(e.getSolarDay())}isAfter(e){return this.day.equals(e.getSolarDay())?this.hour!==e.getHour()?this.hour>e.getHour():this.minute!==e.getMinute()?this.minute>e.getMinute():this.second>e.getSecond():this.day.isAfter(e.getSolarDay())}getTerm(){let e=this.getYear(),u=this.getMonth()*2;u==24&&(e+=1,u=0);let r=y.fromIndex(e,u);for(;this.isBefore(r.getJulianDay().getSolarTime());)r=r.next(-1);return r}getJulianDay(){return z.fromYmdHms(this.day.getYear(),this.day.getMonth(),this.day.getDay(),this.hour,this.minute,this.second)}subtract(e){let u=this.day.subtract(e.getSolarDay());const r=this.hour*3600+this.minute*60+this.second,n=e.getHour()*3600+e.getMinute()*60+e.getSecond();let F=r-n;return F<0&&(F+=86400,u--),F+=u*86400,F}getLunarHour(){const e=this.day.getLunarDay();return i2.fromYmdHms(e.getYear(),e.getMonth(),e.getDay(),this.hour,this.minute,this.second)}}const p=class p extends I{constructor(e,u,r,n){super();s(this,"day");s(this,"name");s(this,"work");this.day=v.fromYmd(e,u,r),this.work=n.charCodeAt(8)===48,this.name=p.NAMES[n.charCodeAt(9)-48]}static fromYmd(e,u,r){const n=(Array(4).join("0")+e).slice(-4),F=(u<10?"0":"")+u,i=(r<10?"0":"")+r,a=new RegExp(`${n}${F}${i}[0-1][0-8][+|-]\\d{2}`,"g").exec(p.DATA);return a?new p(e,u,r,a[0]):null}getName(){return this.name}getDay(){return this.day}isWork(){return this.work}toString(){return`${this.day.toString()} ${this.name}(${this.work?"班":"休"})`}next(e){const u=this.day.getYear(),r=this.day.getMonth(),n=this.day.getDay();if(e===0)return p.fromYmd(u,r,n);let F=(Array(4).join("0")+u).slice(-4);const i=(r<10?"0":"")+r,a=(n<10?"0":"")+n,E=[],D=`${F}${i}${a}`;let j=new RegExp(`${F}\\d{4}[0-1][0-8][+|-]\\d{2}`,"g"),o=j.exec(p.DATA);for(;o;)E.push(o[0]),o=j.exec(p.DATA);let c=-1,B=E.length;for(let l=0;l<B;l++)if(E[l].indexOf(D)===0){c=l;break}if(c===-1)return null;c+=e;let d=u;if(e>0)for(;c>=B;){for(c-=B,d+=1,E.length=0,F=(Array(4).join("0")+d).slice(-4),j=new RegExp(`${F}\\d{4}[0-1][0-8][+|-]\\d{2}`,"g"),o=j.exec(p.DATA);o;)E.push(o[0]),o=j.exec(p.DATA);if(B=E.length,B<1)return null}else for(;c<0;){for(d-=1,E.length=0,F=(Array(4).join("0")+d).slice(-4),j=new RegExp(`${F}\\d{4}[0-1][0-8][+|-]\\d{2}`,"g"),o=j.exec(p.DATA);o;)E.push(o[0]),o=j.exec(p.DATA);if(B=E.length,B<1)return null;c+=B}const m=E[c];return new p(parseInt(m.substring(0,4),10),parseInt(m.substring(4,6),10),parseInt(m.substring(6,8),10),m)}};s(p,"NAMES",["元旦节","春节","清明节","劳动节","端午节","中秋节","国庆节","国庆中秋","抗战胜利日"]),s(p,"DATA","2001122900+032001123000+022002010110+002002010210-012002010310-022002020901+032002021001+022002021211+002002021311-012002021411-022002021511-032002021611-042002021711-052002021811-062002042703+042002042803+032002050113+002002050213-012002050313-022002050413-032002050513-042002050613-052002050713-062002092806+032002092906+022002100116+002002100216-012002100316-022002100416-032002100516-042002100616-052002100716-062003010110+002003020111+002003020211-012003020311-022003020411-032003020511-042003020611-052003020711-062003020801-072003020901-082003042603+052003042703+042003050113+002003050213-012003050313-022003050413-032003050513-042003050613-052003050713-062003092706+042003092806+032003100116+002003100216-012003100316-022003100416-032003100516-042003100616-052003100716-062004010110+002004011701+052004011801+042004012211+002004012311-012004012411-022004012511-032004012611-042004012711-052004012811-062004050113+002004050213-012004050313-022004050413-032004050513-042004050613-052004050713-062004050803-072004050903-082004100116+002004100216-012004100316-022004100416-032004100516-042004100616-052004100716-062004100906-082004101006-092005010110+002005010210-012005010310-022005020501+042005020601+032005020911+002005021011-012005021111-022005021211-032005021311-042005021411-052005021511-062005043003+012005050113+002005050213-012005050313-022005050413-032005050513-042005050613-052005050713-062005050803-072005100116+002005100216-012005100316-022005100416-032005100516-042005100616-052005100716-062005100806-072005100906-082005123100+012006010110+002006010210-012006010310-022006012801+012006012911+002006013011-012006013111-022006020111-032006020211-042006020311-052006020411-062006020501-072006042903+022006043003+012006050113+002006050213-012006050313-022006050413-032006050513-042006050613-052006050713-062006093006+012006100116+002006100216-012006100316-022006100416-032006100516-042006100616-052006100716-062006100806-072006123000+022006123100+012007010110+002007010210-012007010310-022007021701+012007021811+002007021911-012007022011-022007022111-032007022211-042007022311-052007022411-062007022501-072007042803+032007042903+022007050113+002007050213-012007050313-022007050413-032007050513-042007050613-052007050713-062007092906+022007093006+012007100116+002007100216-012007100316-022007100416-032007100516-042007100616-052007100716-062007122900+032007123010+022007123110+012008010110+002008020201+042008020301+032008020611+002008020711-012008020811-022008020911-032008021011-042008021111-052008021211-062008040412+002008040512-012008040612-022008050113+002008050213-012008050313-022008050403-032008060714+012008060814+002008060914-012008091315+012008091415+002008091515-012008092706+042008092806+032008092916+022008093016+012008100116+002008100216-012008100316-022008100416-032008100516-042009010110+002009010210-012009010310-022009010400-032009012401+012009012511+002009012611-012009012711-022009012811-032009012911-042009013011-052009013111-062009020101-072009040412+002009040512-012009040612-022009050113+002009050213-012009050313-022009052814+002009052914-012009053014-022009053104-032009092706+042009100116+002009100216-012009100316-022009100416-032009100515-022009100615-032009100715-042009100815-052009101005-072010010110+002010010210-012010010310-022010021311+002010021411-012010021511-022010021611-032010021711-042010021811-052010021911-062010022001-072010022101-082010040312+022010040412+012010040512+002010050113+002010050213-012010050313-022010061204+042010061304+032010061414+022010061514+012010061614+002010091905+032010092215+002010092315-012010092415-022010092505-032010092606+052010100116+002010100216-012010100316-022010100416-032010100516-042010100616-052010100716-062010100906-082011010110+002011010210-012011010310-022011013001+042011020211+012011020311+002011020411-012011020511-022011020611-032011020711-042011020811-052011021201-092011040202+032011040312+022011040412+012011040512+002011043013+012011050113+002011050213-012011060414+022011060514+012011060614+002011091015+022011091115+012011091215+002011100116+002011100216-012011100316-022011100416-032011100516-042011100616-052011100716-062011100806-072011100906-082011123100+012012010110+002012010210-012012010310-022012012101+022012012211+012012012311+002012012411-012012012511-022012012611-032012012711-042012012811-052012012901-062012033102+042012040102+032012040212+022012040312+012012040412+002012042803+032012042913+022012043013+012012050113+002012050203-012012062214+012012062314+002012062414-012012092905+012012093015+002012100116+002012100216-012012100316-022012100416-032012100516-042012100616-052012100716-062012100806-072013010110+002013010210-012013010310-022013010500-042013010600-052013020911+012013021011+002013021111-012013021211-022013021311-032013021411-042013021511-052013021601-062013021701-072013040412+002013040512-012013040612-022013042703+042013042803+032013042913+022013043013+012013050113+002013060804+042013060904+032013061014+022013061114+012013061214+002013091915+002013092015-012013092115-022013092205-032013092906+022013100116+002013100216-012013100316-022013100416-032013100516-042013100616-052013100716-062014010110+002014012601+052014013111+002014020111-012014020211-022014020311-032014020411-042014020511-052014020611-062014020801-082014040512+002014040612-012014040712-022014050113+002014050213-012014050313-022014050403-032014053114+022014060114+012014060214+002014090615+022014090715+012014090815+002014092806+032014100116+002014100216-012014100316-022014100416+002014100516-042014100616-052014100716-062014101106-102015010110+002015010210-012015010310-022015010400-032015021501+042015021811+012015021911+002015022011-012015022111-022015022211-032015022311-042015022411-052015022801-092015040412+012015040512+002015040612-012015050113+002015050213-012015050313-022015062014+002015062114-012015062214-022015090318+002015090418-012015090518-022015090608-032015092615+012015092715+002015100116+002015100216-012015100316-022015100416+002015100516-042015100616-052015100716-062015101006-092016010110+002016010210-012016010310-022016020601+022016020711+012016020811+002016020911-012016021011-022016021111-032016021211-042016021311-052016021401-062016040212+022016040312+012016040412+002016043013+012016050113+002016050213-012016060914+002016061014-012016061114-022016061204-032016091515+002016091615-012016091715-022016091805-032016100116+002016100216-012016100316-022016100416-032016100516-042016100616-052016100716-062016100806-072016100906-082016123110+012017010110+002017010210-012017012201+062017012711+012017012811+002017012911-012017013011-022017013111-032017020111-042017020211-052017020401-072017040102+032017040212+022017040312+012017040412+002017042913+022017043013+012017050113+002017052704+032017052814+022017052914+012017053014+002017093006+012017100116+002017100216-012017100316-022017100415+002017100516-042017100616-052017100716-062017100816-072017123010+022017123110+012018010110+002018021101+052018021511+012018021611+002018021711-012018021811-022018021911-032018022011-042018022111-052018022401-082018040512+002018040612-012018040712-022018040802-032018042803+032018042913+022018043013+012018050113+002018061614+022018061714+012018061814+002018092215+022018092315+012018092415+002018092906+022018093006+012018100116+002018100216-012018100316-022018100416-032018100516-042018100616-052018100716-062018122900+032018123010+022018123110+012019010110+002019020201+032019020301+022019020411+012019020511+002019020611-012019020711-022019020811-032019020911-042019021011-052019040512+002019040612-012019040712-022019042803+032019050113+002019050213-012019050313-022019050413-032019050503-042019060714+002019060814-012019060914-022019091315+002019091415-012019091515-022019092906+022019100116+002019100216-012019100316-022019100416-032019100516-042019100616-052019100716-062019101206-112020010110+002020011901+062020012411+012020012511+002020012611-012020012711-022020012811-032020012911-042020013011-052020013111-062020020111-072020020211-082020040412+002020040512-012020040612-022020042603+052020050113+002020050213-012020050313-022020050413-032020050513-042020050903-082020062514+002020062614-012020062714-022020062804-032020092707+042020100117+002020100216-012020100316-022020100416-032020100516-042020100616-052020100716-062020100816-072020101006-092021010110+002021010210-012021010310-022021020701+052021021111+012021021211+002021021311-012021021411-022021021511-032021021611-042021021711-052021022001-082021040312+012021040412+002021040512-012021042503+062021050113+002021050213-012021050313-022021050413-032021050513-042021050803-072021061214+022021061314+012021061414+002021091805+032021091915+022021092015+012021092115+002021092606+052021100116+002021100216-012021100316-022021100416-032021100516-042021100616-052021100716-062021100906-082022010110+002022010210-012022010310-022022012901+032022013001+022022013111+012022020111+002022020211-012022020311-022022020411-032022020511-042022020611-052022040202+032022040312+022022040412+012022040512+002022042403+072022043013+012022050113+002022050213-012022050313-022022050413-032022050703-062022060314+002022060414-012022060514-022022091015+002022091115-012022091215-022022100116+002022100216-012022100316-022022100416-032022100516-042022100616-052022100716-062022100806-072022100906-082022123110+012023010110+002023010210-012023012111+012023012211+002023012311-012023012411-022023012511-032023012611-042023012711-052023012801-062023012901-072023040512+002023042303+082023042913+022023043013+012023050113+002023050213-012023050313-022023050603-052023062214+002023062314-012023062414-022023062504-032023092915+002023093016+012023100116+002023100216-012023100316-022023100416-032023100516-042023100616-052023100706-062023100806-072023123010+022023123110+012024010110+002024020401+062024021011+002024021111-012024021211-022024021311-032024021411-042024021511-052024021611-062024021711-072024021801-082024040412+002024040512-012024040612-022024040702-032024042803+032024050113+002024050213-012024050313-022024050413-032024050513-042024051103-102024060814+022024060914+012024061014+002024091405+032024091515+022024091615+012024091715+002024092906+022024100116+002024100216-012024100316-022024100416-032024100516-042024100616-052024100716-062024101206-112025010110+002025012601+032025012811+012025012911+002025013011-012025013111-022025020111-032025020211-032025020311-042025020411-052025020801-092025040412+002025040512-012025040612-022025042703+042025050113+002025050213-012025050313-022025050413-032025050513-042025053114+002025060114-012025060214-022025092807+032025100117+002025100217-012025100317-022025100417-032025100517-042025100617-052025100717-062025100817-072025101107-10");let x2=p;const H=class H extends I{constructor(e,u,r,n){super();s(this,"type");s(this,"index");s(this,"day");s(this,"name");s(this,"startYear");this.type=e,this.day=u,this.startYear=r,this.index=parseInt(n.substring(1,3),10),this.name=H.NAMES[this.index]}static fromIndex(e,u){if(u<0||u>=H.NAMES.length)throw new Error(`illegal index: ${u}`);const r=(u<10?"0":"")+u,n=new RegExp(`@${r}\\d+`,"g").exec(H.DATA);if(n){const F=n[0];if(F.charCodeAt(3)-48===0){const a=parseInt(F.substring(8),10);if(e>=a)return new H(0,v.fromYmd(e,parseInt(F.substring(4,6),10),parseInt(F.substring(6,8),10)),a,F)}}return null}static fromYmd(e,u,r){const n=(u<10?"0":"")+u,F=(r<10?"0":"")+r,i=new RegExp(`@\\d{2}0${n}${F}\\d+`,"g").exec(H.DATA);if(i){const a=i[0],E=parseInt(a.substring(8),10);if(e>=E)return new H(0,v.fromYmd(e,u,r),E,a)}return null}getName(){return this.name}getIndex(){return this.index}getDay(){return this.day}getType(){return this.type}getStartYear(){return this.startYear}toString(){return`${this.day.toString()} ${this.name}`}next(e){const u=H.NAMES.length,r=this.index+e;return H.fromIndex(~~((this.day.getYear()*u+r)/u),this.indexOf(r,u))}};s(H,"NAMES",["元旦","三八妇女节","植树节","五一劳动节","五四青年节","六一儿童节","建党节","八一建军节","教师节","国庆节"]),s(H,"DATA","@00001011950@01003081950@02003121979@03005011950@04005041950@05006011950@06007011941@07008011933@08009101985@09010011950");let X2=H;const x=class x extends I{constructor(e,u,r,n){super();s(this,"type");s(this,"index");s(this,"day");s(this,"name");s(this,"solarTerm");this.type=e,this.day=u,this.solarTerm=r,this.index=parseInt(n.substring(1,3),10),this.name=x.NAMES[this.index]}static fromIndex(e,u){if(u<0||u>=x.NAMES.length)throw new Error(`illegal index: ${u}`);const r=(u<10?"0":"")+u,n=new RegExp(`@${r}\\d+`,"g").exec(x.DATA);if(n){const F=n[0];switch(F.charCodeAt(3)-48){case 0:return new x(0,w.fromYmd(e,parseInt(F.substring(4,6),10),parseInt(F.substring(6),10)),null,F);case 1:const a=y.fromIndex(e,parseInt(F.substring(4),10));return new x(1,a.getJulianDay().getSolarDay().getLunarDay(),a,F);case 2:return new x(2,w.fromYmd(e+1,1,1).next(-1),null,F)}}return null}static fromYmd(e,u,r){const n=(u<10?"0":"")+u,F=(r<10?"0":"")+r;let i=new RegExp(`@\\d{2}0${n}${F}`,"g").exec(x.DATA);if(i)return new x(0,w.fromYmd(e,u,r),null,i[0]);const a=new RegExp("@\\d{2}1\\d{2}","g");for(i=a.exec(x.DATA);i;){const E=i[0],D=y.fromIndex(e,parseInt(E.substring(4),10)),j=D.getJulianDay().getSolarDay().getLunarDay();if(j.getYear()===e&&j.getMonth()===u&&j.getDay()===r)return new x(1,j,D,E);i=a.exec(x2.DATA)}if(i=new RegExp("@\\d{2}2","g").exec(x.DATA),i){const E=w.fromYmd(e,u,r),D=E.next(1);if(D.getMonth()===1&&D.getDay()===1)return new x(2,E,null,i[0])}return null}getName(){return this.name}getIndex(){return this.index}getDay(){return this.day}getType(){return this.type}getSolarTerm(){return this.solarTerm}toString(){return`${this.day.toString()} ${this.name}`}next(e){const u=x.NAMES.length,r=this.index+e;return x.fromIndex(~~((this.day.getYear()*u+r)/u),this.indexOf(r,u))}};s(x,"NAMES",["春节","元宵节","龙头节","上巳节","清明节","端午节","七夕节","中元节","中秋节","重阳节","冬至节","腊八节","除夕"]),s(x,"DATA","@0000101@0100115@0200202@0300303@04107@0500505@0600707@0700715@0800815@0900909@10124@1101208@122");let _2=x;class Z1 extends q0{constructor(e,u,r,n){super();s(this,"year");s(this,"month");s(this,"day");s(this,"hour");this.year=e instanceof b?e:b.fromName(e),this.month=u instanceof b?u:b.fromName(u),this.day=r instanceof b?r:b.fromName(r),this.hour=n instanceof b?n:b.fromName(n)}getYear(){return this.year}getMonth(){return this.month}getDay(){return this.day}getHour(){return this.hour}getFetalOrigin(){return b.fromName(this.month.getHeavenStem().next(1).getName()+this.month.getEarthBranch().next(3).getName())}getFetalBreath(){return b.fromName(this.day.getHeavenStem().next(5).getName()+Y.fromIndex(13-this.day.getEarthBranch().getIndex()).getName())}getOwnSign(){let e=this.month.getEarthBranch().next(-1).getIndex()+this.hour.getEarthBranch().next(-1).getIndex();return e=(e>=14?26:14)-e,e-=1,b.fromName(k.fromIndex((this.year.getHeavenStem().getIndex()+1)*2+e).getName()+Y.fromIndex(2+e).getName())}getBodySign(){let e=this.month.getEarthBranch().getIndex()+this.hour.getEarthBranch().getIndex();return e%=12,e-=1,b.fromName(k.fromIndex((this.year.getHeavenStem().getIndex()+1)*2+e).getName()+Y.fromIndex(2+e).getName())}getDuty(){return g2.fromIndex(this.day.getEarthBranch().getIndex()-this.month.getEarthBranch().getIndex())}getName(){return`${this.year.toString()} ${this.month.toString()} ${this.day.toString()} ${this.hour.toString()}`}getSolarTimes(e,u){const r=[];let n=this.month.getEarthBranch().next(-2).getIndex();if(!k.fromIndex((this.year.getHeavenStem().getIndex()+1)*2+n).equals(this.month.getHeavenStem()))return r;let F=this.year.next(-57).getIndex()+1;n*=2;const i=this.hour.getEarthBranch().getIndex()*2,a=i==0?[0,23]:[i],E=e-1;for(E>F&&(F+=60*~~Math.ceil((E-F)/60));F<=u;){let D=y.fromIndex(F,3);n>0&&(D=D.next(n));const j=D.getJulianDay().getSolarTime();if(j.getYear()>=e){let o=j.getSolarDay();const c=this.day.next(-o.getLunarDay().getSixtyCycle().getIndex()).getIndex();c>0&&(o=o.next(c));for(let B=0,d=a.length;B<d;B++){let m=0,l=0;const F1=a[B];c==0&&F1==j.getHour()&&(m=j.getMinute(),l=j.getSecond());const i1=q.fromYmdHms(o.getYear(),o.getMonth(),o.getDay(),F1,m,l);i1.getLunarHour().getEightChar().equals(this)&&r.push(i1)}}F+=60}return r}}const W0=class W0 extends q0{constructor(e){super();s(this,"firstDaySixtyCycle");this.firstDaySixtyCycle=w.fromYmd(e,1,1).getSixtyCycle()}static fromLunarYear(e){return new W0(e)}byHeavenStem(e){return W0.NUMBERS[this.firstDaySixtyCycle.getHeavenStem().stepsTo(e)]}byEarthBranch(e){return W0.NUMBERS[this.firstDaySixtyCycle.getEarthBranch().stepsTo(e)]}getMouse(){return`${this.byEarthBranch(0)}鼠偷粮`}getGrass(){return`草子${this.byEarthBranch(0)}分`}getCattle(){return`${this.byEarthBranch(1)}牛耕田`}getFlower(){return`花收${this.byEarthBranch(3)}分`}getDragon(){return`${this.byEarthBranch(4)}龙治水`}getHorse(){return`${this.byEarthBranch(6)}马驮谷`}getChicken(){return`${this.byEarthBranch(9)}鸡抢米`}getSilkworm(){return`${this.byEarthBranch(9)}姑看蚕`}getPig(){return`${this.byEarthBranch(11)}屠共猪`}getField(){return`甲田${this.byHeavenStem(0)}分`}getCake(){return`${this.byHeavenStem(2)}人分饼`}getGold(){return`${this.byHeavenStem(7)}日得金`}getPeopleCakes(){return`${this.byEarthBranch(2)}人${this.byHeavenStem(2)}丙`}getPeopleHoes(){return`${this.byEarthBranch(2)}人${this.byHeavenStem(3)}锄`}getName(){return"灶马头"}};s(W0,"NUMBERS",["一","二","三","四","五","六","七","八","九","十","十一","十二"]);let e1=W0;K0`overflow-x-auto snap-x snap-mandatory flex items-stretch wib`;K0`snap-center w-full shrink-0`;function K1(A,t,e="x",u){const r=e=="x"?"offsetLeft":"offsetTop";z0(A,function(n){const F=t();y2(()=>{const i=t();if(F&&i&&F!=i){const a=F[r],E=i[r],D=a-E;Q0(i,{[e]:[D,0]},u);const j=i.firstChild;j&&Q0(j,{[e]:[-D,0]},u)}})})}function s5({className:A,onChange:t,value:e,options:u,childClassName:r,renderChild:n,direction:F,animationConfig:i}){g.div({role:"tablist",className:`daisy-tabs daisy-tabs-box ${A}`,children(a){u.forEach(E=>{g.button({className(){return o2("daisy-tab",r,E==e()&&"daisy-tab-active")},role:"tab",onClick(){t(E)},children(){n(E)}})}),K1(e,()=>a.querySelector(".daisy-tab-active"),F,i)}})}const o1=h1(void 0);o1.consume.bind(o1);const C2=h1(void 0),B1="select-cell";function d1({day:A,lunarDay:t,hide:e,selected:u,onClick:r}){g.div({className(){return o2(`flex-1 aspect-square cursor-pointer
                        flex flex-col items-center justify-center gap-1 `,e()&&"opacity-30")},onClick:r,children(){g.div({className:"flex items-center justify-center relative aspect-square p-1",children(){t1(u,()=>{g.div({id:B1,className(){return o2("absolute inset-0 ring-1 rounded-full ring-accent")}})}),g.span({className:"relative text-base-content/80  text-label-large",childrenType:"text",children:A})}}),g.div({className:"text-label-small  text-base-content/60",childrenType:"text",children:t.getName()})}})}function l1(A){g.div({className:"flex bg-base-100 z-10 relative",children(){for(let t=0;t<7;t++)g.div({className:"flex-1 aspect-square flex items-center justify-center text-base-content",childrenType:"text",children(){return A(t)}})}})}function m1(A,t){A==0&&g.div({className:"absolute left-0 text-label-small",childrenType:"text",children(){return $1(P0(t),V0.get())}})}function Q1(A,t,e){u1.div({attrs(u){const r=t();r==1||(u.s_position="absolute",u.s_inset=0,u.s_transform=`translateX(${(r-1)*100}%)`)},children(){l1(function(u){return b2[A.weekDay(u)]}),g.div({className:"flex items-center justify-center relative",children(){for(let u=0;u<7;u++){const r=A.cells[u];m1(u,r);const F=v.fromYmd(r.year,r.month,r.day).getLunarDay();d1({hide(){return!1},day:r.day,lunarDay:F,selected(){return L1(r,e.get())},onClick(){e.set(r)}})}}})}})}function G1(A,t,e,u){const{showCalendar:r,calendarOpenHeight:n,perSize:F}=C2.consume();function i(){const a=u.get(),E=A;return a.year==E.year&&a.month==E.month}u1.div({attrs(a){const E=t();E==1||(a.s_position="absolute",a.s_inset=0,a.s_transform=`translateX(${(E-1)*100}%)`)},children(){l1(function(D){return b2[A.weekDay(D)]});const a=$0(()=>{const D=F(),j=n(),o=V1(P0(u.get()),V0.get())-1;return Z0({0:-D*o,[j]:0},F2)}),E=$0(()=>{const D=F(),j=n();return Z0({0:D,[j]:D*6},F2)});g.div({className:"overflow-hidden bg-base-200 relative",s_height(){const D=e();return E(D)+"px"},children(){t1(r,function(){g.div({s_height(){return F()*7+"px"},s_transform(){const D=Math.max(e(),0);return`translateY(${a(D)}px)`},children(){for(let D=0;D<6;D++)g.div({className:"flex items-center justify-center relative",children(){for(let j=0;j<7;j++){const o=A.fullDayOf(j,D);let c=A;o.type=="last"?c=A.lastMonth():o.type=="next"&&(c=A.nextMonth()),m1(j,{year:c.year,month:c.month,day:o.day});const d=v.fromYmd(c.year,c.month,o.day).getLunarDay(),m=t2(()=>o.type=="this"&&i()&&u.get().day==o.day);d1({day:o.day,onClick(){u.set(P.from(c.year,c.month,o.day))},lunarDay:d,selected:m,hide(){return r()?o.type!="this":!1}})}}})}})})}})}})}function A1(A,t,e,u){H1(function(r){const n=A();for(let F=0;F<n.length;F++){const i=n[F],a=t(i,F);r(a,i)}},function(r,n){e(n.getValue,n.getIndex,r)},{createMap:u,bindOut:!0,bindIndex:!0,bindValue:!0})}function U1(A){const{topScrollY:t,showCalendar:e,today:u,renderHeaderRight:r,calendarOpenHeight:n}=C2.consume();t5(A.get,B1);const F=t2(a=>{const E=A.get();return new I1(E.year,E.month,V0.get())}),i=t2(()=>{const a=A.get();return S1.from(a.year,a.month,a.day,V0.get())});g.div({className:"relative",onPointerDown(a){t.onAnimation()||t.pointerEventListner(a)},children(){const a=p1({getSize(){return E.clientWidth}}),E=g.div({className:"overflow-hidden  bg-base-300 touch-none",children(D){a.hookCompare(i,function(j,o){return e()?0:j.cells[0].toNumber()-o.cells[0].toNumber()}),a.hookCompare(F,function(j,o){return e()?j.toNumber()-o.toNumber():0}),D.addEventListener("pointerdown",j=>{k1(j,{onMove(o,c,B){if(c=="x")return a.getMoveEvent(o,c,{callback(d,m){if(e()){const l=d<0?F().lastMonth():F().nextMonth();A.get().day>l.days?A.set(P.from(l.year,l.month,l.days)):A.set(P.from(l.year,l.month,A.get().day))}else{const l=P0(A.get());l.setTime(l.getTime()+d*u5),d&&A.set(P.fromDate(l))}}})}})}),g.div({className:"relative",s_transform(){return`translateX(${-a.get()}px)`},children(){t1(e,function(){const j=$0(()=>{const o=n();return Z0({0:0,[o]:o},F2)});A1(()=>{const o=F();return[o.lastMonth(),o,o.nextMonth()]},o=>o.toNumber(),function(o,c){G1(o(),c,t2(()=>j(t.get())),A)})},function(){A1(()=>{const j=i();return[j.beforeWeek(),j,j.nextWeek()]},j=>j.cells[0].toNumber(),function(j,o){Q1(j(),o,A)})})}})}});g.div({className:"w-full h-11 flex justify-between items-center [padding-inline:18px] bg-base-100 z-10",children(){g.div({className:"flex items-center gap-1",children(){const D=N1(()=>{const j=u().toNumber(),o=A.get().toNumber();return j!=o?[1]:M1});w1(D,function(j){const o=g.button({className:"daisy-btn daisy-btn-xs daisy-btn-circle",onClick(){A.set(u())},children(){O1()}});z0((c=Y1)=>{const B=j.step(),d=u().toNumber(),m=A.get().toNumber(),l=Math.sign(m-d);return B==c.step&&l==c.dir?c:{step:B,dir:l}},function({step:c,dir:B}){c=="enter"?Q0(o,{rotateY:B>0?[90,0]:[90,180]}).then(j.resolve):c=="exiting"&&Q0(o,{rotateY:B>0?[0,90]:[180,90]}).then(j.resolve)})}),g.h1({className(){const j=u(),o=A.get();return o2("text-2xl text-base-content font-bold",j.equals(o)?"text-2xl":j.year==o.year?"text-xl":"text-lg",t.onAnimation()?K0`cursor-not-allowed`:K0`cursor-pointer`)},childrenType:"text",children(){const j=A.get();return u().year!=j.year?`${j.year}-${O0(j.month,2)}-${O0(j.day,2)}`:`${O0(j.month,2)}-${O0(j.day,2)}`},onClick(){t.onAnimation()||(e()?t.animateTo(0):t.animateTo(n()))}})}}),r()}})}})}const j1=-50;function X1(A,t,e){const{showCalendar:u,topScrollY:r,didCreate:n,renderContent:F}=C2.consume(),i=new c1("y",{edgeSlow:2,maxScroll(){return a.get()}}),a=i.measureMaxScroll();z0(i.get,function(E){E<j1&&n(A)}),z0(e,function(E){!E&&t()!=1&&y2(()=>{i.set(0)})}),u1.div({attrs(E){const D=t();E.className="absolute inset-0 select-none bg-base-100 overflow-hidden",D!=1&&(E.s_position="absolute",E.s_inset=0,E.s_transform=`translateX(${(D-1)*100}%)`)},onTouchMove(E){E.preventDefault()},onPointerDown(E){if(u())return r.pointerEventListner(E);i.pointerEventListner(E)},children(E){const D=$0(()=>Z0({0:0,[j1]:D1.length-1},F2));g.div({childrenType:"text",className:"absolute w-full flex justify-center",s_transform(){return`translateY(calc(${-i.get()}px - 100%))`},children(){const o=Math.round(D(i.get()));return D1[o]}});const j=g.div({s_transform(){return`translateY(${-i.get()}px)`},className:"flex flex-col",s_minHeight:"100%",children(){F(A)}});a.hookInit(E,j)}})}const D1=["新...","新增...","新增一...","新增一条...","新增一条记...","新增一条记录"];function _1(A){const t=v1({getValue:A.get,direction:"x",compare(e,u){const r=P0(u).valueOf(),F=P0(e).valueOf()-r;let i=0;return F>=A2?i=1:F<=-864e5&&(i=-1),i},callback(e,u){const r=P0(A.get());r.setTime(r.getTime()+e*A2),e&&A.set(P.fromDate(r))}});g.div({className:"flex-1 overflow-hidden",plugin:t.plugin,children(){g.div({className:"h-full",s_transform(){return`translateX(${-t.get()}px)`},children(){T1(()=>{const e=A.get();return[e.beforeDay(),e,e.nextDay()]},e=>e.toNumber(),function(e,u){X1(e(),u,()=>t.onAnimation())})}})}})}function e5(A,t){const{scrollYearMonthOpenHeight:e}=C2.consume(),u=$0(()=>Z0({0:-e(),[e()]:0},g1));g.div({s_height(){return t()+"px"},children(){g.div({s_height(){return e()+"px"},s_transform(){return`translateY(${u(t())}px)`},className:"relative w-full",children(){g.div({className:"absolute inset-0 flex items-stretch justify-center",children(){g.div({className:"flex-1 relative flex flex-col justify-center overflow-hidden",...C1({height:e,cellHeight:44,value:{get(){return A.get().year},set(r){const n=A.get();if(n.year!=r){const F=Math.min(a1(r,n.month),n.day);A.set(P.from(r,n.month,F))}return r}},renderCell(r){g.div({className:"h-11 text-center flex items-center justify-center",childrenType:"text",children:O0(r,2)})}})}),g.div({className:"flex-1 relative flex flex-col justify-center overflow-hidden",...C1({height:e,cellHeight:44,value:{get(){return A.get().month},set(r){const n=A.get();if(r!=n.month){const F=Math.min(a1(n.year,r),n.day);A.set(P.from(n.year,r,F))}return r}},circle:{baseIndex:1,count:12},renderCell(r){g.div({className:"h-11 text-center flex items-center justify-center",childrenType:"text",children:O0(r,2)})}})})}}),g.div({className:"absolute inset-0 flex flex-col items-stretch justify-center pointer-events-none ",children(){g.div({className:"flex-1 bg-linear-to-b from-base-100 to-100% to-base-100/90"}),g.div({className:"h-11 flex flex-col justify-center"}),g.div({className:"flex-1 bg-linear-to-t from-base-100 to-100% to-base-100/90"})}})}})}})}function C5(A){const t=P.fromDate(new Date),e=I2(t,s1),u=setInterval(()=>{e.set(P.fromDate(new Date))},A2/2);b1(()=>{clearInterval(u)});const r=I2(t,s1);function n(){return A.getFullWidth()/7}function F(){return 5*A.getFullWidth()/7}function i(){return 44*3}const a=new c1("y",{maxScroll(){return F()+i()},opposite:!0,targetSnap:$0(function(){return y1([{beforeForce:1,size:F(),afterForce:1},{beforeForce:1,size:i(),afterForce:1}])})});C2.provide({...A,perSize:n,topScrollY:a,scrollYearMonthOpenHeight:i,calendarOpenHeight:F,today:e.get,showCalendar(){return a.get()>0}}),g.div({className:"absolute overflow-hidden inset-0 flex flex-col select-none touch-none",children(){const E=$0(()=>Z0({[F()]:0,[a.getMaxScroll()]:i()},q1(F2,g1)));e5(r,t2(()=>E(a.get()))),U1(r),_1(r)}})}function t5(A,t){z0(A,()=>{const e=document.getElementById(t);if(e){let u=e.getBoundingClientRect();y2(()=>{e.isConnected&&(u=e.getBoundingClientRect());const r=document.getElementById(t);if(r){const n=r.getBoundingClientRect();Q0(r,{x:[u.left-n.left,0],y:[u.top-n.top,0]})}},3)}})}const u5=7*A2,b2=["一","二","三","四","五","六","日"],V0=I2(7);function a5(){g.div({className:"daisy-dropdown daisy-dropdown-end",children(){g.div({tabIndex:0,role:"button",className:"daisy-btn m-1",childrenType:"text",children(){return`日历开始于:${b2[V0.get()-1]}`}}),g.ul({tabIndex:0,className:"daisy-dropdown-content daisy-menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm",children(){for(let A=0;A<7;A++)g.li({children(){g.button({className:"justify-end",childrenType:"text",children:b2[A],onClick(){V0.set(A+1),console.log("firstWeek",V0.get())}})}})}})}})}function E5(A,t,e){return function(u){const r="offsetTop";let n=-1;z0(A,function(F){y2(()=>{if(n>=0){const i=n-u[r];if(!i)return;Q0(u,{[t]:[i,0]},e)}n=u[r]})})}}K0`daisy-navbar bg-base-200 shadow-sm top-0 sticky z-1`;K0`daisy-btn daisy-btn-circle daisy-btn-ghost`;export{v as S,u5 as W,b2 as a,s5 as b,a5 as c,C5 as d,V0 as f,t5 as h,E5 as p};
