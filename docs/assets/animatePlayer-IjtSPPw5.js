import{movesQueue as i,stepCompleted as l,position as f,player as e}from"./Player-Br6WlRHp.js";import{tileSize as r}from"./constants-D9wMxaBn.js";import{co as c,j as m}from"./three.core-IZwRyLr5.js";import"./endsUpInValidPosition-C4IJbgBi.js";import"./calculateFinalPosition-DP2hh8aV.js";import"./Map-CccKx6bK.js";import"./Grass-D94HOHke.js";import"./Three-DORzRoVO.js";import"./Road-CBDd-7dN.js";import"./Car-Cqd5vzn5.js";import"./Wheel-D2dfaNrt.js";import"./Truck-DGmdOD13.js";import"./generateRows-KEcLWJxb.js";import"./index-DzjyJcX9.js";const n=new c(!1);function x(){if(!i.length)return;n.running||n.start();const t=Math.min(1,n.getElapsedTime()/.2);h(t),d(t),t>=1&&(l(),n.stop())}function h(o){const t=f.currentTile*r,s=f.currentRow*r;let a=t,p=s;i[0]==="left"&&(a-=r),i[0]==="right"&&(a+=r),i[0]==="forward"&&(p+=r),i[0]==="backward"&&(p-=r),e.position.x=m.lerp(t,a,o),e.position.y=m.lerp(s,p,o),e.children[0].position.z=Math.sin(o*Math.PI)*8}function d(o){let t=0;i[0]=="forward"&&(t=0),i[0]=="left"&&(t=Math.PI/2),i[0]=="right"&&(t=-Math.PI/2),i[0]=="backward"&&(t=Math.PI),e.children[0].rotation.z=m.lerp(e.children[0].rotation.z,t,o)}export{x as animatePlayer};
