import{endsUpInValidPosition as u}from"./endsUpInValidPosition-C4IJbgBi.js";import{metadata as d,addRows as m}from"./Map-CccKx6bK.js";import{c as w}from"./index-DzjyJcX9.js";import{G as a,a as c,bV as s,cn as p}from"./three.core-IZwRyLr5.js";import"./calculateFinalPosition-DP2hh8aV.js";import"./constants-D9wMxaBn.js";import"./Grass-D94HOHke.js";import"./Three-DORzRoVO.js";import"./Road-CBDd-7dN.js";import"./Car-Cqd5vzn5.js";import"./Wheel-D2dfaNrt.js";import"./Truck-DGmdOD13.js";import"./generateRows-KEcLWJxb.js";function l(){const t=new a,o=new c(new s(5,5,20),new p({color:"white",flatShading:!0}));o.position.z=10,o.castShadow=!0,o.receiveShadow=!0,t.add(o);const r=new c(new s(2,4,2),new p({color:15753626,flatShading:!0}));r.position.z=21,r.castShadow=!0,t.add(r);const i=new a;return i.add(t),i}const z=l(),e={currentRow:0,currentTile:0},n=[];function C(t){u({rowIndex:e.currentRow,tileIndex:e.currentTile},[...n,t])&&n.push(t)}function P(){const t=n.shift();t==="forward"&&(e.currentRow+=1),t==="backward"&&(e.currentRow-=1),t==="left"&&(e.currentTile-=1),t==="right"&&(e.currentTile+=1),e.currentRow>d.length-10&&m(),f.set(e.currentRow)}const f=w(0);export{n as movesQueue,z as player,e as position,C as queueMove,f as score,P as stepCompleted};
