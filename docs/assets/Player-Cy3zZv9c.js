import{endsUpInValidPosition as u}from"./endsUpInValidPosition-9sjQjpQm.js";import{metadata as d,addRows as m}from"./Map-B9WyMSq1.js";import{c as w}from"./index-CnmbM-dR.js";import{ce as a,a as c,bM as s,cf as p}from"./three.core-Bu5rU7E4.js";import"./calculateFinalPosition-DP2hh8aV.js";import"./constants-D9wMxaBn.js";import"./Grass-BavhgwY0.js";import"./Three-Bivhf_TF.js";import"./Road-C2uemW3h.js";import"./Car-Q5T3l03N.js";import"./Wheel-C03bxVnY.js";import"./Truck-CQI_NzhJ.js";import"./generateRows-bVBXo6dn.js";function l(){const e=new a,o=new c(new s(5,5,20),new p({color:"white",flatShading:!0}));o.position.z=10,o.castShadow=!0,o.receiveShadow=!0,e.add(o);const r=new c(new s(2,4,2),new p({color:15753626,flatShading:!0}));r.position.z=21,r.castShadow=!0,e.add(r);const i=new a;return i.add(e),i}const C=l(),t={currentRow:0,currentTile:0},n=[];function G(e){u({rowIndex:t.currentRow,tileIndex:t.currentTile},[...n,e])&&n.push(e)}function P(){const e=n.shift();e==="forward"&&(t.currentRow+=1),e==="backward"&&(t.currentRow-=1),e==="left"&&(t.currentTile-=1),e==="right"&&(t.currentTile+=1),t.currentRow>d.length-10&&m(),f.set(t.currentRow)}const f=w(0);export{n as movesQueue,C as player,t as position,G as queueMove,f as score,P as stepCompleted};
