import{endsUpInValidPosition as u}from"./endsUpInValidPosition-D1nvD85j.js";import{metadata as d,addRows as m}from"./Map-BNo5PXt0.js";import{c as w}from"./index--sZwA4wO.js";import{c6 as a,ap as c,bE as s,c7 as p}from"./three.core-CVFNDdqD.js";import"./calculateFinalPosition-DP2hh8aV.js";import"./constants-D9wMxaBn.js";import"./Grass-CYkpYd_z.js";import"./Three-Bzob0eEC.js";import"./Road-CCSlC-20.js";import"./Car-C_hCo3Tq.js";import"./Wheel-CjIOtM0J.js";import"./Truck-BiOAh_y0.js";import"./generateRows-B5wFeTKb.js";function l(){const t=new a,o=new c(new s(5,5,20),new p({color:"white",flatShading:!0}));o.position.z=10,o.castShadow=!0,o.receiveShadow=!0,t.add(o);const r=new c(new s(2,4,2),new p({color:15753626,flatShading:!0}));r.position.z=21,r.castShadow=!0,t.add(r);const i=new a;return i.add(t),i}const C=l(),e={currentRow:0,currentTile:0},n=[];function G(t){u({rowIndex:e.currentRow,tileIndex:e.currentTile},[...n,t])&&n.push(t)}function P(){const t=n.shift();t==="forward"&&(e.currentRow+=1),t==="backward"&&(e.currentRow-=1),t==="left"&&(e.currentTile-=1),t==="right"&&(e.currentTile+=1),e.currentRow>d.length-10&&m(),f.set(e.currentRow)}const f=w(0);export{n as movesQueue,C as player,e as position,G as queueMove,f as score,P as stepCompleted};
